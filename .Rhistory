# Find indices where the host_organization contains the search string (case insensitive)
indices_with_string <- which(sapply(df$id, function(x) !is.na(x) && search_string %in% x))
print(df[indices_with_string, ]$host_organization)
print(indices_with_string)
return(indices_with_string)
}
###############################################################
# Verify any cited work using the function search_references()
# Define the function to search for a string in the referenced_works column and print the output
##############################################3
search_references <- function(search_string, df) {
indices_with_string <- which(sapply(df$referenced_works, function(x) search_string %in% x))
print(indices_with_string)
print(df[indices_with_string, ]$id)
}
# Example usage:
search_string <- "Emerald Publishing"
search_string <- "Brill"
result_indices <- search_publisher(search_string, works_published)
print(result_indices)
rank_top_cited_journals <- function(data, journal_col, top_n = 10) {
top_cited_journals <- data %>%
group_by(!!sym(journal_col)) %>%      # Group by the journal names (column provided by the user)
summarise(citation_count = n()) %>%   # Count the number of articles per journal
arrange(desc(citation_count)) %>%     # Sort by citation count in descending order
slice(1:top_n)                        # Select top 'n' journals
print(top_cited_journals, n = top_n)
}
write_df_to_excel <- function(df, file_path_prefix = "citations/") {
df_name <- deparse(substitute(df))
file_name <- paste0(df_name, ".xlsx")
file_path <- paste0(file_path_prefix, file_name)
tryCatch({
write_xlsx(df, file_path)
message(paste("Successfully wrote", df_name, "to", file_path))
}, error = function(e) {
message(paste("Error writing", df_name, "to Excel:", e))
print(e)
})
}
result_indices <- search_publisher(publisher_string, works_cited_type_article)
###############################################################
# Verify any cited work using the function search_references()
# Define the function to search for a string in the referenced_works column and print the output
##############################################3
search_references <- function(search_string, df) {
indices_with_string <- which(sapply(df$referenced_works, function(x) search_string %in% x))
print(indices_with_string)
print(df[indices_with_string, ]$id)
}
# 1. Write Individual Excel Files
write_xlsx(works_cited_type_articles, "citations/works_cited_type_brill.xlsx")
# Choose one for output
works_cited_type_articles_brill  <- works_cited_type_articles[grepl("Brill", works_cited_source_issn$host_organization, ignore.case = TRUE), ]
### Step 2: Separate works_cited using criteria such as "type", "ISSN" or other criteria
# Step 2.1: One way is via type = article
works_cited_type_articles    <- subset(works_cited, type == "article")
unique(works_cited_type_articles$type)
unique_issns <- unique(works_cited_type_articles$issn_l)
number_of_unique_issns <- length(unique_issns)
works_cited_type_nonarticles <- subset(works_cited, type != "article")
unique(works_cited_type_nonarticles$type)
unique_issns2 <- unique(works_cited_type_nonarticles$issn_l)
number_of_unique_issns2 <- length(unique_issns2)
# Choose one for output
works_cited_type_articles_brill  <- works_cited_type_articles[grepl("Brill", works_cited_source_issn$host_organization, ignore.case = TRUE), ]
works_cited_type_articles_brill  <- works_cited_type_articles[grepl("Brill", works_cited_type_articles$host_organization, ignore.case = TRUE), ]
# Choose one for output
works_cited_type_articles_brill <- works_cited_type_articles %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_cited_type_nonarticles_brill <- works_cited_type_nonarticles %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_published_brill <- works_published %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
View(works_cited_type_nonarticles_brill)
works_published_brill <- works_published %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
write_df_to_excel <- function(df, file_path_prefix = "citations/") {
df_name <- deparse(substitute(df))
file_name <- paste0(df_name, ".xlsx")
file_path <- paste0(file_path_prefix, file_name)
tryCatch({
write_xlsx(df, file_path)
message(paste("Successfully wrote", df_name, "to", file_path))
}, error = function(e) {
message(paste("Error writing", df_name, "to Excel:", e))
print(e)
})
}
# 1. Write Individual Excel Files
write_xlsx(works_cited_type_articles_brill, "citations/works_cited_type_articles_brill.xlsx")
write_xlsx(works_cited_type_nonarticles_brill, "citations/works_cited_type_nonarticles_brill.xlsx")
write_xlsx(works_published_brill, "citations/published_brill.xlsx")
write_df_to_excel(works_cited_type_articles_brill)
write_df_to_excel(works_cited_type_nonarticles_brill)
write_df_to_excel(works_published_brill)
rank_top_cited_journals <- function(data, journal_col, top_n = 10) {
top_cited_journals <- data %>%
group_by(!!sym(journal_col)) %>%      # Group by the journal names (column provided by the user)
summarise(citation_count = n()) %>%   # Count the number of articles per journal
arrange(desc(citation_count)) %>%     # Sort by citation count in descending order
slice(1:top_n)                        # Select top 'n' journals
print(top_cited_journals, n = top_n)
}
# Combine all the above 3 dfs into one Excel
rank_top_cited_journals(works_cited_source_issn_brill, "so", 50)
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
# Combine all the above 3 dfs into one Excel
rank_top_cited_journals(works_cited_type_articles_brill, "so", 50)
rank_top_cited_journals(works_cited_type_nonarticles_brill, "so", 50)
View(works_cited_type_articles_brill)
View(works_cited_type_nonarticles_brill)
View(works_cited_type_articles_brill)
View(works_cited_type_articles_brill)
# 1. Write Individual Excel Files
write_df_to_excel(works_cited_type_articles_brill)
### Step 5: Final output to Excel
write_df_to_excel <- function(df, file_path_prefix = "citations/") {
df_name <- deparse(substitute(df))
file_name <- paste0(df_name, ".xlsx")
file_path <- paste0(file_path_prefix, file_name)
sheet_name <- df_name
# Limit sheet name to 31 characters, replacing invalid characters
sheet_name <- gsub("[[:punct:]]", "_", sheet_name) # Replace punctuation
sheet_name <- substr(sheet_name, 1, 31)       # Truncate
tryCatch({
write_xlsx(df, file_path)
message(paste("Successfully wrote", df_name, "to", file_path))
}, error = function(e) {
message(paste("Error writing", df_name, "to Excel:", e))
print(e)
})
}
# 1. Write Individual Excel Files
write_df_to_excel(works_cited_type_articles_brill)
### Step 5: Final output to Excel
write_df_to_excel <- function(df, file_path_prefix = "citations/") {
df_name <- deparse(substitute(df))
file_name <- paste0(df_name, ".xlsx")
file_path <- paste0(file_path_prefix, file_name)
sheet_name <- df_name
# Limit sheet name to 31 characters, replacing invalid characters
sheet_name <- gsub("[[:punct:]]", "_", sheet_name) # Replace punctuation
sheet_name <- substr(sheet_name, 1, 31)       # Truncate
tryCatch({
write_xlsx(df, file_path)
message(paste("Successfully wrote", df_name, "to", file_path))
}, error = function(e) {
message(paste("Error writing", df_name, "to Excel:", e))
print(e)
})
}
# 1. Write Individual Excel Files
write_df_to_excel(works_cited_type_articles_brill)
rank_top_cited_journals <- function(data, journal_col, top_n = 10) {
top_cited_journals <- data %>%
group_by(!!sym(journal_col)) %>%      # Group by the journal names (column provided by the user)
summarise(citation_count = n()) %>%   # Count the number of articles per journal
arrange(desc(citation_count)) %>%     # Sort by citation count in descending order
slice(1:top_n)                        # Select top 'n' journals
#print(top_cited_journals, n = top_n)
print(as.data.frame(top_cited_journals, n = top_n))
}
rank_top_cited_journals(publisher_brill, "so", 50)
rank_top_cited_journals(works_cited_type_articles_brill, "so", 50)
rank_top_cited_journals <- function(data, journal_col, top_n = 10) {
top_cited_journals <- data %>%
group_by(!!sym(journal_col)) %>%      # Group by the journal names (column provided by the user)
summarise(citation_count = n()) %>%   # Count the number of articles per journal
arrange(desc(citation_count)) %>%     # Sort by citation count in descending order
slice(1:top_n)                        # Select top 'n' journals
#print(top_cited_journals, n = top_n)
print(as.data.frame(top_cited_journals, n = top_n))
write_xlsx(list("Sheet1" = result_df), "top_ranked_journals.xlsx")
}
rank_top_cited_journals <- function(data, journal_col, top_n = 10) {
top_cited_journals <- data %>%
group_by(!!sym(journal_col)) %>%      # Group by the journal names (column provided by the user)
summarise(citation_count = n()) %>%   # Count the number of articles per journal
arrange(desc(citation_count)) %>%     # Sort by citation count in descending order
slice(1:top_n)                        # Select top 'n' journals
#print(top_cited_journals, n = top_n)
print(as.data.frame(top_cited_journals, n = top_n))
write_xlsx(list("Sheet1" = result_df), "top_ranked_journals.xlsx")
}
rank_top_cited_journals(works_cited_type_articles_brill, "so", 50)
Q
rank_top_cited_journals <- function(data, journal_col, top_n = 10) {
top_cited_journals <- data %>%
group_by(!!sym(journal_col)) %>%      # Group by the journal names (column provided by the user)
summarise(citation_count = n()) %>%   # Count the number of articles per journal
arrange(desc(citation_count)) %>%     # Sort by citation count in descending order
slice(1:top_n)                        # Select top 'n' journals
#print(top_cited_journals, n = top_n)
print(as.data.frame(top_cited_journals, n = top_n))
write_xlsx(list("Sheet1" = top_cited_journals), "top_ranked_journals.xlsx")
}
rank_top_cited_journals(works_cited_type_articles_brill, "so", 50)
rank_top_cited_journals <- function(data, journal_col, top_n = 10) {
top_cited_journals <- data %>%
group_by(!!sym(journal_col)) %>%      # Group by the journal names (column provided by the user)
summarise(citation_count = n()) %>%   # Count the number of articles per journal
arrange(desc(citation_count)) %>%     # Sort by citation count in descending order
slice(1:top_n)                        # Select top 'n' journals
#print(top_cited_journals, n = top_n)
print(as.data.frame(top_cited_journals, n = top_n))
write_xlsx(list("Sheet1" = top_cited_journals), "citations/top_ranked_journals.xlsx")
}
rank_top_cited_journals(works_cited_type_articles_brill, "so", 50)
rank_top_cited_journals(works_cited_type_articles_brill, "so", 200)
excel_files <- c("citations/issn_brill.xlsx", "citations/top_cited_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
excel_files <- c("citations/works_cited_type_articles_brill.xlsx", "citations/top_cited_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
excel_files <- c("citations/works_cited_type_articles_brill.xlsx", "citations/top_ranked_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
rank_top_cited_journals <- function(data, journal_col, top_n = 10, output_dir = "citations") {
if (!is.data.frame(data)) {
stop("Input 'data' must be a data.frame or tibble.")
}
if (!is.character(journal_col) || length(journal_col) != 1) {
stop("Input 'journal_col' must be a single string.")
}
if (!(journal_col %in% names(data))) {
stop("journal_col is not found")
}
top_cited_journals <- data %>%
group_by(!!sym(journal_col)) %>%
summarise(citation_count = n(), .groups = "drop") %>%
arrange(desc(citation_count)) %>%
rename("Journal Title" = !!sym(journal_col))
# Print all rows if top_n is NULL or larger than number of rows
if (is.null(top_n) || top_n >= nrow(top_cited_journals)) {
print(as.data.frame(top_cited_journals))  # Convert to data.frame and print all
} else {
# Print only the requested top_n journals.
print(head(as.data.frame(top_cited_journals), top_n))
top_cited_journals <- top_cited_journals %>%
slice(1:top_n) #keep top_n for writing to file
}
# --- File Output ---
# Get the name of the input data frame
df_name <- deparse(substitute(data))
# Create the output file path
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
output_file <- file.path(output_dir, paste0(df_name, ".xlsx"))
# Write to Excel
tryCatch({
write_xlsx(list("Top Cited Journals" = as.data.frame(top_cited_journals)), output_file)
message(paste("Successfully wrote top cited journals to:", output_file))
}, error = function(e) {
message(paste("Error writing to Excel:", e))
print(e)  # Print the full error object
})
return(top_cited_journals)
}
rank_top_cited_journals(works_cited_type_articles_brill, "so", 50)
rank_top_cited_journals <- function(data, journal_col, top_n = 10, output_dir = "citations") {
if (!is.data.frame(data)) {
stop("Input 'data' must be a data.frame or tibble.")
}
if (!is.character(journal_col) || length(journal_col) != 1) {
stop("Input 'journal_col' must be a single string.")
}
if (!(journal_col %in% names(data))) {
stop("journal_col is not found")
}
top_cited_journals <- data %>%
group_by(!!sym(journal_col)) %>%
summarise(citation_count = n(), .groups = "drop") %>%
arrange(desc(citation_count)) %>%
rename("Journal Title" = !!sym(journal_col))
# Print all rows if top_n is NULL or larger than number of rows
if (is.null(top_n) || top_n >= nrow(top_cited_journals)) {
print(as.data.frame(top_cited_journals))  # Convert to data.frame and print all
} else {
# Print only the requested top_n journals.
print(head(as.data.frame(top_cited_journals), top_n))
top_cited_journals <- top_cited_journals %>%
slice(1:top_n) #keep top_n for writing to file
}
# --- File Output ---
# Get the name of the input data frame
df_name <- deparse(substitute(data))
# Create the output file path
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
output_file <- file.path(output_dir, paste0(df_name, "_top_ranked_journals.xlsx"))
# Write to Excel
tryCatch({
write_xlsx(list("Top Cited Journals" = as.data.frame(top_cited_journals)), output_file)
message(paste("Successfully wrote top cited journals to:", output_file))
}, error = function(e) {
message(paste("Error writing to Excel:", e))
print(e)  # Print the full error object
})
return(top_cited_journals)
}
rank_top_cited_journals(works_cited_type_articles_brill, "so", 50)
excel_files <- c("citations/works_cited_type_articles_brill.xlsx", "citations/works_cited_type_articles_brill_top_ranked_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
sheet_name <-substr(sheet_name, 1, 31)  # Truncate to 31 chars for worksheet
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
excel_files <- c("citations/works_cited_type_articles_brill.xlsx", "citations/works_cited_type_articles_brill_top_ranked_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
sheet_name <-substr(sheet_name, 1, 31)  # Truncate to 31 chars for worksheet
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
excel_files <- c("citations/works_cited_type_articles_brill.xlsx", "citations/brill_top_ranked_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
sheet_name <-substr(sheet_name, 1, 31)  # Truncate to 31 chars for worksheet
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
# 1. Write Individual Excel Files
write_df_to_excel(works_cited_type_articles_brill)
excel_files <- c("citations/works_cited_type_articles_brill.xlsx", "citations/brill_top_ranked_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
sheet_name <-substr(sheet_name, 1, 31)  # Truncate to 31 chars for worksheet
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
works_cited2 <- readRDS("../works_cited_2022.rds")
works_cited <- works_cited2
########################################################################################
#########################################################################################
### Step 2: Separate works_cited using criteria such as "type", "ISSN" or other criteria
# Step 2.1: One way is via type = article
works_cited_type_articles    <- subset(works_cited, type == "article")
unique(works_cited_type_articles$type)
unique_issns <- unique(works_cited_type_articles$issn_l)
number_of_unique_issns <- length(unique_issns)
works_cited_type_nonarticles <- subset(works_cited, type != "article")
unique(works_cited_type_nonarticles$type)
unique_issns2 <- unique(works_cited_type_nonarticles$issn_l)
number_of_unique_issns2 <- length(unique_issns2)
# Criteria: article and nonarticle.
works_cited_type_articles_brill <- works_cited_type_articles %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_cited_type_nonarticles_brill <- works_cited_type_nonarticles %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_cited_type_articles_brill_2022 <- works_cited_type_articles_brill
works_cited <- readRDS("../works_cited_2023.rds")
########################################################################################
#########################################################################################
### Step 2: Separate works_cited using criteria such as "type", "ISSN" or other criteria
# Step 2.1: One way is via type = article
works_cited_type_articles    <- subset(works_cited, type == "article")
unique(works_cited_type_articles$type)
unique_issns <- unique(works_cited_type_articles$issn_l)
number_of_unique_issns <- length(unique_issns)
works_cited_type_nonarticles <- subset(works_cited, type != "article")
unique(works_cited_type_nonarticles$type)
unique_issns2 <- unique(works_cited_type_nonarticles$issn_l)
number_of_unique_issns2 <- length(unique_issns2)
# Criteria: article and nonarticle.
works_cited_type_articles_brill <- works_cited_type_articles %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_cited_type_articles_brill_2023 <- works_cited_type_articles_brill
works_cited_type_articles_brill_2022_2023 <- bind_rows(works_cited_type_articles_brill_2022, works_cited_type_articles_brill_2022)
rank_top_cited_journals(works_cited_type_articles_brill_2022_2023, "so", 200)
# 1. Write Individual Excel Files
write_df_to_excel(works_cited_type_articles_brill_2022_2023)
excel_files <- c("citations/works_cited_type_articles_brill_2022_2023.xlsx", "citations/brill_2022_2023_top_ranked_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
sheet_name <-substr(sheet_name, 1, 31)  # Truncate to 31 chars for worksheet
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
excel_files <- c("citations/works_cited_type_articles_brill_2022_2023.xlsx", "citations/brill_2022_2023_top_ranked_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
sheet_name <-substr(sheet_name, 1, 31)  # Truncate to 31 chars for worksheet
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
