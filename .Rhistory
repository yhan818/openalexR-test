works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; Not sure why there is only 1 record. I have 14 works at ORCID's website
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; Not sure why there is only 1 record. I have 14 works at ORCID's website
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
# common libraries to add
library(openalexR)
library(dplyr)
library(ggplot2)
library(knitr)
works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; Not sure why there is only 1 record. I have 14 works at ORCID's website
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
works_from_orcids |>
show_works()  |>
knitr::kable()
##### Getting authors' info using their ORCIDs
authors_from_orcids <- oa_fetch(
entity = "authors",
# orcid = c("0000-0001-9518-2684"),
orcid =  c("0000-0001-6187-6610", "0000-0002-8517-9411", "0000-0003-1613-5981") # working right
)
str(authors_from_orcids) # show the object
authors_from_orcids |>
show_authors() |>
knitr::kable()
##### Getting authors' info using their ORCIDs
authors_from_orcids <- oa_fetch(
entity = "authors",
# orcid = c("0000-0001-9518-2684"),
orcid =  c("0000-0001-6187-6610", "0000-0002-8517-9411", "0000-0003-1613-5981", "0000-0001-9518-2684") # working right
)
str(authors_from_orcids) # show the object
authors_from_orcids |>
show_authors() |>
knitr::kable()
###################### Author's name ####################################
###  use search for fuzzy name (middle name),
###  do NOT use display_name because it requires an exact match. Often there are multiple middle names for an author
authors_from_names <- oa_fetch(entity = "author",
search = "Phillip Kuo")  ### "search" syntax allowes fuzzy search for middle name
authors_from_names
authors_from_names$id
authors_from_names$affiliation_display_name
grep("Arizona*", authors_from_names$affiliation_display_name, value=TRUE, ignore.case=TRUE)
authors_from_names |>
show_authors() |>
knitr::kable()
org_args <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
# last_known_institution.id = "I71267560", # I71267560 is University of Naples Federio II OpenAlex ID
works_count = ">0"
)
View(org_args)
do.call(oa_fetch, c(org_args, list(count_only = TRUE)))
# Top authors
org_args2 <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
works_count = ">499"
)
do.call(oa_fetch, c(org_args2, list(count_only = TRUE)))
# Download the list
all_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
do.call(oa_fetch, c(org_args, list(count_only = TRUE)))
# Download the list
all_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
# Top authors
org_args2 <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
works_count = ">499"
)
do.call(oa_fetch, c(org_args2, list(count_only = TRUE)))
top_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
View(authors_from_names)
show(top_authors)
show(all_authors)
author_from_openalex_id <-oa_fetch(entity = "author",
openalex = "A4353996111" )
author_from_openalex_id
View(author_from_openalex_id)
View(author_from_openalex_id[[9]][[1]])
author_works <- oa_fetch ( entity = "works",
author.id=("A4353996111"),
verbose = TRUE
) %>%
show_works() %>%
knitr:kable()
library(knitr)
authors_from_orcids |>
show_authors() |>
knitr::kable()
author_works <- oa_fetch ( entity = "works",
author.id=("A4353996111"),
verbose = TRUE
) %>%
show_works() %>%
knitr:kable()
author_works <- oa_fetch ( entity = "works",
author.id=("A4353996111"),
verbose = TRUE
)
show_works(author_works) |> knitr:kable()
show_works(author_works)
View(author_from_openalex_id)
View(author_from_openalex_id)
View(author_works)
install.packages("openalexR")
install.packages("readr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("knitr")
install.packages("testthat")
install.packages("knitr")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("dplyr")
# common libraries
library(openalexR)
library(dplyr)
library(ggplot2)
library(knitr)
install.packages("openalexR")
install.packages("openalexR")
install.packages("readr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("knitr")
install.packages("testthat")
# common libraries
library(openalexR)
library(dplyr)
library(ggplot2)
library(knitr)
library(testthat)
library(readr)
options (openalexR.mailto="yhan@arizona.edu")
getwd()
setwd("/home/yhan/Documents/openalexR-test")
### Test data
test_data_COM_authors     <- c("Phillip Kuo", "Bekir Tanriover", "Ahlam Saleh")
test_data_affiliation <- c("University of Arizona")
test_data_year <- c("2022", "2021", "2020", "2012")
# use "search" option with no middle name
author_from_names <- oa_fetch(entity = "author", search = test_data_COM_authors[2] )
# use "search" option with no middle name
author_from_names <- oa_fetch(entity = "author", search = test_data_COM_authors[2] )
author_from_openalex_id <-oa_fetch(entity = "author",
openalex = "A4353996111" )
author_from_openalex_id
author_works <- oa_fetch ( entity = "works",
author.id=("A4353996111"),
verbose = TRUE
)
# use "search" option with no middle name
author_from_names <- oa_fetch(entity = "author", search = test_data_COM_authors[2])
oa_entities()
authors_from_names <- oa_fetch(
entity = "authors",
display_name = c("Massimo Aria", "Jason Priem"),
has_orcid = TRUE
)
authors_from_names |>
show_authors() |>
knitr::kable()
author_from_names <- oa_fetch(entity = "author", search = "Phillip Kuo")
author_from_names <- oa_fetch("author", search = "Phillip Kuo")
author_from_names <- oa_fetch(entity = "author", search = "Phillip Kuo")
author_from_names <- oa_fetch(entity = "author", display_name.search = "Phillip Kuo")
author_from_names <- oa_fetch(entity = "authors", display_name.search = "Phillip Kuo")
author_from_openalex_id <-oa_fetch(entity = "author",
openalex = "A4353996111" )
author_from_openalex_id
###################### Author's name ####################################
###  use search for fuzzy name (middle name),
###  do NOT use display_name because it requires an exact match. Often there are multiple middle names for an author
authors_from_names <- oa_fetch(entity = "author",
search = "Phillip Kuo")  ### "search" syntax allowes fuzzy search for middle name
# common libraries
library(openalexR)
author_from_names <- oa_fetch(entity = "author", search = "Phillip Kuo")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("ropensci/openalexR")
# use "search" option with no middle name
author_from_names <- oa_fetch(entity = "author", search = test_data_COM_authors[2])
author_from_names <- oa_fetch(entity = "author", search = "Phillip Kuo")
remotes::install_github("ropensci/openalexR")
author_from_names <- oa_fetch(entity = "author", search = "Phillip Kuo")
# common libraries
library(openalexR)
citation("openalexR")
author_from_names <- oa_fetch(entity = "author", search = "Phillip Kuo")
# use "search" option with no middle name
author_from_names <- oa_fetch(entity = "author", search = test_data_COM_authors[2])
# first checking if author exists
if (!is.null(author_from_names)) {
print("author found")
# Filter out not "University of Arizona" authors using "affiliation_display_name" column.
# other filtering fields can be "affiliation_id", "affiliation_ror"
filtered_authors <- subset(author_from_names, grepl("University of Arizona", affiliation_display_name, ignore.case=TRUE))
if (nrow(filtered_authors) == 0 )  {
print("The filtered_authors dataframe is empty")
}
}
# print openalex ID
print(filtered_authors)
print(filtered_authors[1][1])
## Testing
openalex_author_id <- filtered_authors$id[1]
author_works <- oa_fetch ( entity = "works",
author.id=(openalex_author_id),
verbose = TRUE )
object_type <- class(author_works)
print(object_type)
# Filter publications after year 2020
filtered_author_works <- author_works %>%
filter(substr(publication_date, 1,4) >"2020")
library(dplyr)
library(ggplot2)
library(knitr)
library(testthat)
library(readr)
## Testing
openalex_author_id <- filtered_authors$id[1]
author_works <- oa_fetch ( entity = "works",
author.id=(openalex_author_id),
verbose = TRUE )
object_type <- class(author_works)
print(object_type)
# Filter publications after year 2020
filtered_author_works <- author_works %>%
filter(substr(publication_date, 1,4) >"2020")
# Filter source of work
so_values <- filtered_author_works$so
#convert author_works$author (list) to , separated by "," using sapply
# List "author" contains all the authors info
filtered_author_works$author <- sapply(filtered_author_works$author, paste, collapse = ",")
#convert author_works$author (list) to , separated by "," using sapply
# List "author" contains all the authors info
filtered_author_works$author <- sapply(filtered_author_works$author, paste, collapse = ",")
# List "ids" contains openAlexId, doi, and pmid
filtered_author_works$ids <- sapply(filtered_author_works$ids, paste, collapse = ",")
# List "referenced_works" contains references
filtered_author_works$referenced_works <- sapply(filtered_author_works$referenced_works, paste, collapse = ",")
# List "related_works" contains related works
filtered_author_works$related_works <- sapply(filtered_author_works$related_works, paste, collapse = ",")
filtered_author_works$counts_by_year <- NULL
filtered_author_works$concepts <- NULL
field_names <-colnames(filtered_author_works)
print(field_names)
# Test works
works_from_dois <- oa_fetch(entity = "works", doi = c("10.1016/j.joi.2017.08.007", "https://doi.org/10.1007/s11192-013-1221-3"),  verbose = TRUE)
View(works_from_dois)
View(works_from_dois[[3]][[1]])
View(author_works)
# Test works
works_from_dois <- oa_fetch(entity = "works", doi = c("https://doi.org/10.1681/asn.2012070664", "https://doi.org/10.1007/s11192-013-1221-3"),  verbose = TRUE)
View(works_from_dois)
#### Some testing first
author_from_names <- oa_fetch(entity = "author", search = "Bekir Tanriover" )
author_from_names <- oa_fetch(entity = "author", search = test_data_not_updated_authors[1] )
test_data_not_updated_authors <-c("Karen Padilla", "How Chih Tiu")
author_from_names <- oa_fetch(entity = "author", search = test_data_not_updated_authors[1] )
# common libraries
library(openalexR)
author_from_names <- oa_fetch(entity = "author", search = test_data_not_updated_authors[1] )
author_from_names <- oa_fetch(entity = "author", search = "Haw-chih Tai")
install.packages("openalexR")
install.packages("openalexR")
# common libraries
library(openalexR)
author_from_names <- oa_fetch(entity = "author", search = "Bekir Tanriover" )
author_from_names <- oa_fetch(entity = "author", search = "Haw-chih Tai")
# install.packages("remotes")
remotes::install_github("ropensci/openalexR")
author_from_names <- oa_fetch(entity = "author", search = "Haw-chih Tai")
# common libraries
library(openalexR)
author_from_names <- oa_fetch(entity = "author", search = "Haw-chih Tai")
install.packages("remotes")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("ropensci/openalexR")
install.packages("remotes", force=TRUE)
install.packages("remotes", force = TRUE)
remotes::install_github("ropensci/openalexR")
remotes::install_github("ropensci/openalexR", force=TRUE)
author_from_names <- oa_fetch(entity = "author", search = "Haw-chih Tai")
# common libraries
library(openalexR)
author_from_names <- oa_fetch(entity = "author", search = "Haw-chih Tai")
install.packages("openalexR")
install.packages("openalexR")
