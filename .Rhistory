write_df_to_excel <- function(df, file_path_prefix = "citations/") {
df_name <- deparse(substitute(df))
file_name <- paste0(df_name, ".xlsx")
file_path <- paste0(file_path_prefix, file_name)
tryCatch({
write_xlsx(df, file_path)
message(paste("Successfully wrote", df_name, "to", file_path))
}, error = function(e) {
message(paste("Error writing", df_name, "to Excel:", e))
print(e)
})
}
_
write_df_to_excel(works_cited_source_issn_brill)
write_df_to_excel(works_cited_source_nonissn_brill)
write_df_to_excel(works_published_brill)
my_list <-list(works_cited_source_issn_brill, works_cited_source_nonissn_brill, works_published_brill)
combine_dataframes <- function(dataframes, file_path_prefix = "citations/", combined_file_name = "combined_brill.xlsx") {
# 1. Write Individual Excel Files
for (df in dataframes) {
df_name <- deparse(substitute(df))
file_name <- paste0(df_name, ".xlsx")
file_path <- paste0(file_path_prefix, file_name)
tryCatch({
write_df_to_excel(df)
message(paste("Successfully wrote", df_name, "to", file_path))
}, error = function(e) {
message(paste("Error writing", df_name, "to Excel:", e))
print(e)
})
}
# 2. Combine Excel Files
excel_files <- paste0(file_path_prefix, sapply(dataframes, function(df) paste0(deparse(substitute(df)), ".xlsx")))
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub(paste0(file_path_prefix, "(.*)\\.xlsx"), "\\1", excel_files[i]) # Extract sheet name from file name
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, paste0(file_path_prefix, combined_file_name), overwrite = TRUE)
message("Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
}
combine_dataframes(my_list)
combine_3dfs <- function(df1, df2, df3, file_path_prefix = "citations/", combined_file_name = "combined_brill.xlsx") {
library(writexl)
library(openxlsx)
# 1. Write Individual Excel Files
write_df_to_excel <- function(df, file_path_prefix) {
df_name <- deparse(substitute(df))
file_name <- paste0(df_name, ".xlsx")
file_path <- paste0(file_path_prefix, file_name)
tryCatch({
write_xlsx(df, file_path)
message(paste("Successfully wrote", df_name, "to", file_path))
}, error = function(e) {
message(paste("Error writing", df_name, "to Excel:", e))
print(e)
})
}
write_df_to_excel(df1, file_path_prefix)
write_df_to_excel(df2, file_path_prefix)
write_df_to_excel(df3, file_path_prefix)
# 2. Combine Excel Files (Read the SAME dfs back)
excel_files <- c(
paste0(file_path_prefix, deparse(substitute(df1)), ".xlsx"),
paste0(file_path_prefix, deparse(substitute(df2)), ".xlsx"),
paste0(file_path_prefix, deparse(substitute(df3)), ".xlsx")
)
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub(paste0(file_path_prefix, "(.*)\\.xlsx"), "\\1", excel_files[i])
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, paste0(file_path_prefix, combined_file_name), overwrite = TRUE)
message("Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
}
combine_3dfs(works_cited_source_issn_brill, works_cited_source_nonissn_brill, works_published_brill)
combine_3dfs <- function(df1, df2, df3, file_path_prefix = "citations/", combined_file_name = "combined_brill.xlsx") {
library(writexl)
library(openxlsx)
# 1. Write Individual Excel Files
write_df_to_excel <- function(df, file_path_prefix) {
df_name <- deparse(substitute(df))
file_name <- paste0(df_name, ".xlsx")
file_path <- paste0(file_path_prefix, file_name)
tryCatch({
write_xlsx(df, file_path)
message(paste("Successfully wrote", df_name, "to", file_path))
}, error = function(e) {
message(paste("Error writing", df_name, "to Excel:", e))
print(e)
})
}
write_df_to_excel(df1, file_path_prefix)
write_df_to_excel(df2, file_path_prefix)
write_df_to_excel(df3, file_path_prefix)
# 2. Combine Excel Files (Read the SAME dfs back)
excel_files <- c(
paste0(file_path_prefix, deparse(substitute(df1)), ".xlsx"),
paste0(file_path_prefix, deparse(substitute(df2)), ".xlsx"),
paste0(file_path_prefix, deparse(substitute(df3)), ".xlsx")
)
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub(paste0(file_path_prefix, "(.*)\\.xlsx"), "\\1", excel_files[i])
sheet_name <- substr(sheet_name, 1, 31) # Truncate to 31 characters
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, paste0(file_path_prefix, combined_file_name), overwrite = TRUE)
message("Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
}
combine_3dfs(works_cited_source_issn_brill, works_cited_source_nonissn_brill, works_published_brill)
combine_3dfs(works_cited_source_issn_brill, works_cited_source_nonissn_brill, works_published_brill)
rank_top_cited_journals(works_cited_source_issn_brill, "so")
works_cited2 <-data.frame()
fetch_number <- 50
#num_of_works <-1000
num_of_works <- length (works_published_ref_combined)
# Loop to fetch data in batches
time_taken <- system.time({
for(i in seq(1, num_of_works, by = fetch_number)) {
batch_identifiers <- works_published_ref_combined[i:min(i + fetch_number - 1, num_of_works)]
# Check if the batch_identifiers is a valid vector
if (length(batch_identifiers) > 0 && !all(is.na(batch_identifiers))) {
# Fetch data from OpenAlex using oa_fetch, ensure proper identifier input
batch_data <- tryCatch({
# Have to use "primary_location.source.type = journal" to filter out non-journal.
# issn_l cannot be used alone (there are book chapters which have issn per OpenAlex)
oa_fetch(identifier = batch_identifiers)
#, primary_location.source.type = "journal")
}, error = function(e) {
message("Error fetching data: ", e)
return(NULL)
})
# Only bind non-null data
if (!is.null(batch_data) && nrow(batch_data) >0 ) {
# Ensure consistent columns
batch_data <- data.table::setDT(batch_data)[, setdiff(names(works_cited), names(batch_data)) := NA]
works_cited2 <- rbindlist(list(works_cited, batch_data), use.names = TRUE, fill = TRUE)
}
}
}
})
head(works_cited)
setdiff(works_cited, works_cited2)
setdiff(works_cited2, works_cited)
dfdiff_2023<-setdiff(works_cited2, works_cited)
View(works_published_2023)
View(works_published_brill)
work_cited <-work_cited2
works_cited <- works_cited2
works_cited_source_issn_articles    <- works_cited_source_issn[works_cited_source_issn$type == "article", ]
works_cited_source_issn_nonarticles <- works_cited_source_issn[works_cited_source_issn$type != "article", ]
works_cited_source_nonissn_articles    <- works_cited_source_nonissn[works_cited_source_nonissn$type == "article", ]
works_cited_source_nonissn_nonarticles <- works_cited_source_nonissn[works_cited_source_nonissn$type != "article", ]
# Empty or NULL records
count_null_empty_id <- sum(is.na(works_cited_source_issn$id) | trimws(works_cited_source_issn$id) == "")
count_null_empty_id
# 1. Write Individual Excel Files
write_xlsx(works_cited_source_issn_brill, "citations/issn_brill2.xlsx")
write_xlsx(works_cited_source_nonissn_brill, "citations/nonissn_brill2.xlsx")
write_xlsx(works_published_brill, "citations/published_brill2.xlsx")
rank_top_cited_journals(works_cited_source_issn_brill, "so")
View(works_published)
View(works_published[[4]][[1]])
View(works_published[[38]][[1]])
str(works_published$author[1])  # Look at first row's author data
library(openalexR)
packageVersion("openalexR")
library(jsonlite)
library(dplyr)
library(tidyverse)
works_published_authors <- works_published %>%
select(id, title, author, topics) %>%
# Step 2: Identify multi-author papers
multi_author_papers <- works_published_authors %>%
group_by(id) %>%
mutate(author_count = n()) %>%
filter(author_count > 1) %>%
ungroup()
works_published_authors <- works_published %>%
select(id, title, author, topics) %>%
# Step 2: Identify multi-author papers
multi_author_papers <- works_published_authors %>%
group_by(id) %>%
mutate(author_count = n()) %>%
filter(author_count > 1) %>%
ungroup()
works_published_authors <- works_published %>%
select(id, title, author, topics) %>%
# Step 2: Identify multi-author papers
multi_author_papers <- works_published_authors %>%
group_by(id) %>%
mutate(author_count = n()) %>%
filter(author_count > 1) %>%
ungroup()
works_published_authors <- works_published
works_published_authors <- works_published %>% select(id, title, author, topics)
View(works_published_authors)
# Step 2: Identify multi-author papers
multi_author_papers <- works_published_authors %>%
group_by(id) %>%
mutate(author_count = n()) %>%
filter(author_count > 1) %>%
ungroup()
View(multi_author_papers)
View(works_published_authors)
View(works_published_authors[[3]][[1]])
View(works_published_authors[[3]][[1]])
# Step 2: Identify multi-author papers
works_published_multi_authors <- works_published_authors %>%
mutate(
author_count = map_int(author, nrow), # Get the number of rows in each nested df
has_multiple_authors = author_count > 1 # Check if there are multiple rows
)
View(works_published_multi_authors)
# Step 3: Analyze co-authorship with institutions and nations
coauthor_analysis <- works_published_multi_authors %>%
select(
paper_id = id,
title,
author_id = author.id,
author_name = author.display_name,
institutions = author.institutions,
countries = author.countries
) %>%
# Unnest institutions and countries (they might be nested lists)
unnest(institutions) %>%
unnest(countries)
View(works_published_multi_authors[[3]][[1]])
works_published_multi_authors_nonus <- works_published_multi_authors %>%
mutate(
nonus_author = map_lgl(author, function(author_df) {
if (nrow(author_df) == 0) {
return(FALSE) # No authors, so no non-US authors
} else if (!"country_code" %in% names(author_df)) {
warning("Nested author data frame missing 'country_code' column.")
return(FALSE) # Missing column, assume no non-US authors
} else {
any(author_df$country_code != "US" & !is.na(author_df$country_code))
}
})
)
View(works_published_multi_authors[[3]][[1]])
works_published_multi_authors_nonus <- works_published_multi_authors %>%
mutate(
nonus_author = map_lgl(author, function(author_df) {
if (nrow(author_df) == 0) {
return(FALSE) # No authors, so no non-US authors
} else if (!"country_code" %in% names(author_df)) {
warning("Nested author data frame missing 'country_code' column.")
return(FALSE) # Missing column, assume no non-US authors
} else {
any(author_df$country_code != "US" & !is.na(author_df$institution_country_code))
}
})
)
works_published_multi_authors_nonus <- works_published_multi_authors %>%
mutate(
nonus_author = map_lgl(author, function(author_df) {
if (nrow(author_df) == 0) {
return(FALSE) # No authors, so no non-US authors
} else if (!"country_code" %in% names(author_df)) {
warning("Nested author data frame missing 'country_code' column.")
return(FALSE) # Missing column, assume no non-US authors
} else {
any(author_df$institution_country_code != "US" & !is.na(author_df$institution_country_code))
}
})
)
works_published_multi_authors_nonus <- works_published_multi_authors %>%
mutate(
nonus_author = map_lgl(author, function(author_df) {
if (nrow(author_df) == 0) {
return(FALSE) # No authors, so no non-US authors
} else if (!"institution_country_code" %in% names(author_df)) {
warning("Nested author data frame missing 'intitution_country_code' column.")
return(FALSE) # Missing column, assume no non-US authors
} else {
any(author_df$institution_country_code != "US" & !is.na(author_df$institution_country_code))
}
})
)
View(works_published_multi_authors_nonus)
str(works_published_multi_authors_nonus)
head(works_published_multi_authors_nonus)
# Step 3: Split it into two works dfs: US authors and Nonus authors
# Data frame with only US authors (with one UArizona author)
works_published_us_authors <- works_published_multi_authors_flags %>%
filter(!nonus_author)
# Data frame with at least one non-US author with one UA author
works_published_nonus_authors <- works_published_multi_authors_flags %>%
filter(nonus_author)
# Step 3: Split it into two works dfs: US authors and Nonus authors
# Data frame with only US authors (with one UArizona author)
works_published_us_authors <- works_published_multi_authors %>%
filter(!nonus_author)
# Step 3: Split it into two works df: US and nonUS authors
works_published_multi_authors_nonus <- works_published_multi_authors %>%
mutate(
nonus_author = map_lgl(author, function(author_df) {
if (nrow(author_df) == 0) {
return(FALSE) # No authors, so no non-US authors
} else if (!"institution_country_code" %in% names(author_df)) {
warning("Nested author data frame missing 'institution_country_code' column.")
return(FALSE) # Missing column, assume no non-US authors
} else {
any(author_df$institution_country_code != "US" & !is.na(author_df$institution_country_code))
}
})
) %>%
filter(!nonus_author)
View(works_published_multi_authors_nonus)
View(works_published_multi_authors_nonus[[3]][[2]])
# Step 3: Split it into two works df: US and nonUS authors
works_published_multi_authors_nonus <- works_published_multi_authors %>%
mutate(
nonus_author = map_lgl(author, function(author_df) {
if (nrow(author_df) == 0) {
return(FALSE) # No authors, so no non-US authors
} else if (!"institution_country_code" %in% names(author_df)) {
warning("Nested author data frame missing 'institution_country_code' column.")
return(FALSE) # Missing column, assume no non-US authors
} else {
any(author_df$institution_country_code != "US" & !is.na(author_df$institution_country_code))
}
})
) %>%
filter(nonus_author)
# US authors only. For future use.
works_published_multi_authors_us <- works_published_multi_authors %>%
mutate(
nonus_author = map_lgl(author, function(author_df) {
if (nrow(author_df) == 0) {
return(FALSE) # No authors, so no non-US authors
} else if (!"institution_country_code" %in% names(author_df)) {
warning("Nested author data frame missing 'institution_country_code' column.")
return(FALSE) # Missing column, assume no non-US authors
} else {
any(author_df$institution_country_code != "US" & !is.na(author_df$institution_country_code))
}
})
) %>%
filter(!nonus_author)
View(works_published_multi_authors_nonus)
### Step 4: Use NonUS author works to figure out collaboration.
head(works_published_multi_authors_nonus)
all_topics <- works_published_multi_authors_nonus %>%
pull(topics) %>%
map_dfr(function(topic_df) {
if ("display_name" %in% names(topic_df)){
return(data.frame(topic = topic_df$display_name))
} else {
return(data.frame(topic = character(0)))
}
})
topic_counts <- table(all_topics$topic)
print(topic_counts)
# Example: Get all country codes from all nested author data frames
all_country_codes <- works_published_multi_authors_nonus %>%
pull(author) %>%
map_dfr(function(author_df) {
if ("institution_country_code" %in% names(author_df)) {
return(data.frame(country_code = author_df$institution_country_code))
} else {
return(data.frame(country_code = character(0))) # Handle missing column
}
})
View(all_country_codes)
# Example: Find publications with authors from both Canada and the UK
us_canada_collaborations <- works_published_multi_authors_nonus %>%
filter(
map_lgl(author, function(author_df) {
"US" %in% author_df$institution_country_code & "CA" %in% author_df$institution_country_code
})
)
View(us_canada_collaborations)
View(us_canada_collaborations[[3]][[1]])
# Count the occurrences of each country code
country_code_counts <- table(all_country_codes$country_code)
# Convert to a new df
country_ranking <- as.data.frame(country_code_counts)
names(country_ranking) <- c("country_code", "count")
View(country_ranking)
# Sort and add rank
country_ranking <- country_ranking %>%
arrange(desc(count)) %>%
mutate(rank = row_number())
View(country_ranking)
# Sort and add rank
country_ranking <- country_ranking %>%
arrange(count) %>%
mutate(rank = row_number())
country_ranking <- country_ranking %>%
mutate(
country_name = countrycode(country_code, origin = "iso2c", destination = "country.name")
)
View(country_ranking)
country_ranking <- country_ranking %>%
mutate(
country_name = countrycode(country_code, origin = "iso2c", destination = "country.name")
)
library(countrycode)
install.packages("countrycode")
library(countrycode)
country_ranking <- country_ranking %>%
mutate(
country_name = countrycode(country_code, origin = "iso2c", destination = "country.name")
)
View(country_ranking)
country_ranking <- country_ranking %>%
mutate(
country_name = countrycode(country_code, origin = "iso2c", destination = "country.name")
) %>%
select(country_code, country_name, rank, count) # Rearrange columns
View(country_ranking)
# Sort and add rank
country_ranking <- country_ranking %>%
arrange(count) %>%
mutate(rank = row_number())
View(country_ranking)
# Count the occurrences of each country code
country_code_counts <- table(all_country_codes$country_code)
# Convert to a new df
country_ranking <- as.data.frame(country_code_counts)
names(country_ranking) <- c("country_code", "count")
library(countrycode)
country_ranking <- country_ranking %>%
mutate(
country_name = countrycode(country_code, origin = "iso2c", destination = "country.name")
) %>%
select(country_code, country_name, rank, count) # Rearrange columns
View(country_ranking)
# Count the occurrences of each country code
country_code_counts <- table(all_country_codes$country_code)
# Convert to a new df
country_ranking <- as.data.frame(country_code_counts)
names(country_ranking) <- c("country_code", "count")
library(countrycode)
country_ranking <- country_ranking %>%
mutate(
country_name = countrycode(country_code, origin = "iso2c", destination = "country.name")
) %>%
select(country_code, country_name, rank, count) # Rearrange columns
View(country_ranking)
View(country_ranking)
library(countrycode)
country_ranking <- country_ranking %>%
mutate(
country_name = countrycode(country_code, origin = "iso2c", destination = "country.name")
) %>%
select(country_code, country_name, rank, count) # Rearrange columns
country_ranking <- country_ranking %>%
mutate(
country_name = countrycode(country_code, origin = "iso2c", destination = "country.name")
) %>%
select(country_code, country_name, count) # Rearrange columns
View(country_ranking)
ua_in_collaborations <- works_published_multi_authors_nonus %>%
filter(
map_lgl(author, function(author_df) {
"CA" %in% author_df$institution_country_code
})
)
setdiff(ua_ca_collaborations,ua_in_collaborations)
# We know that the df at least containing one UA author. So just need to find out a specific country
# Example: Find publications with authors from Canada
ua_ca <- works_published_multi_authors_nonus %>%
filter(
map_lgl(author, function(author_df) {
"US" %in% author_df$institution_country_code & "CA" %in% author_df$institution_country_code
})
)
ua_in <- works_published_multi_authors_nonus %>%
filter(
map_lgl(author, function(author_df) {
"CA" %in% author_df$institution_country_code
})
)
setdiff(ua_ca,ua_in)
diff <- setdiff(ua_ca,ua_in)
View(diff)
diff <- setdiff(ua_in, ua_ca)
View(diff)
View(diff[[3]][[1]])
View(diff[[3]][[12]])
View(works_published)
View(works_published_2023)
View(works_published[[4]][[1]])
View(works_published[[4]][[1]])
View(ua_ca)
View(ua_ca[[3]][[18]])
