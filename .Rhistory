UArizona <- c("https://openalex.org/I138006243", "https://ror.org/03m2x1q45", "University of Arizona", "I138006243")
author_from_names <- oa_fetch(entity = "author", search = author_name)
if (!is.null(author_from_names) && nrow(author_from_names) > 0) {
matches <- rep(FALSE, nrow(author_from_names))
for (i in seq_len(nrow(author_from_names))) {
display_name_match <- FALSE
affiliations_other_match <- FALSE
# Check affiliation_display_name if it exists
if ("affiliation_display_name" %in% names(author_from_names) && !is.na(author_from_names$affiliation_display_name[i])) {
display_name_match <- any(sapply(UArizona, function(pattern) grepl(pattern, author_from_names$affiliation_display_name[i], ignore.case = TRUE)))
}
# Check affiliations_other
if ("affiliations_other" %in% names(author_from_names)) {
affiliations <- author_from_names$affiliations_other[[i]]
if (length(affiliations) > 0) {
affiliations_other_match <- any(UArizona %in% affiliations)
}
}
matches[i] <- display_name_match | affiliations_other_match
}
filtered_authors <- author_from_names[matches, ]
if (nrow(filtered_authors) == 0) {
message("No authors found matching the given affiliation.")
} else {
return(filtered_authors)
}
} else {
message("No data retrieved from OpenAlex's API.")
return(NULL)
}
}
#####################################################
# Function: Calculate works count
#####################################################
calculate_works_count <- function(author_name, affiliation_name, year) {
# getting data from openAlexR API
author_from_names <- oa_fetch(entity = "author", search = author_name )
if (is.null(author_from_names)) {
author_stats <- NULL
}
else {
# Filter out not "University of Arizona" authors using "affiliation_display_name" column.
# other filtering fields can be "affiliation_id", "affiliation_ror"
filtered_authors <- subset(author_from_names, grepl(affiliation_name, affiliation_display_name, ignore.case=TRUE))
print(filtered_authors)
# If NOT found the author, return NULL
if (nrow(filtered_authors) == 0 )  {
author_stats <- NULL
}
else {
# works_count is a list, getting "counts_by_year" column
works_count  <- filtered_authors$counts_by_year
print(works_count)
works_sum_year <- 0
total_works_sum_year <- 0
# cited_by_count is a list
cited_by_count <- filtered_authors$cited_by_count
cited_sum_year <- 0
total_cited_sum_year <-0
# check the works_count
for (i in 1:length(works_count)) {
# Access the data frame within the list
df <- works_count[[i]]
if (is.data.frame(df)) {
# Filter the data frame by year
filtered_df_year <- df[df$year == year, ]
# Calculate the sum of the filtered 'works_count' column
works_sum_year <- sum(filtered_df_year$works_count)
total_works_sum_year <- total_works_sum_year + works_sum_year
# Calculate the sum of the filtered 'cited_by_count' column
cited_sum_year <- sum(filtered_df_year$cited_by_count)
total_cited_sum_year <- total_cited_sum_year + cited_sum_year
# reset this number to 0 after each iteration
works_sum_year <- 0
cited_sum_year <- 0
} else {
##### Note: If you see error msg: Error: $ operator is invalid for atomic vectors
# That means certain works_count  is logical and has no data
print("This is NOT a dataframe. Data Wrong")
# set value as -1 for warning message
Total_sum_of_works = -1
Total_cited_sum_year = -1
}
} # for loop
# Build output dataframe author_stats
author_stats <-data.frame (
Name = author_name,
OpenAlexId = filtered_authors$id,
Year = year,
Total_sum_of_works = total_works_sum_year,
Total_sum_of_cited = total_cited_sum_year
)
# reset the var after done
total_works_sum_year <- 0
total_cited_sum_year <- 0
} # if
return (author_stats)
}
}
################################################################
##### Function: Get works from OA's author id and publication year #########
get_works_from_authorid_by_year <- function(author_id, publication_year) {
# Check if author_id is NULL
if (is.null(author_id)) {
message("author_id not found for this author.")
return (NULL)
}
# Attempt to fetch author works and handle potential errors
author_works <- tryCatch({
oa_fetch(
entity = "works",
author.id = author_id,
publication_year = publication_year,
verbose = TRUE
)
}, error = function(e) {
message("An error occurred: ", e$message)
return(NULL)
})
return(author_works)
}
##### Function: Get works from author ORCID and year
get_works_from_orcid_by_year <- function(orcid, publication_year) {
if (is.null(orcid)) {
stop("ORCID cannot be NULL.")
}
author_works <- tryCatch({
oa_fetch(
entity = "works",
author.orcid = orcid,
publication_year = publication_year,
verbose = TRUE
)
}, error = function(e) {
message ("An error occured: ", e$message)
return (NULL)
})
return(author_works)
}
################### Function ######################
get_dept_authors_names <- function(dept_code, affiliation_name) {
file_path <- sprintf("%s_common.csv", dept_code)
if (!file.exists(file_path)) {
stop("File not found: ", file_path)
}
LDAPdata <- read_csv(file_path, show_col_types = FALSE)
authors_names <- LDAPdata$cn
dept_authors_names <- list()
for (i in 1: length(authors_names) ) {
# Access the current row
author_name <- authors_names[i]
print (paste(author_name, affiliation_name))
tryCatch({
author_result_affiliation <- search_author(author_name, affiliation_name )
author_stats              <- calculate_works_count(author_name, affiliation_name, 2022)
}, error = function(e) {
message("Error processing author ", author_name, ": ", e$message)
})
# Check if any of the results are NULL or have zero rows; handle accordingly
if (is.null(author_result_affiliation) || nrow(author_result_affiliation) == 0) {
author_result_affiliation <- NA  # or some other placeholder value
}
if (is.null(author_stats) || length(author_stats) == 0) {
author_stats <- NA  # or some other placeholder value
}
# Append the results to the list
dept_authors_names[[i]] <- data.frame(author_name = author_name,
author_result_affiliation = author_result_affiliation,
author_stats = author_stats)
}
return (dept_authors_names)
}
###################################################################################
### Function: output author's works by its oa author_id and year.
### It is necessary to do so, because this author_works df are very complex (a df of dfs)
### It is a small db, cannot be represented by a single sheet of XLSX
output_works_by_authorid_by_year <- function(author_name, author_id, year, output_path) {
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("dplyr package is not installed. Please install it using install.packages('dplyr').")
}
if (!requireNamespace("writexl", quietly = TRUE)) {
stop("writexl package is not installed. Please install it using install.packages('writexl').")
}
if (is.null(author_id)) {
stop("author_id cannot be NULL.")
}
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("dplyr package is not installed. Please install it using install.packages('dplyr').")
}
author_works <- get_works_from_authorid_by_year(author_id, year)
if (is.null(author_works) || length(author_works) == 0) {
message("No works found for the provided author ID and year.")
return(NULL)
}
#!!!!! Very important: Need to handle NA value in OpenAlex data. Otherwise, it will crash other functions such as writexlsx()!!!
# The best way so far is to "as.character" and then replace NUL.
author_works <- author_works %>%
#  mutate(across(where(is.character), ~replace_na(., "N/A")),
#         across(where(is.numeric), ~replace_na(., "N/A")) )
mutate(across(everything(), as.character)) %>%
mutate(across(everything(), ~replace_na(., "N/A")))
# Exclude certain columns.
author_works <-select(author_works, -c(counts_by_year, concepts))
print(author_works)
#full_output_path <- file.path(getwd(), output_path)
# Create the output directory if it doesn't exist
if (!dir.exists(output_path)) {
dir.create(output_path, recursive = TRUE)
print(paste("Directory created at:", output_path))  # Confirm directory creation
}
print(paste("Current working directory:", getwd()))  # Confirm current directory
# Generating the filename
filename <- paste0(gsub("[[:punct:]]", "", author_name), "_", year, ".xlsx")
full_path <- file.path(output_path, filename)
# Write to Excel file
if (!requireNamespace("writexl", quietly = TRUE)) {
stop("writexl package is not installed. Please install it using install.packages('writexl').")
}
writexl::write_xlsx(author_works, path = full_path)
message("File '", full_path, "' has been created.")
#write.csv(author_works, file=filename, row.names = FALSE)
}
############################################################################
#### Now getting every author's works by each dept ###
### Function: Parameter: dept_author_data: list
output_dept_author_works_by_year <- function(dept_name, dept_authors_names, year) {
output_path <- file.path(getwd(), "output", dept_name) # Example path construction
for (i in 1: length(dept_authors_names)) {
current_df <- dept_authors_names[[i]]
author_name <- current_df$author_name
author_id <- current_df$author_result_affiliation.id
print(author_name)
get_works_from_authorid_by_year(author_id, year)
# if author_id is NOT NULL, get the works from this author and output
if (!is.null(author_id) && nzchar(author_id)) {
output_works_by_authorid_by_year(author_name, author_id, year, output_path)
} else {
message("Skipping due to NULL author_id for ", author_name)
}
}
}
#### Dept of Medicine (HR code: 0713 and 0788) Test date: 2024-01-24
##### Test cases: data is not uniformed.
author_works <- get_works_from_authorid_by_year("a5082148123", 2022)
output_works_by_authorid_by_year("Keith A Joiner", "a5082148123", 2022, "./output/test")
# Error in x[is.na(x)] <- na.string : replacement has length zero. Why?
author_works <- get_works_from_authorid_by_year("a5080182165", 2022)
output_works_by_authorid_by_year("Sara Centuori", "a5080182165", 2022, "./output/test")
#### Dept of Medicine (HR code: 0713 and 0788) Test date: 2024-01-24
##### Test cases: data is not uniformed.
author_works <- get_works_from_authorid_by_year("a5082148123", 2022)
output_works_by_authorid_by_year("Keith A Joiner", "a5082148123", 2022, "./output/test")
# Error in x[is.na(x)] <- na.string : replacement has length zero. Why?
author_works <- get_works_from_authorid_by_year("a5080182165", 2022)
output_works_by_authorid_by_year("Sara Centuori", "a5080182165", 2022, "./output/test")
# Bekir Tanriover: https://openalex.org/authors/a5016874418
author_name <- "Bekir Tanriover"
author_id <- "a5016874418"
publication_year <- "2022"
author_works <- get_works_from_authorid_by_year(author_id, publication_year)
UAresult1 <- search_author(author_name, affiliation_name)
output_works_by_authorid_by_year(author_name, author_id, publication_year, "./output/test")
# H.-H Sherry Chow
author_name <-"H. H. Sherry Chow"
author_id <- "a5018050941"
author_works <- get_works_from_authorid_by_year(author_id, publication_year)
output_works_by_authorid_by_year(author_name, author_id, publication_year, "./output/test")
author_name <- "Tejo K Vemulapalli"
affiliation_name <- "University of Arizona"
author_from_names <- oa_fetch(entity = "author", search = author_name)
UAresult1 <- search_author(author_name, affiliation_name)
View(UAresult1)
author_name <- "Vivian Kominos"
affiliation_name <- "University"
author_from_names <- oa_fetch(entity = "author", search = author_name)
UAresult1 <- search_author(author_name, affiliation_name)
### These have no affiliation with "University". https://openalex.org/authors/a5019422724
author_name <- "Lise Alschuler"
affiliation_name <- "University of Arizona"
author_from_names <- oa_fetch(entity = "author", search = author_name)
author_from_names$affiliations_other
UAresult1 <- search_author(author_name, affiliation_name)
View(UAresult1)
# step2: get dept author name and filtering
# step 3: get authors works based on the names and affiliation
affiliation_name <- "Unversity of Arizona"
year <- 2022
dept_name <- "dept0701"
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
output_dept_author_works_by_year(dept_name, dept_authors_names, year)
dept_name <- "dept0721"
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
output_dept_author_works_by_year(dept_name, dept_authors_names, year)
dept_name <- "dept0713"
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
output_dept_author_works_by_year(dept_name, dept_authors_names, year)
dept_name <- "dept0747"
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
dept_name <- "dept0747"
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
output_dept_author_works_by_year(dept_name, dept_authors_names, year)
dept_name <- "dept0782"
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
output_dept_author_works_by_year(dept_name, dept_authors_names, year)
################### Function ######################
get_dept_authors_names <- function(dept_code, affiliation_name) {
file_path <- sprintf("%s_common.csv", dept_code)
if (!file.exists(file_path)) {
stop("File not found: ", file_path)
}
if (nrow(LDAPdata) == 0) {
message("The CSV file is empty: ", file_path)
return(list())  # Return an empty list
}
LDAPdata <- read_csv(file_path, show_col_types = FALSE)
authors_names <- LDAPdata$cn
dept_authors_names <- list()
for (i in 1:length(authors_names) ) {
# Access the current row
author_name <- authors_names[i]
print (paste(author_name, affiliation_name))
tryCatch({
author_result_affiliation <- search_author(author_name, affiliation_name )
author_stats              <- calculate_works_count(author_name, affiliation_name, 2022)
}, error = function(e) {
message("Error processing author ", author_name, ": ", e$message)
})
# Check if any of the results are NULL or have zero rows; handle accordingly
if (is.null(author_result_affiliation) || nrow(author_result_affiliation) == 0) {
author_result_affiliation <- NA  # or some other placeholder value
}
if (is.null(author_stats) || length(author_stats) == 0) {
author_stats <- NA  # or some other placeholder value
}
# Append the results to the list
dept_authors_names[[i]] <- data.frame(author_name = author_name,
author_result_affiliation = author_result_affiliation,
author_stats = author_stats)
}
return (dept_authors_names)
}
### dept0712 has no people.
dept_name <- "dept0712"
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
################### Function ######################
get_dept_authors_names <- function(dept_code, affiliation_name) {
file_path <- sprintf("%s_common.csv", dept_code)
if (!file.exists(file_path)) {
stop("File not found: ", file_path)
}
LDAPdata <- read_csv(file_path, show_col_types = FALSE)
if (nrow(LDAPdata) == 0) {
message("The CSV file is empty: ", file_path)
return(list())  # Return an empty list
}
authors_names <- LDAPdata$cn
dept_authors_names <- list()
for (i in 1:length(authors_names) ) {
# Access the current row
author_name <- authors_names[i]
print (paste(author_name, affiliation_name))
tryCatch({
author_result_affiliation <- search_author(author_name, affiliation_name )
author_stats              <- calculate_works_count(author_name, affiliation_name, 2022)
}, error = function(e) {
message("Error processing author ", author_name, ": ", e$message)
})
# Check if any of the results are NULL or have zero rows; handle accordingly
if (is.null(author_result_affiliation) || nrow(author_result_affiliation) == 0) {
author_result_affiliation <- NA  # or some other placeholder value
}
if (is.null(author_stats) || length(author_stats) == 0) {
author_stats <- NA  # or some other placeholder value
}
# Append the results to the list
dept_authors_names[[i]] <- data.frame(author_name = author_name,
author_result_affiliation = author_result_affiliation,
author_stats = author_stats)
}
return (dept_authors_names)
}
### dept0712 has no people.
dept_name <- "dept0712"
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
output_dept_author_works_by_year(dept_name, dept_authors_names, year)
# dept0782 no data
dept_name <- "dept0782"
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
dept_name <- "dept0788"
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
output_dept_author_works_by_year(dept_name, dept_authors_names, year)
0
dept_name <- "dept0795" # no people
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
dept_name <- "dept0795" # no people
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
############################################################################
#### Now getting every author's works by each dept ###
### Function: Parameter: dept_author_data: list
output_dept_author_works_by_year <- function(dept_name, dept_authors_names, year) {
# Check if dept_name is provided and valid
if (is.null(dept_name) || !nzchar(dept_name)) {
stop("Department name ('dept_name') must be provided and cannot be empty.")
}
# Check if dept_authors_names is empty
if (length(dept_authors_names) == 0) {
message("No authors found for department: ", dept_name)
return()  # Exit the function early
}
output_path <- file.path(getwd(), "output", dept_name) # Example path construction
for (i in 1: length(dept_authors_names)) {
current_df <- dept_authors_names[[i]]
author_name <- current_df$author_name
author_id <- current_df$author_result_affiliation.id
print(author_name)
get_works_from_authorid_by_year(author_id, year)
# if author_id is NOT NULL, get the works from this author and output
if (!is.null(author_id) && nzchar(author_id)) {
output_works_by_authorid_by_year(author_name, author_id, year, output_path)
} else {
message("Skipping due to NULL author_id for ", author_name)
}
}
}
# dept0782 no data
dept_name <- "dept0782"
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
output_dept_author_works_by_year(dept_name, dept_authors_names, year)
### dept0712 has no people.
dept_name <- "dept0712"
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
output_dept_author_works_by_year(dept_name, dept_authors_names, year)
dept_name <- "dept0795" # no people
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
output_dept_author_works_by_year(dept_name, dept_authors_names, year)
dept_name <- "dept_banner" #
affiliation_name <- "Banner"
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
output_dept_author_works_by_year(dept_name, dept_authors_names, year)
View(dept_authors_names)
View(get_dept_authors_names)
View(search_author)
output_dept_author_works_by_year(dept_name, dept_authors_names, year)
###################################################################################
### Function: output author's works by its oa author_id and year.
### It is necessary to do so, because this author_works df are very complex (a df of dfs)
### It is a small db, cannot be represented by a single sheet of XLSX
output_works_by_authorid_by_year <- function(author_name, author_id, year, output_path) {
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("dplyr package is not installed. Please install it using install.packages('dplyr').")
}
if (!requireNamespace("writexl", quietly = TRUE)) {
stop("writexl package is not installed. Please install it using install.packages('writexl').")
}
if (is.null(author_id)) {
stop("author_id cannot be NULL.")
}
author_works <- get_works_from_authorid_by_year(author_id, year)
if (is.null(author_works) || length(author_works) == 0) {
message("No works found for the provided author ID and year.")
return(NULL)
}
#!!!!! Very important: Need to handle NA value in OpenAlex data. Otherwise, it will crash other functions such as writexlsx()!!!
# The best way so far is to "as.character" and then replace NUL.
author_works <- author_works %>%
#  mutate(across(where(is.character), ~replace_na(., "N/A")),
#         across(where(is.numeric), ~replace_na(., "N/A")) )
mutate(across(everything(), as.character)) %>%
mutate(across(everything(), ~replace_na(., "N/A")))
# Exclude certain columns.
author_works <-select(author_works, -c(counts_by_year, concepts))
print(author_works)
#full_output_path <- file.path(getwd(), output_path)
# Create the output directory if it doesn't exist
if (!dir.exists(output_path)) {
dir.create(output_path, recursive = TRUE)
print(paste("Directory created at:", output_path))  # Confirm directory creation
}
print(paste("Current working directory:", getwd()))  # Confirm current directory
author_works <- author_works %>%
mutate(across(where(is.character), ~ifelse(nchar(.) > 32767, substr(., 1, 32767), .)))
# Generating the filename
filename <- paste0(gsub("[[:punct:]]", "", author_name), "_", year, ".xlsx")
full_path <- file.path(output_path, filename)
writexl::write_xlsx(author_works, path = full_path)
message("File '", full_path, "' has been created.")
#write.csv(author_works, file=filename, row.names = FALSE)
}
output_dept_author_works_by_year(dept_name, dept_authors_names, year)
warnings()
dept_authors_names <- list()
dept_authors_names <- get_dept_authors_names(dept_name, affiliation_name)
View(search_author)
View(search_author)
output_dept_author_works_by_year(dept_name, dept_authors_names, year)
View(dept_authors_names)
