### Test data
test_data_UAL_authors     <- c("Yan Han", "Ellen Dubinski", "Fernando Rios", "Ahlam Saleh")
test_data_COM_authors     <- c("Phillip Kuo", "Bekir Tanriover", "Ahlam Saleh")
test_data_COM_Tucson_authors <- c("Che Carrie Liu", "Robert M. Aaronson", "Alexa Aasronson", "Mohammed Abbas", "")
test_data_science_authors <- c("Marek Rychlik", "Ali Bilgin", "Beichuan Zhang")
test_data_ischool_authors <- c("Hong Cui")
test_data_others          <- c("Leila Hudson", "Mona Hymel")
test_data_not_updated_authors <-c("Karen Padilla", "Haw-chih Tai")
test_data_affiliation <- c("University of Arizona")
test_data_year <- c("2022", "2021", "2020", "2012")
# Best OA location. find out host organization.
# count: 8394 (2024-07-11)
# This fetch will take a few minutes. So be patient .
UA_host_best_location <- oa_fetch(
entity = "works",
# UA campus repository ID does not work as a filter
best_oa_location.source.host_organization = "https://openalex.org/I138006243",
# If only need count, uncomment the below line for a quick run.
count_only = TRUE
# If only need some samples. using the below line.
# options = list(sample = 100, seed = 1)
)
# Primary_location.source.host_organization.
# count: 24 (2024-07-11)
UA_host2 <- oa_fetch (
entity = "works",
primary_location.source.host_organization = "https://openalex.org/I138006243",
count_only = TRUE
)
############### Use campus repository source ID.
# no result using UA campus repository source ID.
UA_host5 <- oa_fetch (
entity = "works",
best_oa_location.source.host_organization = "https://openalex.org/S2764879211",
count_only = TRUE
)
UA_host6 <- oa_fetch (
entity = "works",
locations.source.host_organization = "https://openalex.org/S2764879211",
count_only = TRUE
)
# Filter the dataframe to get all rows where "so" is "journal of range management" (JRM) (case insenstive)
df_jrm <- subset(UA_host_all_location, grepl("journal of range management", so, ignore.case = TRUE))  #4,183
df_rem <- subset(UA_host_all_location, grepl("Range Ecology", so, ignore.case = TRUE)) # 432
# Count the number of occurrences of each unique value in the "source" column using dplyr
source_counts_df <- UA_host_all_location %>%
count(so, sort = TRUE)
# Display the dataframe with counts
# JRM/REM:  4183+836 (3991 + 804 for best_oa)
# Rangelands: 782 (685 for best_oa)
# NA: 384
print(source_counts_df)
#### Example 1: More like openalex pulled directly from crossref.
###  Campus repo:
doi <- "10.2458/v24i1.22003"
metadata <- get_doi_metadata(doi)
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
library(rcrossref)
library (httr)
library(jsonlite)
# Function to get metadata for a DOI
get_doi_metadata <- function(doi) {
url <- paste0("https://api.crossref.org/works/", doi)
response <- GET(url)
if (status_code(response) == 200) {
metadata <- content(response, as = "text", encoding = "UTF-8")
metadata <- fromJSON(metadata, flatten = TRUE)
return(metadata$message)
} else {
message("Error retrieving metadata: ", status_code(response))
return(NULL)
}
}
#### Example 1: More like openalex pulled directly from crossref.
###  Campus repo:
doi <- "10.2458/v24i1.22003"
metadata <- get_doi_metadata(doi)
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
View(metadata)
### Example 3:
# https://doi.org/10.1038/ng.3667"
doi <- "https://doi.org/10.1038/ng.3667"
metadata <- get_doi_metadata(doi)
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
View(metadata)
ls
### 1.2 Getting all the works based on the institution ROR and publication date. It takes longer time.
# see above for the running time
org_works_2019 <-oa_fetch(
entity="works",
institutions.ror=c("03m2x1q45"),
from_publication_date ="2019-01-01",
to_publication_date = "2019-12-31"
)
library(openalexR)
library(dplyr)
library(tidyverse)
library(writexl)
# free unused obj to manage memory
gc()
rm(list=ls())
gc()
options("max.print" = 100000)
options (openalexR.mailto="yhan@arizona.edu")
getwd()
setwd("/home/yhan/Documents/openalexR-test/")
org_works_2022 <- readRDS("../org_works_2022.rds")
org_works <- org_works_2022
##### 2. Checking and verifying data
##### 2.1 Route 1: Getting citation data from $referenced_works
##### Route 2: Getting author's data?
###### change this line only to update the right dataset.
org_works_ref <- org_works$referenced_works
### 1.1 Getting the count only. This is the quick way to find out the total number of works.
# Typically only some seconds
UAworks_count <-oa_fetch(
entity="works",
institutions.ror=c("03m2x1q45"),
from_publication_date ="2023-01-01",
to_publication_date = "2023-12-31",
#primary_location.source.type = "journal",
count_only = TRUE
)
# Banner-University Medical Center Tucson. 399 works.
UAUMC.df <-oa_fetch(
entity="works",
institutions.ror=c("02xbk5j62"),
from_publication_date ="2024-01-01")
View(UAUMC.df)
install.packages("remotes")
remotes::install_github("ropensci/openalexR", force=TRUE)
library(openalexR)
library(dplyr)
library(tidyverse)
library(writexl)
# free unused obj to manage memory
gc()
rm(list=ls())
gc()
options("max.print" = 100000)
options (openalexR.mailto="yhan@arizona.edu")
getwd()
setwd("/home/yhan/Documents/openalexR-test/")
# Banner-University Medical Center Tucson. 399 works.
UAUMC.df <-oa_fetch(
entity="works",
institutions.ror=c("02xbk5j62"),
from_publication_date ="2024-01-01")
View(UAUMC.df)
install.packages("remotes")
remotes::install_github("ropensci/openalexR", force=TRUE)
library(openalexR)
library(dplyr)
packageVersion("openalexR")
remotes::install_github("ropensci/openalexR", force=TRUE)
install.packages("openalexR")
library(openalexR)
packageVersion("openalexR")
install.packages("remotes")
remotes::install_github("ropensci/openalexR", force=TRUE)
library(openalexR)
packageVersion("openalexR")
install.packages("remotes")
remotes::install_github("ropensci/openalexR", force=TRUE)
library(openalexR)
packageVersion("openalexR")
install.packages("openalexR")
packageVersion("openalexR")
library(openalexR)
packageVersion("openalexR")
remotes::install_github("ropensci/openalexR", force=TRUE)
library(openalexR)
packageVersion("openalexR")
org_works_2022 <- readRDS("../org_works_2023.rds")
org_works <- org_works_2023
##### 2. Checking and verifying data
##### 2.1 Route 1: Getting citation data from $referenced_works
##### Route 2: Getting author's data?
###### change this line only to update the right dataset.
org_works_ref <- org_works$referenced_works
# There are NA references. So we need to remove them.
# This na_indices include type: article, books, errata, letter, and other types
na_indices <- which(sapply(org_works_ref, function(x) is.logical(x) && is.na(x)))
na_count <- sum(sapply(org_works_ref, function(x) is.logical(x) && is.na(x)))
na_percent <- na_count/length(org_works_ref) * 100
# Remove duplicate rows from the data frame
unique_org_works <- unique(org_works)
org_works_ref <- unique(org_works_ref) # this actually also remove NA lists.
##### 2. Checking and verifying data
##### 2.1 Route 1: Getting citation data from $referenced_works
##### Route 2: Getting author's data?
###### change this line only to update the right dataset.
org_works_ref <- org_works$referenced_works
# There are NA references. So we need to remove them.
# This na_indices include type: article, books, errata, letter, and other types
na_indices <- which(sapply(org_works_ref, function(x) is.logical(x) && is.na(x)))
na_count <- sum(sapply(org_works_ref, function(x) is.logical(x) && is.na(x)))
na_percent <- na_count/length(org_works_ref) * 100
# Remove duplicate rows from the data frame
unique_org_works <- unique(org_works)
org_works_ref <- unique(org_works_ref) # this actually also remove NA lists.
# Filter the rows where $reference_works is NA and $type is "article"
works_na_referenced_works <- org_works %>%
filter(is.na(referenced_works) & type == "article")
# rm(org_works_ref_combined)
org_works_ref_combined <- unlist(org_works_ref, use.names = FALSE)
org_works <- org_works_2023
org_works_2023 <- readRDS("../org_works_2023.rds")
org_works <- org_works_2023
##### 2. Checking and verifying data
##### 2.1 Route 1: Getting citation data from $referenced_works
##### Route 2: Getting author's data?
###### change this line only to update the right dataset.
org_works_ref <- org_works$referenced_works
# There are NA references. So we need to remove them.
# This na_indices include type: article, books, errata, letter, and other types
na_indices <- which(sapply(org_works_ref, function(x) is.logical(x) && is.na(x)))
na_count <- sum(sapply(org_works_ref, function(x) is.logical(x) && is.na(x)))
na_percent <- na_count/length(org_works_ref) * 100
# Remove duplicate rows from the data frame
unique_org_works <- unique(org_works)
org_works_ref <- unique(org_works_ref) # this actually also remove NA lists.
# Filter the rows where $reference_works is NA and $type is "article"
works_na_referenced_works <- org_works %>%
filter(is.na(referenced_works) & type == "article")
library(dplyr)
library(tidyverse)
library(writexl)
options("max.print" = 100000)
options (openalexR.mailto="yhan@arizona.edu")
getwd()
setwd("/home/yhan/Documents/openalexR-test/")
# rm(org_works_ref_combined)
org_works_ref_combined <- unlist(org_works_ref, use.names = FALSE)
org_works_ref_combined <- org_works_ref_combined[!is.na(org_works_ref_combined)]  # Remove NA values
# Use sapply to find matching elements in the org_works_ref for testing.
matching_indices <- which(sapply(org_works_ref, function(x)
any(x %in% c("https://openalex.org/W1624352668", "https://openalex.org/W1548779692")))) # https://openalex.org/W1624352668 were cited on 2021 and 2023 data
print(matching_indices)
# Test to see how many times a work is cited.
# 21 times (2020); 22 times(2021), 26 times(2022), 18 times(2023)
index <- which(org_works_ref_more_cited == "https://openalex.org/W4247665917")
# Test to see how many times a work is cited.
# 21 times (2020); 22 times(2021), 26 times(2022), 18 times(2023)
index <- which(org_works_ref == "https://openalex.org/W4247665917")
# Test to see how many times a work is cited.
# 21 times (2020); 22 times(2021), 26 times(2022), 18 times(2023)
index <- which(org_works_ref_combined == "https://openalex.org/W4247665917")
# test case 2: cited 6 from microbiology, multiple times for 2019, 2020, 2021, 2022
# both final published version and pre-print existing: https://openalex.org/works/W4379795917 and https://openalex.org/W4319339791
search_string <- "https://openalex.org/W2128159409"
indices_with_string <- which(sapply(org_works$referenced_works, function(x) search_string %in% x))
print(indices_with_string)
org_works[indices_with_string, ]$id
# Find it from the original article
search_string <- "https://openalex.org/W2594545996"
# this article was cited 81 (2019, 130 (2020), 90 (2021), 52 (2022), 16 (2023)
indices_with_string <- which(sapply(org_works$referenced_works, function(x) search_string %in% x))
print(indices_with_string)
org_works[indices_with_string, ]$id
#########################
# Ensure oa_fetch() is receiving the correct input and create a new dataframe for results.
works_cited <- data.frame()
works_cited2 <-data.frame()
#num_of_works <-10000
num_of_works <- length (org_works_ref_combined)
#### Step 1: Re-generate a new row if it matches (meaning; cited multiple times.)
works_cited_final <- works_cited
works_cited_final <- readRDS("../works_cited_final_journal_2023.rds")
# Filter rows where issn_l is neither NA nor an empty string
articles_cited <- works_cited_final[!is.na(works_cited_final$issn_l) & works_cited_final$issn_l != "", ]
View(works_cited_final)
nrow(articles_cited)
#############################
# Filter records where type is "article" (excluding conference paper etc )
# 2023: 226,947
non_articles_cited <- articles_cited[articles_cited$type != "article", ] # review, letter, editorial
View(non_articles_cited)
articles_cited <- articles_cited[articles_cited$type == "article", ]
# Truncate strings in all character columns to 32,767 characters
non_articles_cited <- non_articles_cited %>%
mutate(across(where(is.character), ~ ifelse(nchar(.) > 32767, substr(., 1, 32767), .)))
write_xlsx(non_articles_cited, "citations/non_articles_cited_2023.xlsx")
# Empty or NULL records
count_null_empty_id <- sum(is.na(articles_cited$id) | trimws(articles_cited$id) == "")
count_null_empty_id
# publisher: host_organization
unique_publishers <- unique(articles_cited$host_organization)
# number of publishers: ~1,600
num_unique_publishers <- length(unique_publishers)
# list top 50 publishers
print(unique_publishers[1:50])
# 2022: 3,312 NA / 323,221
# 2021: 3,687 NA / 341,738
# 2020: 4,039 NA / 382,495
num_na <- sum(is.na(articles_cited$host_organization))
# Replace NA values and empty strings with "NA"
articles_cited$host_organization[is.na(articles_cited$host_organization) | trimws(articles_cited$host_organization) == ""] <- "NA"
# Dealing with "NA" data in "host_organization" field.
# 1. First, showing all NA publisher: meaning publisher info is not available.
publisher_NA <- articles_cited[articles_cited$host_organization == "NA", ]
publisher_NA_id <-unique(publisher_NA$id)
# Check if any row in the df 'publisher_NA' contains a non-missing value in the "issn_l" column
publisher_NA_with_issn <- publisher_NA[!is.na(publisher_NA$`issn_l`) & publisher_NA$`issn_l` != "", ]
print(publisher_NA_with_issn)
# 2022: 3,312 NA / 323,221
# 2021: 3,687 NA / 341,738
# 2020: 4,039 NA / 382,495
num_na <- sum(is.na(articles_cited$host_organization))
# Replace NA values and empty strings with "NA"
articles_cited$host_organization[is.na(articles_cited$host_organization) | trimws(articles_cited$host_organization) == ""] <- "NA"
# Dealing with "NA" data in "host_organization" field.
# 1. First, showing all NA publisher: meaning publisher info is not available.
publisher_NA <- articles_cited[articles_cited$host_organization == "NA", ]
publisher_NA_id <-unique(publisher_NA$id)
# Check if any row in the df 'publisher_NA' contains a non-missing value in the "issn_l" column
publisher_NA_with_issn <- publisher_NA[!is.na(publisher_NA$`issn_l`) & publisher_NA$`issn_l` != "", ]
print(publisher_NA_with_issn)
# Extract unique ISSNs from the 'issn_l' column: 1235 unique issns
# 2023: 1,236 / 3,489 NA
# 2022: 1,110 / 3,312 NA
# 2021: 1,204 / 3,687 NA
# 2020: 1,737 / 4,039 NA
unique_issn <- unique(publisher_NA$`issn_l`)
print(unique_issn)
# Check if any 'id' values are duplicated
any_duplicated_ids <- any(duplicated(publisher_NA$id))
# Not using unnect() because it flattens out every article per author, which creates a lot of duplicated info
library(jsonlite)
# Convert the 'author' dataframe to JSON for each row
publisher_NA <- publisher_NA %>%
mutate(author = sapply(author, function(x) toJSON(x)))
# Truncate only strings that exceed Excel's 32,767 character limit
publisher_NA <- publisher_NA %>%
mutate(across(where(is.character), ~ ifelse(nchar(.) > 32767, substr(., 1, 32767), .)))
publisher_name <- "Microbiology society"
publisher_microbiology <- articles_cited[grepl(publisher_name, articles_cited$host_organization, ignore.case = TRUE), ]
### Cell press
publisher_cell_press <- articles_cited[grepl("Cell Press", articles_cited$host_organization, ignore.case = TRUE), ]
View(publisher_cell_press)
###########################################
### Search if a publisher is in a DF
# Output the publisher
# @ return: the indices of the publisher
search_publisher <- function(publisher_string, df) {
# Find indices where the host_organization contains the publisher string (case insensitive)
indices_with_string <- which(grepl(publisher_string, df$host_organization, ignore.case = TRUE))
print(df[indices_with_string, ]$host_organization)
return(indices_with_string)
}
# Example usage:
publisher_string <- "Emerald Publishing"
result_indices <- search_publisher(publisher_string, articles_cited)
# Print the indices
print(result_indices)
#### Function: search_work_publisher():
## Search a work's publisher and output the publisher
# @return: index of the DF
search_work_publisher <- function(search_string, df) {
# Find indices where the host_organization contains the search string (case insensitive)
indices_with_string <- which(sapply(df$id, function(x) !is.na(x) && search_string %in% x))
print(df[indices_with_string, ]$host_organization)
print(indices_with_string)
return(indices_with_string)
}
# Example usage:
search_string <- "https://openalex.org/W2963276645"
result_indices <- search_work_publisher(search_string, org_works)
###############################################################
# Verify any cited work using the function search_references()
# Define the function to search for a string in the referenced_works column and print the output
##############################################3
search_references <- function(search_string, df) {
indices_with_string <- which(sapply(df$referenced_works, function(x) search_string %in% x))
print(indices_with_string)
print(df[indices_with_string, ]$id)
}
# Example usage:
search_string <- "Emerald Publishing"
result_indices <- search_publisher(search_string, org_works)
print(result_indices)
# Example usage
search_string <- "https://openalex.org/W1604958295"
search_string <- "https://openalex.org/W1607198972"
#search_string <- "https://openalex.org/W3216054981"
indices_with_string <- which(sapply(org_works$referenced_works, function(x) search_string %in% x))
search_references(search_string, org_works)
### Test cases for Microbiology
# both final published version and pre-print existing: https://openalex.org/works/W4379795917 and https://openalex.org/W4319339791
# Org_works ids are: "https://openalex.org/W4379795917" "https://openalex.org/W4317888776" "https://openalex.org/W4385752148" "https://openalex.org/W4319339791" "https://openalex.org/W4323537660"
# "https://openalex.org/W4323309440"
search_string <- "https://openalex.org/W2128159409"  # Microbiology articles
search_string <- "https://openalex.org/W2017185349" # Microbiology
# Publishers test case : cited 6 from microbiology
# both final published version and pre-print existing: https://openalex.org/works/W4379795917 and https://openalex.org/W4319339791
publisher_article_indicies <- which(sapply(publisher_microbiology$id, function(x) search_string %in% x))
print(publisher_article_indicies)
publisher_microbiology[publisher_article_indicies, ]$id
# Test case:
# cited 32 times (2020), 53(2022), 47(2023)
# The Gaia mission
search_string <- "https://openalex.org/W147232447"
search_references(search_string, org_works)
# Test case:
# cited: >80 (2019), 123 times (2020), 40 (2022), 16 (2023)
# https://openalex.org/W2066340221 cited > 80 times in 2019.
search_string <- "https://openalex.org/W2066340221"
search_references(search_string, org_works)
# Test case: Emerald (2022)
search_string <- "https://openalex.org/W1998245073"
search_string <- "https://openalex.org/W2508822998" # (3 times), 2(2023)
search_string <- "https://openalex.org/W1607198972"
search_string <- "https://openalex.org/W2011490204"
search_references(search_string, org_works)
# Test case: IWA. 1 (2022)
search_string <- "https://openalex.org/W2045185088"
search_publisher("IWA", org_works) # UA author published in IWA in 2014. not in 2019, 2020, and 2021
search_string <- "https://openalex.org/W2130109162"
search_string <- "https://openalex.org/W1965549985"
search_references(search_string, org_works)
# https://openalex.org/W2130109162 same record, different publication date?
matches <- which(tolower(articles_cited$id) == tolower(search_string))
view(articles_cited[matches, ])
print(articles_cited$id[matches])
search_string <- "https://openalex.org/W2511428910"
search_publisher("Cell Press", org_works)
search_references(search_string, org_works)
View(publisher_cell_press)
search_string <- "https://openalex.org/W2091924214"
search_publisher("Cell Press", org_works)
search_references(search_string, org_works)
search_string <- "https://openalex.org/W2947880448"
search_publisher("Cell Press", org_works)
search_references(search_string, org_works)
###########################################
### Search if a publisher is in a DF
# Output the publisher
# @ return: the indices of the publisher
search_publisher <- function(publisher_string, df) {
# Find indices where the host_organization contains the publisher string (case insensitive)
indices_with_string <- which(grepl(publisher_string, df$host_organization, ignore.case = TRUE))
print(df[indices_with_string, ]$host_organization)
print(df[indices_with_string, ]$id)
return(indices_with_string)
}
search_publisher("Cell Press", org_works)
write_xlsx(publisher_cell_press, "citations/publisher_cell_press_2023.xlsx")
# Need to study more.
# Emerald: cited (yyyy): 395 (2020), 257 (2021), 322 (2022), 276 (2023),
publisher_emerald <- articles_cited[grepl("Emerald Publishing", articles_cited$host_organization, ignore.case = TRUE), ]
###########################################
### Search if a publisher is in a DF
# Output the publisher
# @ return: the indices of the publisher
search_publisher <- function(publisher_string, df) {
# Find indices where the host_organization contains the publisher string (case insensitive)
indices_with_string <- which(grepl(publisher_string, df$host_organization, ignore.case = TRUE))
print(df[indices_with_string, ]$host_organization)
print(df[indices_with_string, ]$id)
return(indices_with_string)
}
# Example usage:
publisher_string <- "Emerald Publishing"
result_indices <- search_publisher(publisher_string, articles_cited)
write_xlsx(publisher_cell_press, "citations/publisher_journal_cell_press_2023.xlsx")
write_xlsx(publisher_emerald, "citations/publisher_journal_emerald_2023.xlsx")
# Not using unnect() because it flattens out every article per author, which creates a lot of duplicated info
library(jsonlite)
publisher_cell_press <- publisher_cell_press %>%
mutate(across(where(is.character), ~ ifelse(nchar(.) > 32767, substr(., 1, 32767), .)))
write_xlsx(publisher_cell_press, "citations/publisher_journal_cell_press_2023.xlsx")
search_string <- "https://openalex.org/W2770415532"
search_publisher("Cell Press", org_works)
search_references(search_string, org_works)
search_string <- "https://openalex.org/W2770415532"
search_references(search_string, org_works)
search_string <- "https://openalex.org/W2125987139"
search_references(search_string, org_works)
unique_publisher_cell <- unique(publisher_cell_press)
df <-publisher_cell_press
# Use table to count occurrences of each duplicated row
row_counts <- as.data.frame(table(apply(df, 1, paste, collapse = "-")))
duplicates_with_counts <- row_counts[row_counts$Freq > 1, ]
View(duplicates_with_counts)
search_stirng <- "https://openalex.org/W2002490399"
search_references(search_string, org_works)
publisher_cell_press_unique <- unique(publisher_cell_press)
#install.packages("openalexR")
install.packages("remotes")
remotes::install_github("ropensci/openalexR", force=TRUE)
library(openalexR)
packageVersion("openalexR")
library(openalexR)
packageVersion("openalexR")
# Banner-University Medical Center Tucson. 399 works.
UAUMC.df <-oa_fetch(
entity="works",
institutions.ror=c("02xbk5j62"),
from_publication_date ="2024-01-01")
View(UAUMC.df)
