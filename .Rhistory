}
View(metadata)
library(openalexR)
#library(dplyr)
library(tidyverse)
options (openalexR.mailto="yhan@arizona.edu")
getwd()
setwd("/home/yhan/Documents/UA-datasets/openalexR-test/")
# Banner-University Medical Center Tucson. 399 works.
UAUMC.df <-oa_fetch(
entity="works",
institutions.ror=c("02xbk5j62"),
from_publication_date ="2023-01-01")
# 1. Getting data
# retrieving all publications association with UArizona's ROR (Research Organization Registry) id.  For this project, I'm using 5 years of data.
# 2024-08-26: 50,000 records (10-year data since 2014 - 2024: 86,000 records, 11-year data since 2013: 100,000 records)
# It took about 15 mins to run, and used 7GB memory.
UAworks1 <-oa_fetch(
entity="works",
institutions.ror=c("03m2x1q45"),
from_publication_date ="2023-01-01"
#count_only = TRUE
)
UAworks2 <-oa_fetch(
entity="works",
institutions.ror=c("03m2x1q45"),
from_publication_date ="2014-01-01",
count_only = TRUE
)
# alternative to get referenced works (to verify: The below is to make sure UA authors only)
WorksCited_alt <- as.list(unique(do.call(rbind, UAworks1$referenced_works)))
# alternative to get referenced works (to verify: The below is to make sure UA authors only)
# 15k works ==> 20 M references???
WorksCited_alt <- as.list(unique(do.call(rbind, UAUMC.df$referenced_works)))
View(WorksCited_alt)
WorksCited <-unique(WorksCited) %>%discard(is.na)
WorksCited_alt2 <-unique(WorksCited_alt) %>%discard(is.na)
# alternative to get referenced works (to verify: The below is to make sure UA authors only)
# 15k works ==> 20 M references???
WorksCited_alt <- as.list(unique(do.call(rbind, lapply(UAUMC.df$referenced_works, unique))))
# alternative to get referenced works (to verify: The below is to make sure UA authors only)
# 15k works ==> 20 M references???
WorksCited_alt <- as.list(unique(do.call(rbind, lapply(UAUMC.df$referenced_works, unique))))
str(UAUMC.df$referenced_works)
combined_references <- do.call(rbind, UAUMC.df$referenced_works)
str(combined_references)
# Banner-University Medical Center Tucson. 399 works.
UAUMC.df <-oa_fetch(
entity="works",
institutions.ror=c("02xbk5j62"),
from_publication_date ="2024-01-01")
str(UAUMC.df$referenced_works)
View(UAUMC.df)
str(UAUMC.df$referenced_works)
combined_references <- do.call(rbind, UAUMC.df$referenced_works)
UAUMC.df$referenced_works <- lapply(UAUMC.df$referenced_works, function(x) {
x <- x[!is.na(x)]  # Remove NA values
return(x)
})
# Combine the cleaned data using rbind or bind_rows
combined_references <- do.call(rbind, UAUMC.df$referenced_works)
lapply(UAUMC.df$referenced_works, str)
combined_references <- bind_rows(UAUMC.df$referenced_works)
# alternative to get referenced works (to verify: The below is to make sure UA authors only)
# 15k works ==> 20 M references???
# Filter out logical(0) elements from referenced_works
UAUMC.df$referenced_works <- lapply(UAUMC.df$referenced_works, function(x) {
if (length(x) > 0) {  # Only keep non-empty elements
return(x)
} else {
return(NULL)  # Replace logical(0) with NULL to remove it
}
})
# Remove NULL values from the list
UAUMC.df$referenced_works <- UAUMC.df$referenced_works[!sapply(UAUMC.df$referenced_works, is.null)]
View(UAUMC.df)
# Now combine the remaining data
combined_references <- do.call(rbind, UAUMC.df$referenced_works)
# alternative to get referenced works (to verify: The below is to make sure UA authors only)
# 15k works ==> 20 M references???
# Filter out logical(0) elements from referenced_works
UAUMC.df$referenced_works <- lapply(UAUMC.df$referenced_works, function(x) {
if (length(x) > 0) {  # Only keep non-empty elements
return(x)
} else {
return(NULL)  # Replace logical(0) with NULL to remove it
}
})
# Now combine the remaining data
combined_references <- do.call(rbind, UAUMC.df$referenced_works)
WorksCited_alt <- as.list(unique(do.call(rbind, UAUMC.df$referenced_works)))
WorksCited_alt <- as.list(unique(do.call(rbind, lapply(UAUMC.df$referenced_works, unique))))
WorksCited_alt2 <-unique(WorksCited_alt) %>%discard(is.na)
View(WorksCited_alt2)
# Filter out NULL values from the referenced_works list
filtered_referenced_works <- UAUMC.df$referenced_works[!sapply(UAUMC.df$referenced_works, is.null)]
# Combine the remaining elements using bind_rows
combined_references <- bind_rows(filtered_referenced_works)
# Convert each element (which is a list) into a data frame
filtered_referenced_works <- lapply(filtered_referenced_works, function(x) {
if (is.list(x)) {
return(as.data.frame(x, stringsAsFactors = FALSE))  # Convert list to data frame
} else {
return(NULL)  # Skip if it's not a list
}
})
View(filtered_referenced_works)
# Filter out NULL values from the referenced_works list
filtered_referenced_works <- UAUMC.df$referenced_works[!sapply(UAUMC.df$referenced_works, is.null)]
View(filtered_referenced_works)
# Convert each element (which is a list) into a data frame
filtered_referenced_works2 <- lapply(filtered_referenced_works, function(x) {
if (is.list(x)) {
return(as.data.frame(x, stringsAsFactors = FALSE))  # Convert list to data frame
} else {
return(NULL)  # Skip if it's not a list
}
})
View(filtered_referenced_works2)
# Remove any NULL elements that resulted from the conversion
filtered_referenced_works2 <- filtered_referenced_works[!sapply(filtered_referenced_works, is.null)]
View(filtered_referenced_works2)
# Convert each element (which is a list) into a data frame
filtered_referenced_works2 <- lapply(filtered_referenced_works, function(x) {
if (is.list(x)) {
return(as.data.frame(x, stringsAsFactors = FALSE))  # Convert list to data frame
} else {
return(NULL)  # Skip if it's not a list
}
})
View(filtered_referenced_works2)
# Combine all data frames into one
combined_references <- bind_rows(filtered_referenced_works2)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
UofSworks.df <-oa_fetch(
entity="works",
institutions.ror=c("05xwb6v37"),
from_publication_date ="2013-01-01")
Works.df <- UofSworks.df
#Unnesting Authors
WorksUnique.df<-Works.df%>%
mutate(author=lapply(author, function(x){
names(x) <-paste0(names(x), "author")
return(x)
}))%>%
unnest(author)
#Spot Checking U of S affiliated authors
WorksUnique.df%>%filter(institution_rorauthor== "https://ror.org/05xwb6v37")
#Removing Authors Unaffiliated Authors
WorksUnique.df<-WorksUnique.df%>%
filter(institution_rorauthor== "https://ror.org/05xwb6v37" & !str_detect(au_affiliation_rawauthor, "Penn"))
#Deduplicating list in case of multiple U of S authors associated with a single work
WorksUnique.df <-WorksUnique.df[!duplicated(WorksUnique.df$id),]
UofSWorksUnique.df <-WorksUnique.df
#Unnesting Concepts
WorksByConcept.df<-UofSWorksUnique.df%>%
mutate(concepts=lapply(concepts, function(x){
names(x) <-paste0(names(x), "concepts")
return(x)
}))%>%
unnest(concepts)
#Filtering to root concepts(level = 0) with a concept score > 0.
#Filtering out humanities publications.
HumanitiesWorks.df <-WorksByConcept.df%>%
filter(display_nameconcepts %in% c("Political Science", "Philosophy", "Art", "Sociology", "History", "Psychology", "Economics", "Business")& scoreconcepts > 0 & levelconcepts == 0)
#Filtering out sciences publications
SciencesWorks.df <-WorksByConcept.df%>%
filter(display_nameconcepts %in% c("Mathematics", "Computer Science", "Geology", "Chemistry", "Biology", "Engineering", "Geography", "Materials Science", "Physics", "Environmental Sciences", "Medicine") & scoreconcepts >0 & levelconcepts == 0)
#Isolating and unpacking data in the referenced_works column
WorksCited <- as.list(unique(do.call(rbind,WorksUnique.df$referenced_works)))
#Removing any values of NA and any duplicate values
WorksCited <-unique(WorksCited) %>%discard(is.na)
#Creating an empty dataframe to store the results of the for loop.
WorksCited.df <-data.frame()
#Running the loop to retrieve works cited data (may take some time to run)
for(i in seq(1, length(WorksCited), by=50)){
batch_identifiers <-WorksCited[i:min(i+49, length(WorksCited))]
batch_data <-oa_fetch(identifier=batch_identifiers)
WorksCited.df<-rbind(WorksCited.df, batch_data)
}
View(UofSworks.df)
null_count <- sum(sapply(UAUMC.df$referenced_works, is.null))
print(null_count)
# Banner-University Medical Center Tucson. 399 works.
UAUMC.df <-oa_fetch(
entity="works",
institutions.ror=c("02xbk5j62"),
from_publication_date ="2024-01-01")
# Note: for 2014 data, it took about 15 mins to run, and used 7GB memory.
UAworks1 <-oa_fetch(
entity="works",
institutions.ror=c("03m2x1q45"),
from_publication_date ="2024-01-01"
#count_only = TRUE
)
View(UAUMC.df)
# Filter out logical(0) elements from referenced_works
summary(UAUMC.df$referenced_works)
str(UAUMC.df$referenced_works)
# Filter out logical(0) elements from referenced_works
class(UAUMC.df$referenced_works)
is.list(UAUMC.df$referenced_works)
# Check the class of each element in the referenced_works list
element_classes <- sapply(UAUMC.df$referenced_works, class)
# Print the results
print(element_classes)
# If the element is character. It is a
lapply(UAUMC.df$referenced_works[1:5], print)  # Print the first five elements
print(UAUMC.df$referenced_works[[1]])
print(UAUMC.df$referenced_works[[2]])
print(UAUMC.df$referenced_works[[3]])
# If the element is character. It is a
lapply(UAUMC.df$referenced_works[1:10], print)  # Print the first five elements
print(UAUMC.df$referenced_works[[6]])
print(UAUMC.df$referenced_works[[7]])
for (i in seq_along(UAUMC.df$referenced_works)) {
if (is.null(UAUMC.df$referenced_works[[i]])) {
cat("Element at index", i, "is NULL\n")
}
}
for (i in seq_along(UAUMC.df$referenced_works)) {
if (is.null(UAUMC.df$referenced_works[[i]])) {
cat("Element at index", i, "is NULL\n")
}
}
lapply(UAUMC.df$referenced_works, function(x) {
if (is.null(x)) {
print(x)
}
})
na_indices <- which(sapply(UAUMC.df$referenced_works, is.na))
na_indices <- which(sapply(UAUMC.df$referenced_works, function(x) is.logical(x) && is.na(x)))
print(na_indices)
# count how many "NA" in referenced_works col.
na_count <- sum(sapply(UAUMC.df$referenced_works, function(x) is.logical(x) && is.na(x)))
print(na_count)
##### 2. Checking and verifying data
###### change this line only to update the right dataset.
ref_works <- UAUMC.df$referenced_works
# Column referenced_works is a list
class(ref_works)
is.list(ref_works)
# Check the class of each element in the referenced_works list
element_classes <- sapply(ref_works, class)
print(element_classes)
# examples of first few referenced_works. Showing they are either char or logic
print(ref_works[[1]])
print(ref_works[[5]])
# Find "NA" indexes
na_indices <- which(sapply(ref_works, function(x) is.logical(x) && is.na(x)))
print(na_indices)
# count how many "NA" in referenced_works col.
na_count <- sum(sapply(ref_works, function(x) is.logical(x) && is.na(x)))
print(na_count)
combined_ref_works <- unlist(ref_works, use.names = FALSE)
combined_ref_works <- combined_referenced_works[!is.na(combined_ref_works)]  # Remove NA values
combined_ref_works <- combined_ref_works[!is.na(combined_ref_works)]  # Remove NA values
print(combined_referenced_works)
# count how many "NA" in referenced_works col.
na_count <- sum(sapply(ref_works, function(x) is.logical(x) && is.na(x)))
print(na_count)
combined_ref_works <- unlist(ref_works, use.names = FALSE)
combined_ref_works <- combined_ref_works[!is.na(combined_ref_works)]  # Remove NA values
print(combined_refe_works)
print(combined_ref_works)
View(combined_references)
summary(combined_ref_works)
# remove the duplicates
unique_referenced_works <- unique(combined_referenced_works)
# remove the duplicates
combined_ref_works <- unique(combined_ref_works)
print(combined_ref_works)
summary(combined_ref_works)
combined_ref_works <- unlist(ref_works, use.names = FALSE)
combined_ref_works <- combined_ref_works[!is.na(combined_ref_works)]  # Remove NA values
print(combined_ref_works)
summary(combined_ref_works)
# remove the duplicates
combined_ref_works <- unique(combined_ref_works)
print(combined_ref_works)
summary(combined_ref_works)
# 2.21 finding these duplicates, which mean the duplicates have been cited multiple times (probably more important to have these journals subscribed!)
ref_works_more_cited <- combined_ref_works[duplicated(combined_ref_works)]
# 2.21 finding these duplicates, which mean the duplicates have been cited multiple times (probably more important to have these journals subscribed!)
ref_works_more_cited <- combined_ref_works[duplicated(combined_ref_works)]
# 2.2 Combine all the references and do further data analysis
ref_works_combined <- unlist(ref_works, use.names = FALSE)
ref_works_combined <- ref_works_combined[!is.na(ref_works_combined)]  # Remove NA values
print(ref_works_combined)
summary(ref_works_combined)
# 2.21 finding these duplicates, which mean the duplicates have been cited multiple times (probably more important to have these journals subscribed!)
ref_works_more_cited <- ref_works_combined[duplicated(ref_works_combined)]
print(ref_works_more_cited)
summary(ref_works_more_cited)
# 2.22 remove the duplicates for further processing.
ref_works_cited <- unique(ref_works_combined)
summary(ref_works_cited)
# 3. Data cleanup.
# Flattening authors fields from the DF (multiple authors per work).
# 426,000 obs (multiple authors) from 50,400 obs (works)
UAworks_since <- UAUMC.df
UAWorks_authors<-UAworks_since%>%
mutate(author=lapply(author, function(x){
names(x) <-paste0(names(x), "author")
return(x)
}))%>%
unnest(author)
# Then extract UArizona authors only
# 94,500 obs from 426,000 obs (UA authors only)
UAWorks_UAauthors2 <- UAWorks_authors%>%filter(institution_rorauthor== "https://ror.org/03m2x1q45")
View(UAWorks_authors)
# 3. check workcited
# 8.2 million
ref_works2 <- UAWorks_UAauthors2$referenced_works
# Find "NA" indexes
na_indices <- which(sapply(ref_works2, function(x) is.logical(x) && is.na(x)))
print(na_indices)
# count how many "NA" in referenced_works col.
na_count <- sum(sapply(ref_works2, function(x) is.logical(x) && is.na(x)))
print(na_count)
# 2.2 Combine all the references and do further data analysis
ref_works_combined2 <- unlist(ref_works2, use.names = FALSE)
ref_works_combined2 <- ref_works_combined2[!is.na(ref_works_combined2)]  # Remove NA values
print(ref_works_combined2)
summary(ref_works_combined2)
# 2.21 finding these duplicates, which mean the duplicates have been cited multiple times (probably more important to have these journals subscribed!)
ref_works_more_cited2 <- ref_works_combined[duplicated(ref_works_combined2)]
print(ref_works_more_cited2)
summary(ref_works_more_cited2)
# 2.22 remove the duplicates for further processing.
ref_works_cited2 <- unique(ref_works_combined2)
summary(ref_works_cited2)
# 3. Data cleanup.
# Flattening authors fields from the DF (multiple authors per work).
# 426,000 obs (multiple authors) from 50,400 obs (works)
UAworks_since <- UAUMC.df
UAWorks_authors<-UAworks_since%>%
mutate(author=lapply(author, function(x){
names(x) <-paste0(names(x), "author")
return(x)
}))%>%
unnest(author)
# Then extract UArizona authors only
# 94,500 obs from 426,000 obs (UA authors only)
UAWorks_UAauthors2 <- UAWorks_authors%>%filter(institution_rorauthor== "https://ror.org/03m2x1q45")
# 3. check workcited
# 8.2 million
ref_works2 <- UAWorks_UAauthors2$referenced_works
View(UAWorks_authors)
View(UAWorks_UAauthors2)
summary(ref_works_combined2)
# finding these duplicates, which mean the duplicates have been cited multiple times (probably more important to have these journals subscribed!)
ref_works_more_cited2 <- ref_works_combined[duplicated(ref_works_combined2)]
print(ref_works_more_cited2)
summary(ref_works_more_cited2)
# 2.22 remove the duplicates for further processing.
ref_works_cited2 <- unique(ref_works_combined2)
summary(ref_works_cited2)
# 2.22 remove the duplicates for further processing.
ref_works_cited <- unique(ref_works_combined)
summary(ref_works_cited)
# Elements in vector1 but not in vector2
diff1 <- setdiff(ref_works_cited, ref_works_cited2)
print(diff1)
View(UAUMC.df)
# Elements in vector2 but not in vector1
diff2 <- setdiff(ref_works_cited2, ref_works_cited)
print(diff2)
# Find the indices of elements matching a pattern
matching_indices <- grep("https://openalex.org/W143452851", ref_works_more_cited2 )
print(matching_indices)  # Returns the index(es) of matching elements
# Find the indices of elements matching a pattern
matching_indices <- grep("https://openalex.org/W143452851", ref_works_combined2 )
print(matching_indices)  # Returns the index(es) of matching elements
# Find the indices of elements matching a pattern
matching_indices <- grep("https://openalex.org/W143452851", ref_works_combined )
print(matching_indices)  # Returns the index(es) of matching elements
# Find the indices of elements matching a pattern
matching_indices <- grep("https://openalex.org/W143452851", ref_works_combined2 )
print(matching_indices)  # Returns the index(es) of matching elements
# Find the indices of elements matching a pattern
matching_indices <- grep("https://openalex.org/W143452851", ref_works2 )
print(matching_indices)  # Returns the index(es) of matching elements
View(UAWorks_UAauthors2)
View(UAworks_since)
View(UAWorks_authors)
View(UAWorks_UAauthors2)
UAworks2 <-oa_fetch(
entity="works",
institutions.ror=c("03m2x1q45"),
from_publication_date ="2024-01-01",
count_only = TRUE
)
UAworks2 <-oa_fetch(
entity="works",
institutions.ror=c("03m2x1q45"),
from_publication_date ="2024-05-01",
count_only = TRUE
)
UAworks2 <-oa_fetch(
entity="works",
institutions.ror=c("03m2x1q45"),
from_publication_date ="2024-07-01",
count_only = TRUE
)
# Note: for 2014 data, it took about 15 mins to run, and used 7GB memory.
UAworks1 <-oa_fetch(
entity="works",
institutions.ror=c("03m2x1q45"),
from_publication_date ="2024-08-01"
#count_only = TRUE
)
UAworks2 <-oa_fetch(
entity="works",
institutions.ror=c("03m2x1q45"),
from_publication_date ="2024-08-01",
count_only = TRUE
)
##### 2. Checking and verifying data
###### change this line only to update the right dataset.
ref_works <- UAworks1$referenced_works
# 2.1 Checking Column referenced_works:  a list
class(ref_works)
is.list(ref_works)
# Check the class of each element in the referenced_works list
element_classes <- sapply(ref_works, class)
print(element_classes)
# check the first few referenced_works.
print(ref_works[[1]])
print(ref_works[[5]])
# Find "NA" indexes
na_indices <- which(sapply(ref_works, function(x) is.logical(x) && is.na(x)))
print(na_indices)
# count how many "NA" in referenced_works col.
na_count <- sum(sapply(ref_works, function(x) is.logical(x) && is.na(x)))
print(na_count)
# 2.2 Combine all the references and do further data analysis
ref_works_combined <- unlist(ref_works, use.names = FALSE)
ref_works_combined <- ref_works_combined[!is.na(ref_works_combined)]  # Remove NA values
print(ref_works_combined)
summary(ref_works_combined)
# 2.21 finding these duplicates, which mean the duplicates have been cited multiple times (probably more important to have these journals subscribed!)
ref_works_more_cited <- ref_works_combined[duplicated(ref_works_combined)]
print(ref_works_more_cited)
summary(ref_works_more_cited)
# 2.22 remove the duplicates for further processing.
ref_works_cited <- unique(ref_works_combined)
summary(ref_works_cited)
# 3. Data cleanup.
# Flattening authors fields from the DF (multiple authors per work).
# 426,000 obs (multiple authors) from 50,400 obs (works)
UAworks_since <- UAWorks1
# 3. Data cleanup.
# Flattening authors fields from the DF (multiple authors per work).
# 426,000 obs (multiple authors) from 50,400 obs (works)
UAworks_since <- UAworks1
UAWorks_authors<-UAworks_since%>%
mutate(author=lapply(author, function(x){
names(x) <-paste0(names(x), "author")
return(x)
}))%>%
unnest(author)
# Then extract UArizona authors only
# 94,500 obs from 426,000 obs (UA authors only)
UAWorks_UAauthors2 <- UAWorks_authors%>%filter(institution_rorauthor== "https://ror.org/03m2x1q45")
View(UAWorks_UAauthors2)
# 3. check workcited
# 8.2 million
ref_works2 <- UAWorks_UAauthors2$referenced_works
# Find "NA" indexes
na_indices <- which(sapply(ref_works2, function(x) is.logical(x) && is.na(x)))
print(na_indices)
# count how many "NA" in referenced_works col.
na_count <- sum(sapply(ref_works2, function(x) is.logical(x) && is.na(x)))
print(na_count)
# Combine all the references and do further data analysis
ref_works_combined2 <- unlist(ref_works2, use.names = FALSE)
ref_works_combined2 <- ref_works_combined2[!is.na(ref_works_combined2)]  # Remove NA values
summary(ref_works_combined2)
# finding these duplicates, which mean the duplicates have been cited multiple times (probably more important to have these journals subscribed!)
ref_works_more_cited2 <- ref_works_combined[duplicated(ref_works_combined2)]
summary(ref_works_more_cited2)
# 2.22 remove the duplicates for further processing.
ref_works_cited2 <- unique(ref_works_combined2)
summary(ref_works_cited2)
# Elements in vector1 but not in vector2
diff1 <- setdiff(ref_works_cited, ref_works_cited2)
print(diff1)
summary(ref_works_more_cited2)
summary(ref_works_cited2)
##### 2. Checking and verifying data
###### change this line only to update the right dataset.
ref_works <- UAworks1$referenced_works
# 2.1 Checking Column referenced_works:  a list
class(ref_works)
# Find "NA" indexes
na_indices <- which(sapply(ref_works, function(x) is.logical(x) && is.na(x)))
print(na_indices)
# count how many "NA" in referenced_works col. ~ 15-20% of works contain "NA"
na_count <- sum(sapply(ref_works, function(x) is.logical(x) && is.na(x)))
print(na_count)
# 2.2 Combine all the references and do further data analysis
ref_works_combined <- unlist(ref_works, use.names = FALSE)
ref_works_combined <- ref_works_combined[!is.na(ref_works_combined)]  # Remove NA values
print(ref_works_combined)
summary(ref_works_combined)
# Elements in vector1 but not in vector2
diff1 <- setdiff(ref_works_cited, ref_works_cited2)
print(diff1)
View(UAWorks_UAauthors2)
View(UAworks_since[[4]][[1]])
View(UAworks_since[[4]][[1]])
