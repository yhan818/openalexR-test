# Primary_location.source.host_organization.
# count: 24 (2024-07-11)
UA_host2 <- oa_fetch (
entity = "works",
primary_location.source.host_organization = "https://openalex.org/I138006243",
count_only = TRUE
)
# locations:
# count: 14909 (2024-07-11)
UA_host3 <- oa_fetch (
entity = "works",
locations.source.host_organization = "https://openalex.org/I138006243",
count_only = TRUE
)
############### Use campus repository source ID.
# no result using UA campus repository source ID.
UA_host5 <- oa_fetch (
entity = "works",
best_oa_location.source.host_organization = "https://openalex.org/S2764879211",
count_only = TRUE
)
UA_host6 <- oa_fetch (
entity = "works",
locations.source.host_organization = "https://openalex.org/S2764879211",
count_only = TRUE
)
### Filtering source = journal of rangement management
class (UA_host)
# Filter the dataframe to get all rows where "so" is "journal of range management" (JRM) (case insenstive)
df_jrm <- subset(UA_host, grepl("journal of range management", so, ignore.case = TRUE))
View(UA_host)
# Best OA location. find out host organization.
# count: 8394 (2024-07-11)
# This fetch will take a few minutes. So be patient .
UA_host <- oa_fetch(
entity = "works",
# UA campus repository ID does not work as a filter
best_oa_location.source.host_organization = "https://openalex.org/I138006243",
# If only need count, uncomment the below line for a quick run.
# count_only = TRUE
# If only need some samples. using the below line.
# options = list(sample = 100, seed = 1)
)
View(UA_host)
# locations:
# count: 14909 (2024-07-11)
UA_host3 <- oa_fetch (
entity = "works",
locations.source.host_organization = "https://openalex.org/I138006243",
#count_only = TRUE
)
############### Use campus repository source ID.
# no result using UA campus repository source ID.
UA_host5 <- oa_fetch (
entity = "works",
best_oa_location.source.host_organization = "https://openalex.org/S2764879211",
count_only = TRUE
)
UA_host6 <- oa_fetch (
entity = "works",
locations.source.host_organization = "https://openalex.org/S2764879211",
count_only = TRUE
)
### Filtering source = journal of rangement management
class (UA_host)
# locations:
# count: 14909 (2024-07-11)
UA_host3 <- oa_fetch (
entity = "works",
locations.source.host_organization = "https://openalex.org/I138006243",
#count_only = TRUE
)
View(UA_host3)
View(UA_host3)
# Filter the dataframe to get all rows where "so" is "journal of range management" (JRM) (case insenstive)
df_jrm <- subset(UA_host3, grepl("journal of range management", so, ignore.case = TRUE))
# 3,991 from JRM.
count_jrm <- nrow(df_jrm)
# Filter the dataframe to get all rows where "so" is "journal of range management" (JRM) (case insenstive)
df_jrm <- subset(UA_host3, grepl("journal of range management", so, ignore.case = TRUE))
# 3,991 from JRM.
count_jrm <- nrow(df_jrm)
# Count the number of occurrences of each unique value in the "source" column using dplyr
source_counts_df <- UA_host %>%
count(so, sort = TRUE)
# Display the dataframe with counts
print(source_counts_df)
# Count the number of occurrences of each unique value in the "source" column using dplyr
source_counts_df <- UA_host3 %>%
count(so, sort = TRUE)
# Display the dataframe with counts
# JRM/REM:  3991 + 804
# Rangelands: 685
# NA: 384
print(source_counts_df)
print(select(source_counts_df, 'id', 'so'))
(select(source_counts_df, 'id', 'so'))
library(dplyr)
(select(source_counts_df, 'id', 'so'))
View(source_counts_df)
(select(UA_host3, 'id', 'so'))
## counting DOIs
# Count rows with DOIs
count_with_doi <- sum(grepl("^10\\.", UA_hosts$URL))
## counting DOIs
# Count rows with DOIs
count_with_doi <- sum(grepl("^10\\.", UA_host3$URL))
## counting DOIs
# Count rows with DOIs
count_with_doi <- sum(grepl("^10\\.", UA_host3$url))
## counting DOIs
# Count rows with DOIs
count_with_doi <- df %>% filter(grepl("doi.org", URL, ignore.case = TRUE)) %>% nrow()
## counting DOIs
# Count rows with DOIs
count_with_doi <- UA_host3 %>% filter(grepl("doi.org", url, ignore.case = TRUE)) %>% nrow()
# Count rows without DOIs
count_without_doi <- nrow(df) - count_with_doi
# Print the counts
print(paste("Count of rows with DOI:", count_with_doi))
print(paste("Count of rows without DOI:", count_without_doi))
# Count the number of occurrences of each unique value in the "source" column using dplyr
source_counts_df <- UA_host3 %>%
count(so, sort = TRUE)
print(sourc
# Display the dataframe with counts
# JRM/REM:  4183+836 (3991 + 804 for best_oa)
# Rangelands: 782 (685 for best_oa)
# NA: 384
print(source_counts_df)
# Display the dataframe with counts
# JRM/REM:  4183+836 (3991 + 804 for best_oa)
# Rangelands: 782 (685 for best_oa)
# NA: 384
print(source_counts_df)
count2 <- UA_host3 %>% filter(grepl("10", url, ignore.case = TRUE)) %>% nrow()
count2 <- UA_host3 %>% filter(grepl("10.2458", url, ignore.case = TRUE)) %>% nrow()
ua_doi1 <- UA_host3 %>% filter(grepl("10.2458", url, ignore.case = TRUE))
View(ua_doi1)
rem_doi <- UA_host %>% filter(grepl("10.1016", url, ignore.case=TRUE))
View(rem_doi)
# All locations:
# count: 14903 (2024-07-11)
UA_host_all_location <- oa_fetch (
entity = "works",
locations.source.host_organization = "https://openalex.org/I138006243",
#count_only = TRUE
)
# Best OA location. find out host organization.
# count: 8394 (2024-07-11)
# This fetch will take a few minutes. So be patient .
UA_host_best_location <- oa_fetch(
entity = "works",
# UA campus repository ID does not work as a filter
best_oa_location.source.host_organization = "https://openalex.org/I138006243",
# If only need count, uncomment the below line for a quick run.
count_only = TRUE
# If only need some samples. using the below line.
# options = list(sample = 100, seed = 1)
)
df_rem <- subset(UA_host_all_location, grepl("Range Ecology and Management", so, ignore.case = TRUE))
# 4,183 from JRM.
count_jrm <- nrow(df_jrm) + nrow (df_rem)
# Filter the dataframe to get all rows where "so" is "journal of range management" (JRM) (case insenstive)
df_jrm <- subset(UA_host_all_location, grepl("journal of range management", so, ignore.case = TRUE))
df_rem <- subset(UA_host_all_location, grepl("Range Ecology and Management", so, ignore.case = TRUE))
#
count_jrm <- nrow(df_jrm) + nrow (df_rem)
df_rem <- subset(UA_host_all_location, grepl("Range Ecology and Management", so, ignore.case = TRUE)) # 432
#
count_jrm <- nrow(df_jrm) + nrow (df_rem)
# Count the number of occurrences of each unique value in the "source" column using dplyr
source_counts_df <- UA_host_all_location %>%
count(so, sort = TRUE)
# Display the dataframe with counts
# JRM/REM:  4183+836 (3991 + 804 for best_oa)
# Rangelands: 782 (685 for best_oa)
# NA: 384
print(source_counts_df)
### get metadata for a DOI
install.package("rcorssref")
### get metadata for a DOI
install.packages("rcorssref")
library(rcrossref)
### get metadata for a DOI
install.packages("rcrossref")
install.packages("rcrossref")
library(rcrossref)
# Function to get metadata for a DOI
get_doi_metadata <- function(doi) {
metadata <- cr_cn(doi, format = "citeproc-json")
return(metadata)
}
doi <- "https://doi.org/10.2458/v24i1.22003"
metadata <- get_doi_metadata(doi)
### get metadata for a DOI
install.packages("rcrossref")
library(rcrossref)
# Function to get metadata for a DOI
get_doi_metadata <- function(doi) {
metadata <- cr_cn(doi, format = "citeproc-json")
return(metadata)
}
doi <- "https://doi.org/10.2458/v24i1.22003"
metadata <- get_doi_metadata(doi)
# Function to get metadata for a DOI
get_doi_metadata <- function(doi) {
tryCatch({
metadata <- cr_cn(doi, format = "citeproc-json")
return(metadata)
}, error = function(e) {
message("Error retrieving metadata: ", e)
return(NULL)
})
}
doi <- "https://doi.org/10.2458/v24i1.22003"
metadata <- get_doi_metadata(doi)
# Print the metadata
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
library (httr)
library(jsonlite)
# Function to get metadata for a DOI
get_doi_metadata <- function(doi) {
url <- paste0("https://api.crossref.org/works/", doi)
response <- GET(url)
if (status_code(response) == 200) {
metadata <- content(response, as = "text", encoding = "UTF-8")
metadata <- fromJSON(metadata, flatten = TRUE)
return(metadata$message)
} else {
message("Error retrieving metadata: ", status_code(response))
return(NULL)
}
}
# Example DOI
doi <- "10.2458/v24i1.22003"
# Get metadata for the example DOI
metadata <- get_doi_metadata(doi)
# Print the metadata
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
View(metadata)
### Example 2:
doi <- "https://doi.org/10.2458/azu_jrm_v57i2_cox"
metadata <- get_doi_metadata(doi)
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
# code generated by GPT-4
# check "is_oa_anywhere" field
# Set the filter for works that are open access anywhere
oa_filter <- "is_oa_anywhere:true"
# Search for works with the specified filter
results <- oa_search(
entity = "works",
filter = oa_filter,
per_page = 100  # Adjust per_page as needed
)
### Example 2:
doi <- "https://doi.org/10.2458/azu_jrm_v57i2_cox"
metadata <- get_doi_metadata(doi)
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
View(metadata)
View(metadata)
df_rem <- subset(UA_host_all_location, grepl("Range Ecology", so, ignore.case = TRUE)) # 432
# Filter the dataframe to get all rows where "so" is "journal of range management" (JRM) (case insenstive)
df_jrm <- subset(UA_host_all_location, grepl("journal of range management", so, ignore.case = TRUE))  #4,183
df_rem <- subset(UA_host_all_location, grepl("Range Ecology", so, ignore.case = TRUE)) # 432
# Count the number of occurrences of each unique value in the "source" column using dplyr
source_counts_df <- UA_host_all_location %>%
count(so, sort = TRUE)
# common libraries
library(openalexR)
packageVersion("openalexR")
library(dplyr)
library(ggplot2)
library(knitr)
library(testthat)
library(readr)
citation("openalexR")
# check to see if openAlexR has the latest entities in OpenAlex (OpenAlex updated its data model(Entities) in June 2023)
# Before April 2023: they are [1] "works"        "authors"      "venues"       "institutions" "concepts"
# If not, need to use openalexR developer's version
oa_entities()
options (openalexR.mailto="yhan@arizona.edu")
getwd()
setwd("/home/yhan/Documents/openalexR-test")
### Test data
test_data_UAL_authors     <- c("Yan Han", "Ellen Dubinski", "Fernando Rios", "Ahlam Saleh")
test_data_COM_authors     <- c("Phillip Kuo", "Bekir Tanriover", "Ahlam Saleh")
test_data_COM_Tucson_authors <- c("Che Carrie Liu", "Robert M. Aaronson", "Alexa Aasronson", "Mohammed Abbas", "")
test_data_science_authors <- c("Marek Rychlik", "Ali Bilgin", "Beichuan Zhang")
test_data_ischool_authors <- c("Hong Cui")
test_data_others          <- c("Leila Hudson", "Mona Hymel")
test_data_not_updated_authors <-c("Karen Padilla", "Haw-chih Tai")
test_data_affiliation <- c("University of Arizona")
test_data_year <- c("2022", "2021", "2020", "2012")
# Test works
works_from_dois <- oa_fetch(entity = "works", doi = c("https://doi.org/10.1093/ofid/ofac186", "https://doi.org/10.1007/s11192-013-1221-3"),  verbose = TRUE)
### Testing three datasets citations recall and precision using one article (published in 2022)
### OpenAlex: Precision
### OpenCitaitons: Precision 100%. Recall: 2/3
### Google scholar: Precision 100%. Recall 100%
works_from_dois <- oa_fetch(entity = "works", doi = c("https://doi.org/10.6017/ital.v40i1.12553"),  verbose = TRUE)
works_from_dois$cited_by_api_url
works_from_dois$ids
# All locations:
# count: 14903 (2024-07-11)
UA_host_all_location <- oa_fetch (
entity = "works",
locations.source.host_organization = "https://openalex.org/I138006243",
#count_only = TRUE
)
View(source_counts_df)
# common libraries
library(openalexR)
packageVersion("openalexR")
library(dplyr)
library(ggplot2)
library(knitr)
library(testthat)
library(readr)
citation("openalexR")
# check to see if openAlexR has the latest entities in OpenAlex (OpenAlex updated its data model(Entities) in June 2023)
# Before April 2023: they are [1] "works"        "authors"      "venues"       "institutions" "concepts"
# If not, need to use openalexR developer's version
oa_entities()
options (openalexR.mailto="yhan@arizona.edu")
getwd()
setwd("/home/yhan/Documents/openalexR-test")
### Test data
test_data_UAL_authors     <- c("Yan Han", "Ellen Dubinski", "Fernando Rios", "Ahlam Saleh")
test_data_COM_authors     <- c("Phillip Kuo", "Bekir Tanriover", "Ahlam Saleh")
test_data_COM_Tucson_authors <- c("Che Carrie Liu", "Robert M. Aaronson", "Alexa Aasronson", "Mohammed Abbas", "")
test_data_science_authors <- c("Marek Rychlik", "Ali Bilgin", "Beichuan Zhang")
test_data_ischool_authors <- c("Hong Cui")
test_data_others          <- c("Leila Hudson", "Mona Hymel")
test_data_not_updated_authors <-c("Karen Padilla", "Haw-chih Tai")
test_data_affiliation <- c("University of Arizona")
test_data_year <- c("2022", "2021", "2020", "2012")
# Best OA location. find out host organization.
# count: 8394 (2024-07-11)
# This fetch will take a few minutes. So be patient .
UA_host_best_location <- oa_fetch(
entity = "works",
# UA campus repository ID does not work as a filter
best_oa_location.source.host_organization = "https://openalex.org/I138006243",
# If only need count, uncomment the below line for a quick run.
count_only = TRUE
# If only need some samples. using the below line.
# options = list(sample = 100, seed = 1)
)
# Primary_location.source.host_organization.
# count: 24 (2024-07-11)
UA_host2 <- oa_fetch (
entity = "works",
primary_location.source.host_organization = "https://openalex.org/I138006243",
count_only = TRUE
)
############### Use campus repository source ID.
# no result using UA campus repository source ID.
UA_host5 <- oa_fetch (
entity = "works",
best_oa_location.source.host_organization = "https://openalex.org/S2764879211",
count_only = TRUE
)
UA_host6 <- oa_fetch (
entity = "works",
locations.source.host_organization = "https://openalex.org/S2764879211",
count_only = TRUE
)
# Filter the dataframe to get all rows where "so" is "journal of range management" (JRM) (case insenstive)
df_jrm <- subset(UA_host_all_location, grepl("journal of range management", so, ignore.case = TRUE))  #4,183
df_rem <- subset(UA_host_all_location, grepl("Range Ecology", so, ignore.case = TRUE)) # 432
# Count the number of occurrences of each unique value in the "source" column using dplyr
source_counts_df <- UA_host_all_location %>%
count(so, sort = TRUE)
# Display the dataframe with counts
# JRM/REM:  4183+836 (3991 + 804 for best_oa)
# Rangelands: 782 (685 for best_oa)
# NA: 384
print(source_counts_df)
#### Example 1: More like openalex pulled directly from crossref.
###  Campus repo:
doi <- "10.2458/v24i1.22003"
metadata <- get_doi_metadata(doi)
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
library(rcrossref)
library (httr)
library(jsonlite)
# Function to get metadata for a DOI
get_doi_metadata <- function(doi) {
url <- paste0("https://api.crossref.org/works/", doi)
response <- GET(url)
if (status_code(response) == 200) {
metadata <- content(response, as = "text", encoding = "UTF-8")
metadata <- fromJSON(metadata, flatten = TRUE)
return(metadata$message)
} else {
message("Error retrieving metadata: ", status_code(response))
return(NULL)
}
}
#### Example 1: More like openalex pulled directly from crossref.
###  Campus repo:
doi <- "10.2458/v24i1.22003"
metadata <- get_doi_metadata(doi)
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
View(metadata)
### Example 3:
# https://doi.org/10.1038/ng.3667"
doi <- "https://doi.org/10.1038/ng.3667"
metadata <- get_doi_metadata(doi)
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
View(metadata)
ls
### 1.2 Getting all the works based on the institution ROR and publication date. It takes longer time.
# see above for the running time
org_works_2019 <-oa_fetch(
entity="works",
institutions.ror=c("03m2x1q45"),
from_publication_date ="2019-01-01",
to_publication_date = "2019-12-31"
)
works_cited_final <- readRDS("../2022_works_cited_type_journal.rds")
library(openalexR)
library(dplyr)
library(tidyverse)
library(writexl)
# free unused obj to manage memory
gc()
rm(list=ls())
gc()
options("max.print" = 100000)
options (openalexR.mailto="yhan@arizona.edu")
getwd()
setwd("/home/yhan/Documents/openalexR-test/")
works_cited_final <- readRDS("../2022_works_cited_type_journal.rds")
# Filter rows where issn_l is neither NA nor an empty string
articles_cited <- works_cited_final[!is.na(works_cited_final$issn_l) & works_cited_final$issn_l != "", ]
nrow(articles_cited)
### as a comparison
articles_cited2 <- works_cited_final2[!is.na(works_cited_final2$issn_l) & works_cited_final2$issn_l != "", ]
# One is primary.source.type = journal, the other (works_cited_final2) contains everything
works_cited_final2 <- readRDS("../works_cited_final_2022.rds")
difference_df1_df2 <- setdiff(works_cited_final$id, works_cited_final2$id)
difference_df2_df1 <- setdiff(works_cited_final2$id, works_cited_final$id)
head(difference_df2_df1)
# Filter rows where issn_l is neither NA nor an empty string
articles_cited <- works_cited_final[!is.na(works_cited_final$issn_l) & works_cited_final$issn_l != "", ]
nrow(articles_cited)
#############################
# Filter records where type is "article" (excluding conference paper etc )
# 2023: 226,947
non_articles_cited <- articles_cited[articles_cited$type != "article", ] # review, letter, editorial
articles_cited <- articles_cited[articles_cited$type == "article", ]
View(non_articles_cited)
articles_cited <- articles_cited[articles_cited$type == "article", ]
write_xlsx(non_articles_cited, "citations/non_articles_cited_2022.xlsx")
# Truncate strings in all character columns to 32,767 characters
non_articles_cited <- non_articles_cited %>%
mutate(across(where(is.character), ~ ifelse(nchar(.) > 32767, substr(., 1, 32767), .)))
write_xlsx(non_articles_cited, "citations/non_articles_cited_2022.xlsx")
# Trim and normalize the host_organization column
articles_cited$host_organization <- trimws(articles_cited$host_organization)
# Trim and normalize the host_organization column
articles_cited$host_organization <- trimws(articles_cited$host_organization)
# Empty or NULL records
count_null_empty_id <- sum(is.na(articles_cited$id) | trimws(articles_cited$id) == "")
count_null_empty_id
# Trim and normalize the host_organization column
articles_cited$host_organization <- trimws(articles_cited$host_organization)
# publisher: host_organization
unique_publishers <- unique(articles_cited$host_organization)
# number of publishers: ~1,600
num_unique_publishers <- length(unique_publishers)
# list top 50 publishers
print(unique_publishers[1:50])
View(articles_cited)
View(works_cited_final2)
View(works_cited_final)
# Banner-University Medical Center Tucson. 399 works.
UAUMC.df <-oa_fetch(
entity="works",
institutions.ror=c("02xbk5j62"),
from_publication_date ="2024-01-01")
View(UAUMC.df)
