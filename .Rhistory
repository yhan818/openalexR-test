works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; Not sure why there is only 1 record. I have 14 works at ORCID's website
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; Not sure why there is only 1 record. I have 14 works at ORCID's website
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
# common libraries to add
library(openalexR)
library(dplyr)
library(ggplot2)
library(knitr)
works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; Not sure why there is only 1 record. I have 14 works at ORCID's website
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
works_from_orcids |>
show_works()  |>
knitr::kable()
##### Getting authors' info using their ORCIDs
authors_from_orcids <- oa_fetch(
entity = "authors",
# orcid = c("0000-0001-9518-2684"),
orcid =  c("0000-0001-6187-6610", "0000-0002-8517-9411", "0000-0003-1613-5981") # working right
)
str(authors_from_orcids) # show the object
authors_from_orcids |>
show_authors() |>
knitr::kable()
##### Getting authors' info using their ORCIDs
authors_from_orcids <- oa_fetch(
entity = "authors",
# orcid = c("0000-0001-9518-2684"),
orcid =  c("0000-0001-6187-6610", "0000-0002-8517-9411", "0000-0003-1613-5981", "0000-0001-9518-2684") # working right
)
str(authors_from_orcids) # show the object
authors_from_orcids |>
show_authors() |>
knitr::kable()
###################### Author's name ####################################
###  use search for fuzzy name (middle name),
###  do NOT use display_name because it requires an exact match. Often there are multiple middle names for an author
authors_from_names <- oa_fetch(entity = "author",
search = "Phillip Kuo")  ### "search" syntax allowes fuzzy search for middle name
authors_from_names
authors_from_names$id
authors_from_names$affiliation_display_name
grep("Arizona*", authors_from_names$affiliation_display_name, value=TRUE, ignore.case=TRUE)
authors_from_names |>
show_authors() |>
knitr::kable()
org_args <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
# last_known_institution.id = "I71267560", # I71267560 is University of Naples Federio II OpenAlex ID
works_count = ">0"
)
View(org_args)
do.call(oa_fetch, c(org_args, list(count_only = TRUE)))
# Top authors
org_args2 <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
works_count = ">499"
)
do.call(oa_fetch, c(org_args2, list(count_only = TRUE)))
# Download the list
all_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
do.call(oa_fetch, c(org_args, list(count_only = TRUE)))
# Download the list
all_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
# Top authors
org_args2 <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
works_count = ">499"
)
do.call(oa_fetch, c(org_args2, list(count_only = TRUE)))
top_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
View(authors_from_names)
show(top_authors)
show(all_authors)
author_from_openalex_id <-oa_fetch(entity = "author",
openalex = "A4353996111" )
author_from_openalex_id
View(author_from_openalex_id)
View(author_from_openalex_id[[9]][[1]])
author_works <- oa_fetch ( entity = "works",
author.id=("A4353996111"),
verbose = TRUE
) %>%
show_works() %>%
knitr:kable()
library(knitr)
authors_from_orcids |>
show_authors() |>
knitr::kable()
author_works <- oa_fetch ( entity = "works",
author.id=("A4353996111"),
verbose = TRUE
) %>%
show_works() %>%
knitr:kable()
author_works <- oa_fetch ( entity = "works",
author.id=("A4353996111"),
verbose = TRUE
)
show_works(author_works) |> knitr:kable()
show_works(author_works)
View(author_from_openalex_id)
View(author_from_openalex_id)
View(author_works)
# common libraries to add
library(openalexR)
library(dplyr)
library(ggplot2)
library(knitr)
library(writexl)
works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; have 14 works at ORCID's website. OpenAlex does not pull works from ORCID at the moment. It pulls majorly from Microsoft academic graph
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
works_from_orcids |>
show_works()  |>
knitr::kable()
works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; have 14 works at ORCID's website. OpenAlex does not pull works from ORCID at the moment. It pulls majorly from Microsoft academic graph
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
works_from_orcids |>
show_works()  |>
knitr::kable()
### Aug 2023: Yan Han: affiliation Jilin university. Wrong
##### Getting authors' info using their ORCIDs
authors_from_orcids <- oa_fetch(
entity = "authors",
orcid =  c("0000-0001-6187-6610", "0000-0002-8517-9411", "0000-0003-1613-5981", "0000-0001-9518-2684")
)
str(authors_from_orcids) # show the object
authors_from_orcids |>
show_authors() |>
knitr::kable()
#################### Author's openAlex ID ###########################
### Sep 2023: old authorID was removed.
author_from_openalex_id <-oa_fetch(entity = "author", openalex = "A4353996111" )
###################### Author's name ####################################
###  use search for fuzzy name (middle name),
###  do NOT use display_name because it requires an exact match. Often there are multiple middle names for an author
authors_from_names <- oa_fetch(entity = "author",
search = "Phillip Kuo")  ### "search" syntax allowes fuzzy search for middle name
authors_from_names
authors_from_names$id
authors_from_names$affiliation_display_name
grep("Arizona*", authors_from_names$affiliation_display_name, value=TRUE, ignore.case=TRUE)
authors_from_names |>
show_authors() |>
knitr::kable()
# All authors
org_args <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
works_count = ">0"
)
# July 2023: 58,183 records.
# Sep 2023: 26,801 records. (Note: author disambuition system changed in Aug 2023)
do.call(oa_fetch, c(org_args, list(count_only = TRUE)))
# Download the list
all_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
show(all_authors) # already sorted by total number of works_count
# Top authors
org_args2 <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
works_count = ">499"
)
# 72 authors
do.call(oa_fetch, c(org_args2, list(count_only = TRUE)))
top_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
# common libraries
library(openalexR)
library(dplyr)
library(ggplot2)
library(knitr)
library(testthat)
options (openalexR.mailto="yhan@arizona.edu")
getwd()
setwd("/home/yhan/Documents/UA-datasets/openalexR-test")
#####################################################
# Function: Find author via his/her affiliation
#####################################################
search_author <- function(author_name, affiliation_name){
# getting data from openAlexR API
filtered_authors <- NULL
author_from_names <- oa_fetch(entity = "author", search = author_name )
if (is.null(author_from_names)) {
filtered_authors <- NULL
}
else {
# Filter out using "affiliation_display_name" column.
# other filtering fields can be "affiliation_id", "affiliation_ror"
filtered_authors <- subset(author_from_names, grepl(affiliation_name, affiliation_display_name, ignore.case=TRUE))
print(filtered_authors)
}
return (filtered_authors)
}
#####################################################
# Function: Calculate works count
#####################################################
calculate_works_count <- function(author_name, affiliation_name, year) {
# getting data from openAlexR API
author_from_names <- oa_fetch(entity = "author", search = author_name )
if (is.null(author_from_names)) {
author_stats <- NULL
}
else {
# Filter out not "University of Arizona" authors using "affiliation_display_name" column.
# other filtering fields can be "affiliation_id", "affiliation_ror"
filtered_authors <- subset(author_from_names, grepl(affiliation_name, affiliation_display_name, ignore.case=TRUE))
print(filtered_authors)
# If NOT found the author, return NULL
if (nrow(filtered_authors) == 0 )  {
author_stats <- NULL
}
else {
# works_count is a list, getting "counts_by_year" column
works_count  <- filtered_authors$counts_by_year
print(works_count)
works_sum_year <- 0
total_works_sum_year <- 0
# cited_by_count is a list
cited_by_count <- filtered_authors$cited_by_count
cited_sum_year <- 0
total_cited_sum_year <-0
# check the works_count
for (i in 1:length(works_count)) {
# Access the data frame within the list
df <- works_count[[i]]
if (is.data.frame(df)) {
# Filter the data frame by year
filtered_df_year <- df[df$year == year, ]
# Calculate the sum of the filtered 'works_count' column
works_sum_year <- sum(filtered_df_year$works_count)
total_works_sum_year <- total_works_sum_year + works_sum_year
# Calculate the sum of the filtered 'cited_by_count' column
cited_sum_year <- sum(filtered_df_year$cited_by_count)
total_cited_sum_year <- total_cited_sum_year + cited_sum_year
# reset this number to 0 after each iteration
works_sum_year <- 0
cited_sum_year <- 0
} else {
##### Note: If you see error msg: Error: $ operator is invalid for atomic vectors
# That means certain works_count  is logical and has no data
print("This is NOT a dataframe. Data Wrong")
# set value as -1 for warning message
Total_sum_of_works = -1
Total_cited_sum_year = -1
}
} # for loop
# Build output dataframe author_stats
author_stats <-data.frame (
Name = author_name,
OpenAlexId = filtered_authors$id,
Year = year,
Total_sum_of_works = total_works_sum_year,
Total_sum_of_cited = total_cited_sum_year
)
# reset the var after done
total_works_sum_year <- 0
total_cited_sum_year <- 0
} # if
return (author_stats)
}
}
#############################################################
# check to see if openAlexR has the latest entities in OpenAlex (OpenAlex updated its data model(Entities) in June 2023)
# Before April 2023: they are [1] "works"        "authors"      "venues"       "institutions" "concepts"
# If not, need to use openalexR developer's version
oa_entities()
############################## ORCID as filter ####################################
# Download all works published by a set of authors using ORCIDs
# use author.orcid as a filter
# https://api.openalex.org/authors/https://orcid.org/0000-0001-9518-2684
### NOTE: May 2023, Not all the works are there, NEED TO discuss with OpenAlex. Most likely the disambigation alg not working well. https://docs.openalex.org/api-entities/authors
### NOTE: Aug 2023, OpenAlex has a new author data with a new disambiguation model. It is getting better but there are still some bugs/errors.
### Example: Aug 2023, there are 80 works associated with "0000-0001-9518-2684". About 40 works are NOT authored by me. (My works are all written in English. For some reason, these works are NOT pulled from ORCID)
### NOTE: Jan 2024, ORCID 0000-0001-9518-2684 returns "No records found!"
works_from_orcids <- oa_fetch(
entity = "works",
#author.orcid = c("0000-0001-9518-2684"),
author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
########################### Author matching criteria: 1) starting with ORCID; 2) using latest publication's affiliations 3)
#### July 2023:  Bekir affiliation shows "Columbia University", which is wrong. He (2009-2013) is at Columbia Univeristy, then he moved to UT Southwestern, and now he is at UA
#### Aug 11, 2023: Bekir affiliation shows "University of Arizona", which is correct now.
author_from_names <- oa_fetch(entity = "author", search = "Bekir Tanriover" )
### July 2023, "Karen Padilla" affiliated with "University of Arizona"
### Aug 11, 2023: "Karen Padilla" affiliated with "University of Arizona"
author_from_names <- oa_fetch(entity = "author", search = "Karen Padilla" )
### Aug 11, 2023: Results contain wrong info (Haitong Tai: https://openalex.org/A5060511275 ) affiliation not updated yet (probably based on last publication's affiliation)
author_from_names <- oa_fetch(entity = "author", search = "Haw-chih Tai")
#### This authorID upgrade does show my work/citation seems right with affiliation. There are 692 obs of "Yan Han". Most have ORCIDs.
### Aug 2023: Yan Han: affiliation Jilin university. Wrong.
author_from_names <- oa_fetch(entity = "author", search = "Yan Han")
author_from_names <- search_author("Yan Han", "University of Arizona")
#### This upgrade found and contains Hong Cui's ID and correct affiliation. but needs further filtering via affiliation
author_from_names <- oa_fetch(entity = "author", search = "Hong Cui")
# R does not have LDAP packages??
# clean all objects from the environment to start
rm(list = ls())
################### Test data
test_data_UAL_authors     <- c("Yan Han", "Ellen Dubinski", "Fernando Rios", "Ahlam Saleh")
test_data_COM_authors     <- c("Phillip Kuo", "Bekir Tanriover", "Ahlam Saleh")
test_data_COM_Tucson_authors <- c("Che Carrie Liu", "Robert M. Aaronson", "Alexa Aasronson", "Mohammed Abbas", "")
test_data_science_authors <- c("Marek Rychlik", "Ali Bilgin", "Beichuan Zhang")
test_data_ischool_authors <- c("Hong Cui")
test_data_others          <- c("Leila Hudson", "Mona Hymel")
test_data_not_updated_authors <-c("Karen Padilla", "Haw-chih Tai")
test_data_affiliation <- c("University of Arizona")
# First get a list of all the authors in this dept. The list is saved in a CSV with col 1 "surname" and 2 "first_name"
library(readr)
################### Function ######################
get_dept_author_data <- function(dept_code, affiliation_name) {
file_path <- sprintf("%s_common.csv", dept_code)
if (!file.exists(file_path)) {
stop("File not found: ", file_path)
}
LDAPdata <- read_csv(file_path)
authors_names <- LDAPdata[, c('cn')]
dept_results <- list()
#author_name <- ""
#affiliation_name <- ""
for (i in 1: nrow(authors_names) ) {
# Access the current row
author_name <- authors_names[i]
print (paste(author_name, affiliation_name))
author_result_affiliation <- search_author(author_name, affiliation_name )
author_stats              <- calculate_works_count(author_name, affiliation_name, 2022)
# Check if any of the results are NULL or have zero rows; handle accordingly
if (is.null(author_result_affiliation) || nrow(author_result_affiliation) == 0) {
author_result_affiliation <- NA  # or some other placeholder value
}
if (is.null(author_stats) || length(author_stats) == 0) {
author_stats <- NA  # or some other placeholder value
}
# Append the results to the list
dept_results[[i]] <- data.frame(author_name = author_name,
author_result_affiliation = author_result_affiliation,
author_stats = author_stats)
}
return (dept_results)
}
dept_code <- readline(prompt = "Please enter the department code: ")
affiliation_name <- readline(prompt = "Please enter the affiliation: ")
dept1 <-results <- get_dept_author_data(dept_code, affiliation_name)
#####################################################
# Function: Find author via his/her affiliation
#####################################################
search_author <- function(author_name, affiliation_name){
# getting data from openAlexR API
filtered_authors <- NULL
author_from_names <- oa_fetch(entity = "author", search = author_name )
if (is.null(author_from_names)) {
filtered_authors <- NULL
}
else {
# Filter out using "affiliation_display_name" column.
# other filtering fields can be "affiliation_id", "affiliation_ror"
filtered_authors <- subset(author_from_names, grepl(affiliation_name, affiliation_display_name, ignore.case=TRUE))
print(filtered_authors)
}
return (filtered_authors)
}
dept1 <-results <- get_dept_author_data(dept_code, affiliation_name)
#####################################################
# Function: Calculate works count
#####################################################
calculate_works_count <- function(author_name, affiliation_name, year) {
# getting data from openAlexR API
author_from_names <- oa_fetch(entity = "author", search = author_name )
if (is.null(author_from_names)) {
author_stats <- NULL
}
else {
# Filter out not "University of Arizona" authors using "affiliation_display_name" column.
# other filtering fields can be "affiliation_id", "affiliation_ror"
filtered_authors <- subset(author_from_names, grepl(affiliation_name, affiliation_display_name, ignore.case=TRUE))
print(filtered_authors)
# If NOT found the author, return NULL
if (nrow(filtered_authors) == 0 )  {
author_stats <- NULL
}
else {
# works_count is a list, getting "counts_by_year" column
works_count  <- filtered_authors$counts_by_year
print(works_count)
works_sum_year <- 0
total_works_sum_year <- 0
# cited_by_count is a list
cited_by_count <- filtered_authors$cited_by_count
cited_sum_year <- 0
total_cited_sum_year <-0
# check the works_count
for (i in 1:length(works_count)) {
# Access the data frame within the list
df <- works_count[[i]]
if (is.data.frame(df)) {
# Filter the data frame by year
filtered_df_year <- df[df$year == year, ]
# Calculate the sum of the filtered 'works_count' column
works_sum_year <- sum(filtered_df_year$works_count)
total_works_sum_year <- total_works_sum_year + works_sum_year
# Calculate the sum of the filtered 'cited_by_count' column
cited_sum_year <- sum(filtered_df_year$cited_by_count)
total_cited_sum_year <- total_cited_sum_year + cited_sum_year
# reset this number to 0 after each iteration
works_sum_year <- 0
cited_sum_year <- 0
} else {
##### Note: If you see error msg: Error: $ operator is invalid for atomic vectors
# That means certain works_count  is logical and has no data
print("This is NOT a dataframe. Data Wrong")
# set value as -1 for warning message
Total_sum_of_works = -1
Total_cited_sum_year = -1
}
} # for loop
# Build output dataframe author_stats
author_stats <-data.frame (
Name = author_name,
OpenAlexId = filtered_authors$id,
Year = year,
Total_sum_of_works = total_works_sum_year,
Total_sum_of_cited = total_cited_sum_year
)
# reset the var after done
total_works_sum_year <- 0
total_cited_sum_year <- 0
} # if
return (author_stats)
}
}
dept1 <-results <- get_dept_author_data(dept_code, affiliation_name)
################### Function ######################
get_dept_author_data <- function(dept_code, affiliation_name) {
file_path <- sprintf("%s_common.csv", dept_code)
if (!file.exists(file_path)) {
stop("File not found: ", file_path)
}
LDAPdata <- read_csv(file_path, show_col_types = FALSE)
authors_names <- LDAPdata$cn
dept_results <- list()
#author_name <- ""
#affiliation_name <- ""
for (i in 1: nrow(authors_names) ) {
# Access the current row
author_name <- authors_names[i]
print (paste(author_name, affiliation_name))
author_result_affiliation <- search_author(author_name, affiliation_name )
author_stats              <- calculate_works_count(author_name, affiliation_name, 2022)
# Check if any of the results are NULL or have zero rows; handle accordingly
if (is.null(author_result_affiliation) || nrow(author_result_affiliation) == 0) {
author_result_affiliation <- NA  # or some other placeholder value
}
if (is.null(author_stats) || length(author_stats) == 0) {
author_stats <- NA  # or some other placeholder value
}
# Append the results to the list
dept_results[[i]] <- data.frame(author_name = author_name,
author_result_affiliation = author_result_affiliation,
author_stats = author_stats)
}
return (dept_results)
}
dept1 <-results <- get_dept_author_data(dept_code, affiliation_name)
