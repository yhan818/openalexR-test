}
if (!is.numeric(level) || length(level) != 1 || level < 1 || level != as.integer(level)) {
stop("'level' must be a positive integer.")
}
# --- 1. Prepare the topics data (unnest, filter, combine) ---
topics_prepared <- data %>%
select(id, title, topics) %>%  # Select id, title and topics
# Rename nested 'id' for safety, handle non-data.frame cases
mutate(topics = map(topics, ~{
if (is.data.frame(.x) && "id" %in% names(.x)) {
rename(.x, topic_id = id)
} else {
.x
}
})) %>%
unnest(cols = c(topics), keep_empty = TRUE) %>%  # keep_empty = TRUE
filter(i == level) %>%
mutate(combined_name = ifelse(!is.na(name) & !is.na(display_name),
str_c(name, ": ", display_name),
NA_character_)) %>% # Handle potential NA in name/display_name
select(id, title, combined_name)
# Handle empty results *before* joining
if (nrow(topics_prepared) == 0) {
warning(paste("No data found for level", level,
". Returning original data frame with 'combined_output' column as NA."))
return(data %>% mutate(combined_output = NA_character_))
}
# --- 2. Summarize (combine topics for the same title) ---
topics_summarized <- topics_prepared %>%
group_by(id, title) %>%
summarize(combined_output = paste(unique(combined_name), collapse = ", "), .groups = "drop")
# --- 3. Left Join ---
final_data <- data %>%
left_join(topics_summarized, by = c("id", "title"))
return(final_data)
}
# use:
works_cited_type_articles_publisher <- works_cited_type_articles_brill
primary_topics <- extract_topics_by_level(works_cited_type_articles_publisher, 1)
View(primary_topics)
extract_topics_by_level <- function(data, level = 1) {
# --- Input Validation ---
if (!is.data.frame(data)) {
stop("'data' must be a data frame.")
}
if (!("topics" %in% names(data))) {
stop("The 'topics' column is missing from the input data frame.")
}
if (!is.numeric(level) || length(level) != 1 || level < 1 || level != as.integer(level)) {
stop("'level' must be a positive integer.")
}
# --- 1. Prepare the topics data (unnest, filter, combine) ---
topics_prepared <- data %>%
select(id, title, topics) %>%  # Select id, title and topics
# Rename nested 'id' for safety, handle non-data.frame cases
mutate(topics = map(topics, ~{
if (is.data.frame(.x) && "id" %in% names(.x)) {
rename(.x, topic_id = id)
} else {
.x
}
})) %>%
unnest(cols = c(topics), keep_empty = TRUE) %>%  # keep_empty = TRUE
filter(i == level) %>%
mutate(combined_name = ifelse(!is.na(name) & !is.na(display_name),
str_c(name, ": ", display_name),
NA_character_)) %>% # Handle potential NA in name/display_name
select(id, title, combined_name)
# Handle empty results *before* joining
if (nrow(topics_prepared) == 0) {
warning(paste("No data found for level", level,
". Returning original data frame with 'combined_output' column as NA."))
return(data %>% mutate(combined_output = NA_character_))
}
# --- 2. Summarize (combine topics for the same title) ---
topics_summarized <- topics_prepared %>%
group_by(id, title) %>%
summarize(topics = paste(unique(combined_name), collapse = ", "), .groups = "drop")
# --- 3. Left Join ---
final_data <- data %>%
left_join(topics_summarized, by = c("id", "title"))
return(final_data)
}
# use:
works_cited_type_articles_publisher <- works_cited_type_articles_brill
primary_topics <- extract_topics_by_level(works_cited_type_articles_publisher, 1)
View(primary_topics)
View(primary_topics[[38]][[1]])
View(primary_topics[[37]][[2]])
View(primary_topics)
View(primary_topics[[38]][[1]])
View(primary_topics[[38]][[10]])
works_cited_2022 <- readRDS("../works_cited_2022.rds")
second_topics  <- extract_topics_by_level(works_cited_type_articles_publisher, 2)
View(second_topics)
View(second_topics[[38]][[2]])
works_cited <- works_cited_2022
works_cited_type_articles    <- subset(works_cited, type == "article")
unique(works_cited_type_articles$type)
unique_issns <- unique(works_cited_type_articles$issn_l)
number_of_unique_issns <- length(unique_issns)
works_cited_type_nonarticles <- subset(works_cited, type != "article")
unique(works_cited_type_nonarticles$type)
unique_issns2 <- unique(works_cited_type_nonarticles$issn_l)
number_of_unique_issns2 <- length(unique_issns2)
# Criteria: article and nonarticle.
works_cited_type_articles_brill <- works_cited_type_articles %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_cited_type_nonarticles_brill <- works_cited_type_nonarticles %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_published_brill <- works_published %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_cited_type_articles_brill_2022 <- works_cited_type_articles_brill
works_cited <- works_cited_2023
works_cited_type_articles    <- subset(works_cited, type == "article")
unique(works_cited_type_articles$type)
unique_issns <- unique(works_cited_type_articles$issn_l)
number_of_unique_issns <- length(unique_issns)
works_cited_type_nonarticles <- subset(works_cited, type != "article")
unique(works_cited_type_nonarticles$type)
unique_issns2 <- unique(works_cited_type_nonarticles$issn_l)
number_of_unique_issns2 <- length(unique_issns2)
# Criteria: article and nonarticle.
works_cited_type_articles_brill <- works_cited_type_articles %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_cited_type_nonarticles_brill <- works_cited_type_nonarticles %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_published_brill <- works_published %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
# bind 2022 and 2023 data
works_cited_type_articles_brill_2023 <- works_cited_type_articles_brill
works_cited_type_articles_brill_2022_2023 <- bind_rows(works_cited_type_articles_brill_2023, works_cited_type_articles_brill_2022)
rank_top_cited_journals(works_cited_type_articles_brill_2022_2023, "so", 200)
works_cited_type_articles_brill_combined_2022_2023<- extract_topics_by_level(works_cited_type_articles_brill_2022_2023, 1)
View(works_cited_type_articles_brill_combined_2022_2023)
write_df_to_excel(works_cited_type_articles_brill_combined2022_2023)
write_df_to_excel(works_cited_type_articles_brill_combined_2022_2023)
rank_top_cited_journals <- function(data, journal_col, top_n = 30, output_dir = "citations") {
if (!is.data.frame(data)) {
stop("Input 'data' must be a data.frame or tibble.")
}
if (!is.character(journal_col) || length(journal_col) != 1) {
stop("Input 'journal_col' must be a single string.")
}
if (!(journal_col %in% names(data))) {
stop("journal_col is not found")
}
top_cited_journals <- data %>%
group_by(!!sym(journal_col)) %>%
summarise(citation_count = n(), .groups = "drop") %>%
arrange(desc(citation_count)) %>%
rename("Journal Title" = !!sym(journal_col))
# Print all rows if top_n is NULL or larger than number of rows
if (is.null(top_n) || top_n >= nrow(top_cited_journals)) {
print(as.data.frame(top_cited_journals))  # Convert to data.frame and print all
} else {
# Print only the requested top_n journals.
print(head(as.data.frame(top_cited_journals), top_n))
top_cited_journals <- top_cited_journals %>%
slice(1:top_n) #keep top_n for writing to file
}
# --- File Output ---
# Get the name of the input data frame
df_name <- deparse(substitute(data))
# Create the output file path
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
output_file <- file.path(output_dir, paste0(df_name, "_top_cited_journals.xlsx"))
# Write to Excel
tryCatch({
write_xlsx(list("Top Cited Journals" = as.data.frame(top_cited_journals)), output_file)
message(paste("Successfully wrote top cited journals to:", output_file))
}, error = function(e) {
message(paste("Error writing to Excel:", e))
print(e)  # Print the full error object
})
return(top_cited_journals)
}
# Write df to excel files
write_df_to_excel <- function(df, file_path_prefix = "citations/") {
df_name <- deparse(substitute(df))
file_name <- paste0(df_name, ".xlsx")
file_path <- paste0(file_path_prefix, file_name)
sheet_name <- df_name
# Limit sheet name to 31 characters, replacing invalid characters
sheet_name <- gsub("[[:punct:]]", "_", sheet_name) # Replace punctuation
sheet_name <- substr(sheet_name, 1, 31)       # Truncate
tryCatch({
write_xlsx(df, file_path)
message(paste("Successfully wrote", df_name, "to", file_path))
}, error = function(e) {
message(paste("Error writing", df_name, "to Excel:", e))
print(e)
})
}
write_df_to_excel(works_cited_type_articles_brill_combined_2022_2023)
excel_files <- c("citations/works_cited_type_articles_brill_combined_2022_2023.xlsx", "citations/brill_2022_2023_top_cited_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
sheet_name <-substr(sheet_name, 1, 31)  # Truncate to 31 chars for worksheet
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
### Test data for Brill: 2025-02
## 2022: search journals articles do UA authors cited.
search_string <- "https://openalex.org/W2176010001"
search_references(search_string, works_cited_type_articles_brill_2022_2023)
###############################################################
# Verify any cited work using the function search_references()
# Define the function to search for a string in the referenced_works column and print the output
##############################################3
search_references <- function(search_string, df) {
indices_with_string <- which(sapply(df$referenced_works, function(x) search_string %in% x))
print(indices_with_string)
print(df[indices_with_string, ]$id)
}
search_references(search_string, works_cited_type_articles_brill_2022_2023)
source("my_functions.R")
works_published_2023 <- readRDS("../works_published_2023.rds")
# to filter "journal" works only. I feel it shall not be this restrict. (other works like grey literature are good too)
works_published <- works_published_2023
View(works_cited_type_articles_brill)
works_published_ref <- unique(works_published_ref) # this actually also remove NA lists.
####################################################
##### 2. Checking and verifying data
##### 2.1 Route 1: Getting citation data from $referenced_works
##### Route 2: Getting author's data?
###### change this line only to update the right dataset.
works_published_ref <- works_published$referenced_works
works_published_ref <- unique(works_published_ref) # this actually also remove NA lists.
# rm(works_published_ref_combined)
works_published_ref_combined <- unlist(works_published_ref, use.names = FALSE)
works_published_ref_combined <- works_published_ref_combined[!is.na(works_published_ref_combined)]  # Remove NA values
# Use sapply to find matching elements in the works_published_ref for testing.
matching_indices <- which(sapply(works_published_ref_combined, function(x)
any(x %in% c("https://openalex.org/W4210835162", "https://openalex.org/W1548779692")))) # https://openalex.org/W1624352668 were cited on 2021 and 2023 data
print(matching_indices)
View(works_cited_type_articles_brill_2023)
View(works_cited_type_articles_brill_2022)
View(works_cited_type_articles_brill_2022)
# Use sapply to find matching elements in the works_published_ref for testing.
matching_indices <- which(sapply(works_published_ref_combined, function(x)
any(x %in% c("https://openalex.org/W4210835162", "https://openalex.org/W2944198613")))) # https://openalex.org/W1624352668 were cited on 2021 and 2023 data
print(matching_indices)
### 3.33 Testing if a cited work is found.
# Deep Learning, Nature, by Yann LeCun, Yoshua Bengio, Geoffrey Hinton. Cited by: 62,210
search_string <- "https://openalex.org/W2919115771"
result <- lapply(works_published_ref_combined, function(x) grep(search_string, x, value = TRUE))
matches <- result[sapply(result, length) > 0]
indices <- which(sapply(works_published_ref_combined, function(x) any(grepl(search_string, x))))
for (i in indices) {
cat("Index:", i, "\n")
cat("Element:\n", works_published_ref_combined[[i]], "\n\n")
}
# Find it from the original article
search_string <- "https://openalex.org/W2594545996"
# this article was cited 81 (2019, 130 (2020), 90 (2021), 52 (2022), 16 (2023)
indices_with_string <- which(sapply(works_published$referenced_works, function(x) search_string %in% x))
print(indices_with_string)
works_published[indices_with_string, ]$id
# test case 2: cited 6 from microbiology, multiple times for 2019, 2020, 2021, 2022
# both final published version and pre-print existing: https://openalex.org/works/W4379795917 and https://openalex.org/W4319339791
search_string <- "https://openalex.org/W4210835162"
indices_with_string <- which(sapply(works_published$referenced_works, function(x) search_string %in% x))
print(indices_with_string)
works_published[indices_with_string, ]$id
# test case 2: cited 6 from microbiology, multiple times for 2019, 2020, 2021, 2022
# both final published version and pre-print existing: https://openalex.org/works/W4379795917 and https://openalex.org/W4319339791
search_string <- "https://openalex.org/W2944198613"
indices_with_string <- which(sapply(works_published$referenced_works, function(x) search_string %in% x))
print(indices_with_string)
works_published[indices_with_string, ]$id
# test case 2: cited 6 from microbiology, multiple times for 2019, 2020, 2021, 2022
# both final published version and pre-print existing: https://openalex.org/works/W4379795917 and https://openalex.org/W4319339791
search_string <- "https://openalex.org/W2153919737"
indices_with_string <- which(sapply(works_published$referenced_works, function(x) search_string %in% x))
print(indices_with_string)
works_published[indices_with_string, ]$id
View(works_cited_type_articles_brill[[38]][[1]])
extract_topics_by_level <- function(data, level = 1) {
# --- Input Validation ---
if (!is.data.frame(data)) {
stop("'data' must be a data frame.")
}
if (!("topics" %in% names(data))) {
stop("The 'topics' column is missing from the input data frame.")
}
if (!is.numeric(level) || length(level) != 1 || level < 1 || level != as.integer(level)) {
stop("'level' must be a positive integer.")
}
# --- Data Extraction ---
extracted_data <- data %>%
select(id, title, topics) %>%
# Rename the nested 'id' column *before* unnesting
mutate(topics = map(topics, ~{
if (is.data.frame(.x) && "id" %in% names(.x)) {
rename(.x, topic_id = id)
} else {
.x
}
})) %>%
unnest(cols = c(topics)) %>%
filter(i == level) %>%
# Select the relevant info
select(id, title, level_name = name, display_name)
# Handle the case where no rows match the level
if (nrow(extracted_data) == 0) {
warning(paste("No data found for level", level,
". Returning an empty data frame with appropriate columns."))
# Create an empty data frame with the correct structure
empty_df <- data %>%
select(id, title) %>%  # Keep id and title
mutate(topic = NA_character_,
subfield = NA_character_,
field = NA_character_,
domain = NA_character_)
return(empty_df)
}
# Pivot wider to create separate columns for each level_name
extracted_data <- extracted_data %>%
pivot_wider(id_cols = c(id, title), names_from = level_name, values_from = display_name, values_fn = ~paste(.x, collapse = ", "))
# --- Left Join ---
final_data <- data %>%
left_join(extracted_data, by = c("id", "title"))  # Join back to original data
return(final_data)
}
# use:
works_cited_type_articles_publisher <- works_cited_type_articles_brill
primary_topics <- extract_topics_by_level(works_cited_type_articles_publisher, 1)
View(primary_topics)
View(primary_topics[[38]][[1]])
View(primary_topics[[38]][[7]])
View(primary_topics[[38]][[14]])
second_topics  <- extract_topics_by_level(works_cited_type_articles_publisher, 2)
View(second_topics)
View(second_topics[[38]][[2]])
third_topics   <- extract_topics_by_level(works_cited_type_articles_publisher, 3)
fourth_topics  <- extract_topics_by_level(works_cited_type_articles_publisher, 4)
View(third_topics)
View(third_topics[[38]][[6]])
View(third_topics[[38]][[26]])
View(fourth_topics)
View(primary_topics[[38]][[42]])
View(primary_topics[[38]][[43]])
View(second_topics[[38]][[2]])
View(second_topics[[38]][[2]])
View(second_topics[[38]][[3]])
View(second_topics)
View(second_topics[[38]][[65]])
View(second_topics[[38]][[99]])
works_cited_type_articles_brill_combined_2022_2023<- extract_topics_by_level(works_cited_type_articles_brill_2022_2023, 1)
write_df_to_excel(works_cited_type_articles_brill_combined_2022_2023)
excel_files <- c("citations/works_cited_type_articles_brill_combined_2022_2023.xlsx", "citations/brill_2022_2023_top_cited_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
sheet_name <-substr(sheet_name, 1, 31)  # Truncate to 31 chars for worksheet
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
View(primary_topics)
View(primary_topics[[38]][[1]])
primary_topics <- extract_topics_by_level(works_cited_type_articles_publisher, 1)
View(primary_topics)
View(primary_topics[[38]][[1]])
rm(works_cited_type_articles_brill_combined_2022_2023)
works_cited_type_articles_brill_combined_2022_2023<- extract_topics_by_level(works_cited_type_articles_brill_2022_2023, 1)
write_df_to_excel(works_cited_type_articles_brill_combined_2022_2023)
excel_files <- c("citations/works_cited_type_articles_brill_combined_2022_2023.xlsx", "citations/brill_2022_2023_top_cited_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
sheet_name <-substr(sheet_name, 1, 31)  # Truncate to 31 chars for worksheet
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
View(primary_topics)
View(primary_topics[[38]][[1]])
View(works_cited_type_articles_brill_combined_2022_2023)
View(works_cited_type_articles_brill_2022)
rm(works_cited_type_articles_brill_2023)
# bind 2022 and 2023 data
works_cited_type_articles_brill_2023 <- works_cited_type_articles_brill
rm(works_cited_type_articles_brill_2022_2023)
works_cited_type_articles_brill_2022_2023 <- bind_rows(works_cited_type_articles_brill_2023, works_cited_type_articles_brill_2022)
works_cited_type_articles_brill_combined_2022_2023<- extract_topics_by_level(works_cited_type_articles_brill_2022_2023, 1)
View(works_cited_type_articles_brill_combined_2022_2023)
View(works_cited_type_articles_brill_combined_2022_2023[[38]][[27]])
rm(works_cited_type_articles_brill_combined_2022_2023)
works_cited_type_articles_brill_2022_temp <- extract_topics_by_level(works_cited_type_articles_brill_2022, 1)
works_cited_type_articles_brill_2023_temp <- extract_topics_by_level(works_cited_type_articles_brill_2023, 1)
View(works_cited_type_articles_brill_2022_temp)
View(primary_topics)
extract_topics_by_level <- function(data, level = 1) {
# --- Input Validation ---
if (!is.data.frame(data)) {
stop("'data' must be a data frame.")
}
if (!("topics" %in% names(data))) {
stop("The 'topics' column is missing from the input data frame.")
}
if (!is.numeric(level) || length(level) != 1 || level < 1 || level != as.integer(level)) {
stop("'level' must be a positive integer.")
}
# --- Data Extraction ---
extracted_data <- data %>%
select(id, title, topics) %>%
# Rename the nested 'id' column *before* unnesting
mutate(topics = map(topics, ~{
if (is.data.frame(.x) && "id" %in% names(.x)) {
rename(.x, topic_id = id)
} else {
.x
}
})) %>%
unnest(cols = c(topics)) %>%
filter(i == level) %>%
# Select the relevant info
select(id, title, level_name = name, display_name)
# Handle the case where no rows match the level
if (nrow(extracted_data) == 0) {
warning(paste("No data found for level", level,
". Returning an empty data frame with appropriate columns."))
# Create an empty data frame with the correct structure
empty_df <- data %>%
select(id, title) %>%  # Keep id and title
mutate(topic = NA_character_,
subfield = NA_character_,
field = NA_character_,
domain = NA_character_)
return(empty_df)
}
# Pivot wider to create separate columns for each level_name
extracted_data <- extracted_data %>%
pivot_wider(id_cols = c(id, title), names_from = level_name, values_from = display_name, values_fn = ~paste(unique(.x), collapse = ", "))
# --- Left Join ---
final_data <- data %>%
left_join(extracted_data, by = c("id", "title"))  # Join back to original data
return(final_data)
}
# use:
works_cited_type_articles_publisher <- works_cited_type_articles_brill
primary_topics <- extract_topics_by_level(works_cited_type_articles_publisher, 1)
View(primary_topics)
works_cited_type_articles_brill_2022_2023 <- bind_rows(works_cited_type_articles_brill_2023, works_cited_type_articles_brill_2022)
works_cited_type_articles_brill_combined_2022_2023 <- extract_topics_by_level(works_cited_type_articles_brill_2022_2023, 1)
View(works_cited_type_articles_brill_combined_2022_2023)
excel_files <- c("citations/works_cited_type_articles_brill_combined_2022_2023.xlsx", "citations/brill_2022_2023_top_cited_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
sheet_name <-substr(sheet_name, 1, 31)  # Truncate to 31 chars for worksheet
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
write_df_to_excel(works_cited_type_articles_brill_combined_2022_2023)
# 2. Combine Excel Files
excel_files <- c("citations/works_cited_type_articles_brill_combined_2022_2023.xlsx", "citations/brill_2022_2023_top_cited_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
sheet_name <-substr(sheet_name, 1, 31)  # Truncate to 31 chars for worksheet
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
View(works_cited_type_articles_brill_combined_2022_2023)
View(works_cited_type_articles_brill_combined_2022_2023[[38]][[31]])
second_topics  <- extract_topics_by_level(primary_topics, 2)
View(second_topics)
View(second_topics[[38]][[5]])
