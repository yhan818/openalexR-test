if (!is.character(journal_col) || length(journal_col) != 1) {
stop("Input 'journal_col' must be a single string.")
}
if (!(journal_col %in% names(data))) {
stop("journal_col is not found")
}
top_cited_journals <- data %>%
group_by(!!sym(journal_col)) %>%
summarise(citation_count = n(), .groups = "drop") %>%
arrange(desc(citation_count)) %>%
rename("Journal Title" = !!sym(journal_col))
# Print all rows if top_n is NULL or larger than number of rows
if (is.null(top_n) || top_n >= nrow(top_cited_journals)) {
print(as.data.frame(top_cited_journals))  # Convert to data.frame and print all
} else {
# Print only the requested top_n journals.
print(head(as.data.frame(top_cited_journals), top_n))
top_cited_journals <- top_cited_journals %>%
slice(1:top_n) #keep top_n for writing to file
}
# --- File Output ---
# Get the name of the input data frame
df_name <- deparse(substitute(data))
# Create the output file path
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
output_file <- file.path(output_dir, paste0(df_name, "_top_cited_journals.xlsx"))
# Write to Excel
tryCatch({
write_xlsx(list("Top Cited Journals" = as.data.frame(top_cited_journals)), output_file)
message(paste("Successfully wrote top cited journals to:", output_file))
}, error = function(e) {
message(paste("Error writing to Excel:", e))
print(e)  # Print the full error object
})
return(top_cited_journals)
}
# Criteria: article and nonarticle.
works_cited_type_articles_brill <- works_cited_type_articles %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_cited_type_nonarticles_brill <- works_cited_type_nonarticles %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_published_brill <- works_published %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
# bind 2022 and 2023 data
works_cited_type_articles_brill_2023 <- works_cited_type_articles_brill
rank_top_cited_journals(works_cited_type_articles_brill, "so", 200)
rank_top_cited_journals(works_cited_type_articles_brill_2023, "so", 200)
works_cited <- works_cited_2022
works_cited_type_articles    <- subset(works_cited, type == "article")
unique(works_cited_type_articles$type)
unique_issns <- unique(works_cited_type_articles$issn_l)
number_of_unique_issns <- length(unique_issns)
works_cited_type_nonarticles <- subset(works_cited, type != "article")
unique(works_cited_type_nonarticles$type)
unique_issns2 <- unique(works_cited_type_nonarticles$issn_l)
number_of_unique_issns2 <- length(unique_issns2)
works_cited <- works_cited_2022
works_cited_type_articles    <- subset(works_cited, type == "article")
unique(works_cited_type_articles$type)
unique_issns <- unique(works_cited_type_articles$issn_l)
number_of_unique_issns <- length(unique_issns)
works_cited_type_nonarticles <- subset(works_cited, type != "article")
unique(works_cited_type_nonarticles$type)
unique_issns2 <- unique(works_cited_type_nonarticles$issn_l)
number_of_unique_issns2 <- length(unique_issns2)
works_cited <- works_cited_2023
works_cited_type_articles    <- subset(works_cited, type == "article")
works_cited <- works_cited_2022
works_cited_type_articles    <- subset(works_cited, type == "article")
unique(works_cited_type_articles$type)
unique_issns <- unique(works_cited_type_articles$issn_l)
number_of_unique_issns <- length(unique_issns)
works_cited_type_nonarticles <- subset(works_cited, type != "article")
unique(works_cited_type_nonarticles$type)
unique_issns2 <- unique(works_cited_type_nonarticles$issn_l)
number_of_unique_issns2 <- length(unique_issns2)
# Criteria: article and nonarticle.
works_cited_type_articles_brill <- works_cited_type_articles %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_cited_type_nonarticles_brill <- works_cited_type_nonarticles %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_published_brill <- works_published %>%
filter(grepl("Brill", host_organization, ignore.case = TRUE))
works_cited_type_articles_brill_2022 <- works_cited_type_articles_brill
rank_top_cited_journals(works_cited_type_articles_brill_2022, "so", 200)
works_cited_type_articles_brill_2022_2023 <- bind_rows(works_cited_type_articles_brill_2022, works_cited_type_articles_brill_2022)
works_cited_type_articles_brill_2022_2023 <- bind_rows(works_cited_type_articles_brill_2023, works_cited_type_articles_brill_2022)
rank_top_cited_journals(works_cited_type_articles_brill_2022_2023, "so", 200)
### Step 5: Final output to Excel
write_df_to_excel <- function(df, file_path_prefix = "citations/") {
df_name <- deparse(substitute(df))
file_name <- paste0(df_name, ".xlsx")
file_path <- paste0(file_path_prefix, file_name)
sheet_name <- df_name
# Limit sheet name to 31 characters, replacing invalid characters
sheet_name <- gsub("[[:punct:]]", "_", sheet_name) # Replace punctuation
sheet_name <- substr(sheet_name, 1, 31)       # Truncate
tryCatch({
write_xlsx(df, file_path)
message(paste("Successfully wrote", df_name, "to", file_path))
}, error = function(e) {
message(paste("Error writing", df_name, "to Excel:", e))
print(e)
})
}
# 1. Write Individual Excel Files
write_df_to_excel(works_cited_type_articles_brill_2022_2023)
write_df_to_excel(works_cited_type_nonarticles_brill)
write_df_to_excel(works_published_brill)
excel_files <- c("citations/works_cited_type_articles_brill_2022_2023.xlsx", "citations/brill_2022_2023_top_cited_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
sheet_name <-substr(sheet_name, 1, 31)  # Truncate to 31 chars for worksheet
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
excel_files <- c("citations/works_cited_type_articles_brill_2022_2023.xlsx", "citations/brill_2022_2023_top_cited_journals.xlsx")
tryCatch({
wb <- createWorkbook()
for (i in seq_along(excel_files)) {
df <- read.xlsx(excel_files[i])
sheet_name <- gsub("citations/(.*)\\.xlsx", "\\1", excel_files[i]) # Extract sheet name from file name
sheet_name <-substr(sheet_name, 1, 31)  # Truncate to 31 chars for worksheet
addWorksheet(wb, sheetName = sheet_name)
writeData(wb, sheet = sheet_name, x = df)
}
saveWorkbook(wb, "citations/combined_brill.xlsx", overwrite = TRUE)
message("!!! Combination successful!")
}, error = function(e) {
message("Combination failed: ", e)
print(e)
})
rank_top_cited_journals(works_cited_type_articles_brill_2023, "so", 200)
rank_top_cited_journals(works_cited_type_articles_brill_2022, "so", 200)
View(works_cited_2022)
rank_top_cited_journals(works_cited_type_articles_brill_2022, "so", 200)
rank_top_cited_journals(works_cited_type_articles_brill_2023, "so", 200)
rank_top_cited_journals(works_cited_type_articles_brill_2022, "so", 200)
View(works_cited_type_articles_brill_2022)
View(works_cited_type_articles_brill_2022[[38]][[1]])
View(works_cited_type_articles_brill_2022[[38]][[1]])
print (works_cited_type_articles_brill_2022[[38]][[1]])
extract_topics_by_level <- function(data, level = 1) {
# --- Input Validation ---
if (!is.data.frame(data)) {
stop("'data' must be a data frame.")
}
if (!("topic" %in% names(data))) {
stop("The 'topic' column is missing from the input data frame.")
}
if (!is.numeric(level) || length(level) != 1 || level < 1 || level != as.integer(level)) {
stop("'level' must be a positive integer.")
}
# --- Data Extraction ---
extracted_data <- data %>%
select(id, title, topic) %>%
unnest(cols = c(topic)) %>%
filter(i == level) %>%
select(id, title, level_name = name, display_name)
# Handle the case where no rows match the level
if (nrow(extracted_data) == 0) {
warning(paste("No data found for level", level, ". Returning an empty data frame with appropriate columns."))
return(tibble(id = character(), title = character(), level_name = character(), display_name = character()))
}
extracted_data <- extracted_data %>%
pivot_wider(id_cols = c(id, title), names_from = level_name,
values_from = display_name, values_fn = ~ paste(.x, collapse = ", "))
return(extracted_data)
}
# use:
extract_topics_by_level(works_cited_type_articles_brill_2022, 1)
Q
extract_topics_by_level <- function(data, level = 1) {
# --- Input Validation ---
if (!is.data.frame(data)) {
stop("'data' must be a data frame.")
}
if (!("topics" %in% names(data))) {
stop("The 'topics' column is missing from the input data frame.")
}
if (!is.numeric(level) || length(level) != 1 || level < 1 || level != as.integer(level)) {
stop("'level' must be a positive integer.")
}
# --- Data Extraction ---
extracted_data <- data %>%
select(id, title, topic) %>%
unnest(cols = c(topic)) %>%
filter(i == level) %>%
select(id, title, level_name = name, display_name)
# Handle the case where no rows match the level
if (nrow(extracted_data) == 0) {
warning(paste("No data found for level", level, ". Returning an empty data frame with appropriate columns."))
return(tibble(id = character(), title = character(), level_name = character(), display_name = character()))
}
extracted_data <- extracted_data %>%
pivot_wider(id_cols = c(id, title), names_from = level_name,
values_from = display_name, values_fn = ~ paste(.x, collapse = ", "))
return(extracted_data)
}
extract_topics_by_level <- function(data, level = 1) {
# --- Input Validation ---
if (!is.data.frame(data)) {
stop("'data' must be a data frame.")
}
if (!("topics" %in% names(data))) { # Corrected column name
stop("The 'topics' column is missing from the input data frame.")
}
if (!is.numeric(level) || length(level) != 1 || level < 1 || level != as.integer(level)) {
stop("'level' must be a positive integer.")
}
# --- Data Extraction ---
extracted_data <- data %>%
select(id, title, topics) %>%  # Corrected column name
unnest(cols = c(topics)) %>%   # Corrected column name
filter(i == level) %>%
select(id, title, level_name = name, display_name)
# Handle the case where no rows match the level
if (nrow(extracted_data) == 0) {
warning(paste("No data found for level", level, ". Returning an empty data frame with appropriate columns."))
return(tibble(id = character(), title = character(), level_name = character(), display_name = character()))
}
extracted_data <- extracted_data %>%
pivot_wider(id_cols = c(id, title), names_from = level_name,
values_from = display_name, values_fn = ~ paste(.x, collapse = ", "))
return(extracted_data)
}
# use:
extract_topics_by_level(works_cited_type_articles_brill_2022, 1)
View(works_cited_type_articles_brill_2022[[38]][[1]])
View(works_cited_type_articles_brill_2022[[38]][[1]])
extract_topics <- function(data, level = 1) {
# --- Input Validation ---
if (!is.data.frame(data)) {
stop("'data' must be a data frame.")
}
if (!("topics" %in% names(data))) {
stop("The 'topics' column is missing from the input data frame.")
}
if (!is.numeric(level) || length(level) != 1 || level < 1 || level != as.integer(level)) {
stop("'level' must be a positive integer.")
}
# --- Data Extraction ---
extracted_data <- data %>%
select(id, title, topics) %>%
unnest(cols = c(topics)) %>%
filter(i == level) %>%
# Combine 'name' and 'display_name' *before* pivoting
mutate(combined_name = str_c(name, ": ", display_name)) %>%  # Use str_c
select(id, title, combined_name) # Keep id, title, and the combined name
# Handle the case where no rows match the level
if (nrow(extracted_data) == 0) {
warning(paste("No data found for level", level, ". Returning an empty data frame with appropriate columns."))
return(tibble(id = character(), title = character(), combined_name = character()))  # Corrected empty tibble
}
extracted_data <- extracted_data %>%
pivot_wider(id_cols=c(id, title), names_from = combined_name, values_fn = ~paste(.x, collapse = ", "))
return(extracted_data)
}
# use:
extract_topics(works_cited_type_articles_brill_2022, 1)
Q
extract_topics_by_level <- function(data, level = 1) {
# --- Input Validation ---
if (!is.data.frame(data)) {
stop("'data' must be a data frame.")
}
if (!("topics" %in% names(data))) {
stop("The 'topics' column is missing from the input data frame.")
}
if (!is.numeric(level) || length(level) != 1 || level < 1 || level != as.integer(level)) {
stop("'level' must be a positive integer.")
}
# --- Data Extraction ---
extracted_data <- data %>%
select(id, title, topics) %>%
unnest(cols = c(topics)) %>%
filter(i == level) %>%
# Combine 'name' and 'display_name'
mutate(combined_name = str_c(name, ": ", display_name)) %>%
select(id, title, combined_name) # No topic_id
# Handle the case where no rows match the level
if (nrow(extracted_data) == 0) {
warning(paste("No data found for level", level,
". Returning an empty data frame with appropriate columns."))
return(tibble(id = character(), title = character(), combined_name = character())) # No topic_id
}
extracted_data <- extracted_data %>%
pivot_wider(id_cols = c(id, title), names_from = combined_name, values_from = combined_name, values_fn = ~paste(.x, collapse = ", "))
return(extracted_data)
}
# use:
extract_topics_by_level(works_cited_type_articles_brill_2022, 1)
extract_topics_by_level <- function(data, level = 1) {
# --- Input Validation ---
if (!is.data.frame(data)) {
stop("'data' must be a data frame.")
}
if (!("topics" %in% names(data))) {
stop("The 'topics' column is missing from the input data frame.")
}
if (!is.numeric(level) || length(level) != 1 || level < 1 || level != as.integer(level)) {
stop("'level' must be a positive integer.")
}
# --- Data Extraction ---
extracted_data <- data %>%
select(id, title, topics) %>%
# Rename the nested 'id' column *before* unnesting.  Handle empty data frames.
mutate(topics = map(topics, ~{
if (is.data.frame(.x) && "id" %in% names(.x)) {
rename(.x, topic_id = id)
} else {
.x  # Return unchanged if not a data frame or no 'id' column
}
})) %>%
unnest(cols = c(topics)) %>%
filter(i == level) %>%
# Combine 'name' and 'display_name'
mutate(combined_name = str_c(name, ": ", display_name)) %>%
select(id, title, combined_name)
# Handle the case where no rows match the level
if (nrow(extracted_data) == 0) {
warning(paste("No data found for level", level,
". Returning an empty data frame with appropriate columns."))
return(tibble(id = character(), title = character(), combined_name = character()))
}
extracted_data <- extracted_data %>%
pivot_wider(id_cols=c(id, title), names_from=combined_name, values_from = combined_name, values_fn = ~paste(.x, collapse=", "))
return(extracted_data)
}
# use:
extract_topics_by_level(works_cited_type_articles_brill_2022, 1)
View(works_cited_type_articles_brill_2022)
# use:
primary_topics <- extract_topics_by_level(works_cited_type_articles_brill_2022, 1)
second_topics  <- extract_topics_by_level(works_cited_type_articles_brill_2022, 2)
third_topics   <- extract_topics_by_level(works_cited_type_articles_brill_2022, 3)
View(primary_topics)
extract_topics_by_level <- function(data, level = 1) {
# --- Input Validation ---
if (!is.data.frame(data)) {
stop("'data' must be a data frame.")
}
if (!("topics" %in% names(data))) {
stop("The 'topics' column is missing from the input data frame.")
}
if (!is.numeric(level) || length(level) != 1 || level < 1 || level != as.integer(level)) {
stop("'level' must be a positive integer.")
}
# --- Data Extraction ---
extracted_data <- data %>%
select(id, title, topics) %>%
# Rename the nested 'id' column *before* unnesting
mutate(topics = map(topics, ~{
if (is.data.frame(.x) && "id" %in% names(.x)) {
rename(.x, topic_id = id)
} else {
.x
}
})) %>%
unnest(cols = c(topics)) %>%
filter(i == level) %>%
# Combine 'name' and 'display_name'
mutate(combined_name = str_c(name, ": ", display_name)) %>%
select(id, title, combined_name)
# Handle Empty Results *BEFORE* Pivoting
if (nrow(extracted_data) == 0) {
warning(paste("No data found for level", level,
". Returning an empty data frame with appropriate columns."))
return(tibble(id = character(), title = character(), combined_name = character()))
}
# Pivot *AFTER* filtering and combining
extracted_data <- extracted_data %>%
pivot_wider(id_cols = c(id, title), names_from = combined_name,
values_from = combined_name,  # Use combined_name for both
values_fn = ~ paste(unique(.x), collapse = ", ")) # Use unique()
return(extracted_data)
}
# use:
primary_topics <- extract_topics_by_level(works_cited_type_articles_brill_2022, 1)
View(primary_topics)
extract_topics_by_level <- function(data, level = 1) {
# --- Input Validation ---
if (!is.data.frame(data)) {
stop("'data' must be a data frame.")
}
if (!("topics" %in% names(data))) {
stop("The 'topics' column is missing from the input data frame.")
}
if (!is.numeric(level) || length(level) != 1 || level < 1 || level != as.integer(level)) {
stop("'level' must be a positive integer.")
}
# --- Data Extraction ---
extracted_data <- data %>%
select(id, title, topics) %>%
# Rename the nested 'id' column *before* unnesting
mutate(topics = map(topics, ~{
if (is.data.frame(.x) && "id" %in% names(.x)) {
rename(.x, topic_id = id)
} else {
.x
}
})) %>%
unnest(cols = c(topics)) %>%
filter(i == level) %>%
# Combine 'name' and 'display_name'
mutate(combined_name = str_c(name, ": ", display_name)) %>%
select(title, combined_name)
# Handle Empty Results *BEFORE* Pivoting
if (nrow(extracted_data) == 0) {
warning(paste("No data found for level", level,
". Returning an empty data frame with appropriate columns."))
return(tibble(id = character(), title = character(), combined_name = character()))
}
# Pivot *AFTER* filtering and combining
extracted_data <- extracted_data %>%
pivot_wider(id_cols = c(id, title), names_from = combined_name,
values_from = combined_name,  # Use combined_name for both
values_fn = ~ paste(unique(.x), collapse = ", ")) # Use unique()
return(extracted_data)
}
# use:
primary_topics <- extract_topics_by_level(works_cited_type_articles_brill_2022, 1)
extract_topics_by_level <- function(data, level = 1) {
# --- Input Validation ---
if (!is.data.frame(data)) {
stop("'data' must be a data frame.")
}
if (!("topics" %in% names(data))) {
stop("The 'topics' column is missing from the input data frame.")
}
if (!is.numeric(level) || length(level) != 1 || level < 1 || level != as.integer(level)) {
stop("'level' must be a positive integer.")
}
# --- Data Extraction ---
extracted_data <- data %>%
select(title, topics) %>%  # Only select 'title' and 'topics'
unnest(cols = c(topics)) %>%
filter(i == level) %>%
# Combine 'name' and 'display_name'
mutate(combined_name = str_c(name, ": ", display_name)) %>%
select(title, combined_name) # Only select title and the combined name
# Handle the case where no rows match the level
if (nrow(extracted_data) == 0) {
warning(paste("No data found for level", level,
". Returning an empty data frame with appropriate columns."))
return(tibble(title = character(), combined_name = character())) # Only title and combined_name
}
extracted_data <- extracted_data %>%
pivot_wider(id_cols = c(title), names_from = combined_name,
values_from = combined_name,  # Use combined_name for both
values_fn = ~ paste(unique(.x), collapse = ", "))
return(extracted_data)
}
# use:
primary_topics <- extract_topics_by_level(works_cited_type_articles_brill_2022, 1)
View(primary_topics)
print(primary_topics)
extract_topics_by_level <- function(data, level = 1) {
# --- Input Validation ---
if (!is.data.frame(data)) {
stop("'data' must be a data frame.")
}
if (!("topics" %in% names(data))) {
stop("The 'topics' column is missing from the input data frame.")
}
if (!is.numeric(level) || length(level) != 1 || level < 1 || level != as.integer(level)) {
stop("'level' must be a positive integer.")
}
# --- Data Extraction and Combination ---
extracted_data <- data %>%
select(title, topics) %>%
unnest(cols=c(topics)) %>%
filter(i == level) %>%
mutate(combined_output = str_c(name, ": ", display_name)) %>%
select(title, combined_output)
# Handle the case where no rows match the level
if (nrow(extracted_data) == 0) {
warning(paste("No data found for level", level,
". Returning an empty data frame with appropriate columns."))
return(tibble(title = character(), combined_output = character()))
}
extracted_data <- extracted_data %>%
group_by(title) %>%
summarize(combined_output = paste(combined_output, collapse=", "), .groups="drop")
return(extracted_data)
}
# use:
primary_topics <- extract_topics_by_level(works_cited_type_articles_brill_2022, 1)
print(primary_topics)
View(primary_topics)
second_topics  <- extract_topics_by_level(works_cited_type_articles_brill_2022, 2)
View(second_topics)
source("my_function.R")
source("my_functions.R")
second_topics  <- extract_topics_by_level(works_cited_type_articles_brill_2022, 3)
second_topics  <- extract_topics_by_level(works_cited_type_articles_brill_2022, 4)
second_topics  <- extract_topics_by_level(works_cited_type_articles_brill_2022, 5)
View(works_cited_type_articles_brill_2022[[38]][[1]])
View(works_cited_2022)
source("my_functions.R")
source("my_functions.R")
