###########################################
### Search if a publisher is in a DF
# Output the publisher
# @ return: the indices of the publisher
search_publisher <- function(publisher_string, df) {
# Find indices where the host_organization contains the publisher string (case insensitive)
indices_with_string <- which(grepl(publisher_string, df$host_organization, ignore.case = TRUE))
print(df[indices_with_string, ]$host_organization)
print(df[indices_with_string, ]$id)
return(indices_with_string)
}
# Example usage:
publisher_string <- "Emerald Publishing"
result_indices <- search_publisher(publisher_string, works_cited_issn)
# Print the indices
print(result_indices)
#### Function: search_work_publisher():
## Search a work's publisher and output the publisher
# @return: index of the DF
search_work_publisher <- function(search_string, df) {
# Find indices where the host_organization contains the search string (case insensitive)
indices_with_string <- which(sapply(df$id, function(x) !is.na(x) && search_string %in% x))
print(df[indices_with_string, ]$host_organization)
print(indices_with_string)
return(indices_with_string)
}
# Example usage:
search_string <- "https://openalex.org/W2963276645"
result_indices <- search_work_publisher(search_string, org_works)
###############################################################
# Verify any cited work using the function search_references()
# Define the function to search for a string in the referenced_works column and print the output
##############################################3
search_references <- function(search_string, df) {
indices_with_string <- which(sapply(df$referenced_works, function(x) search_string %in% x))
print(indices_with_string)
print(df[indices_with_string, ]$id)
}
# Example usage:
search_string <- "Emerald Publishing"
result_indices <- search_publisher(search_string, org_works)
print(result_indices)
# Test case: APS (2021)
# UA authors publish the journals
search_publisher("American Phytopathological Society", org_works)
### Test data:
## 2021: search journals articles do UA authors cited.
search_string <- "https://openalex.org/W2070851128"
search_string <- "https://openalex.org/W2125987139"
# 2022
search_string <- "https://openalex.org/W2088715433"  # 2 times
search_string <- "https://openalex.org/W2057480435"  # 3 times
search_references(search_string, org_works)
View(publisher_aps)
# 2023
search_string <- "https://openalex.org/W2802507504" # 3 times
search_references(search_string, org_works)
publisher_aps <- publisher_aps %>%
mutate(across(where(is.character), ~ ifelse(nchar(.) > 32767, substr(., 1, 32767), .)))
write_xlsx(publisher_aps, "citations/publisher_aps_journal_2022.xlsx")
write_xlsx(publisher_aps, "citations/publisher_aps_journal_2023.xlsx")
######################################
######################################
### Function: To count issns occurrences for a given publisher (note: issns count is more accurate)
# @param: dataframe issns_articles_cited
#          publisher_name
# return: issns and counts cited
count_issns_by_publisher <- function(works_cited_issn, publisher_name) {
# Filter rows where host_organization matches the specified publisher
publisher1 <-  works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
# Count the occurrences of each journal under the specified publisher
issns_counts <- table(publisher1$so)
issns_counts_df <- as.data.frame(issns_counts)
return(issns_counts_df)
}
publisher_name <- "Microbiology society"
publisher1 <-  works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
journal_counts_df <- count_issns_by_publisher(works_cited_issn, publisher_name)
print(journal_counts_df)
publisher_name <- "Optica Publishing Group"
publisher1 <-  works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
journal_counts_df <- count_issns_by_publisher(works_cited_issn, publisher_name)
print(journal_counts_df)
publisher_name <- "Canadian Science Publishing"
publisher1 <-  works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
journal_counts_df <- count_issns_by_publisher(works_cited_issn, publisher_name)
print(journal_counts_df)
publisher_name <- "IWA publishing"
publisher1 <-  works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
journal_counts_df <- count_issns_by_publisher(works_cited_issn, publisher_name)
print(journal_counts_df)
publisher_name <- "Emerald Publishing"
publisher1 <-  works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
journal_counts_df <- count_issns_by_publisher(works_cited_issn, publisher_name)
print(journal_counts_df)
publisher_name <- "American Phytopathological Society"
publisher1 <-  works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
issns_counts_df <- count_issns_by_publisher(works_cited_issn, publisher_name)
print(issns_counts_df)
# Group by 'host_organization' and count the number of articles for each publisher
publisher_ranking <- works_cited_issn %>%
group_by(host_organization) %>%
summarise(article_count = n()) %>%
arrange(desc(article_count))
# Calculate the total number of articles across all publishers
total_article_count <- sum(publisher_ranking$article_count)
# Calculate the percentage for each publisher relative to the total article count
publisher_ranking <- publisher_ranking %>%
mutate(percentage = (article_count / total_article_count) * 100)
library(ggplot2)
top_20_publishers <- publisher_ranking %>% slice(1:20)
top_20_publishers$percentage <- (top_20_publishers$article_count / total_article_count) * 100
top_20_publishers$host_organization <- substr(top_20_publishers$host_organization, 1, 10)
# top 50
top_50_publishers <- publisher_ranking %>% slice(1:50)
top_50_publishers$percentage <- (top_50_publishers$article_count / total_article_count) * 100
top_50_publishers$host_organization <- substr(top_50_publishers$host_organization, 1, 10)
# top 100
top_100_publishers <- publisher_ranking %>% slice(1:100)
top_100_publishers$percentage <- (top_100_publishers$article_count / total_article_count) * 100
top_100_publishers$host_organization <- substr(top_100_publishers$host_organization, 1, 10)
# Bar plot for top 20 publishers
ggplot(top_20_publishers, aes(x = reorder(host_organization, -article_count), y = article_count)) +
geom_bar(stat = "identity", fill = "steelblue") +
# Real number (article count) inside the bar
geom_text(aes(label = article_count), vjust = 0.5, hjust = 1.2, size = 2.5, color = "white") +
# Adjust hjust and color for positioning inside
# Percentage outside the bar
geom_text(aes(label = sprintf("(%.1f%%)", percentage)), vjust = 0.5, hjust = -0.2, size = 3) +
# Adjust hjust for positioning outside
coord_flip() +  # Flip the axis for better readability
labs(x = "Publisher", y = "Number of Articles", title = "2022 UA Top 20 Publishers (Number of Articles Cited)") +
theme_minimal() +
theme(axis.text.y = element_text(size = 7))  # Reduce font size of publisher names
# Calculate the percentage of the top 20, top 50, and top 100 publishers over the total
total_article_count <- sum(publisher_ranking$article_count) # Total articles in all publishers
top_20_total_count <- sum(top_20_publishers$article_count)
top_50_total_count <- sum(top_50_publishers$article_count)
top_100_total_count <- sum(top_100_publishers$article_count)
# Calculate the percentage for year 2019, 2020, 2021, 2022, 2023
# Top  20: ~74-76%
# Top  50: ~90%
# Top 100: ~95%
top_20_percentage_of_total <- (top_20_total_count / total_article_count) * 100
top_50_percentage_of_total <- (top_50_total_count / total_article_count) * 100
top_100_percentage_of_total <-(top_100_total_count/ total_article_count) * 100
print(paste("Top 20 publishers represent",  round(top_20_percentage_of_total, 0), "% of the total articles."))
print(paste("Top 50 publishers represent",  round(top_50_percentage_of_total, 0), "% of the total articles."))
print(paste("Top 100 publishers represent", round(top_100_percentage_of_total, 0), "% of the total articles."))
view(publisher_ranking)
rank_top_cited_journals <- function(data, journal_col, top_n = 10) {
top_cited_journals <- data %>%
group_by(!!sym(journal_col)) %>%      # Group by the journal names (column provided by the user)
summarise(citation_count = n()) %>%   # Count the number of articles per journal
arrange(desc(citation_count)) %>%     # Sort by citation count in descending order
slice(1:top_n)                        # Select top 'n' journals
print(top_cited_journals, n = top_n)
}
rank_top_cited_journals(publisher_plos, "so")
rank_top_cited_journals(publisher_aaas, "so")
rank_top_cited_journals(publisher_nature, "so")
View(non_journal_articles_cited)
View(non_journal_non_articles_cited)
search_string <- "https://openalex.org/W2058342498"
search_references(search_string, org_works)
search_string <- "https://openalex.org/W4226087454" # 4 times
search_references(search_string, org_works)
# BMJ:
# 2023:
publisher_bmj  <- works_cited_issn[grepl("BMJ", works_cited_issn$host_organization, ignore.case = TRUE), ]
publisher_bmj2 <- works_cited_non_issn[grepl("BMJ", works_cited_non_issn$host_organization, ignore.case = TRUE), ]
###########################################
### Search if a publisher is in a DF
# Output the publisher
# @ return: the indices of the publisher
search_publisher <- function(publisher_string, df) {
# Find indices where the host_organization contains the publisher string (case insensitive)
indices_with_string <- which(grepl(publisher_string, df$host_organization, ignore.case = TRUE))
print(df[indices_with_string, ]$host_organization)
print(df[indices_with_string, ]$id)
return(indices_with_string)
}
#### Function: search_work_publisher():
## Search a work's publisher and output the publisher
# @return: index of the DF
search_work_publisher <- function(search_string, df) {
# Find indices where the host_organization contains the search string (case insensitive)
indices_with_string <- which(sapply(df$id, function(x) !is.na(x) && search_string %in% x))
print(df[indices_with_string, ]$host_organization)
print(indices_with_string)
return(indices_with_string)
}
# Example usage:
search_string <- "https://openalex.org/W2963276645"
result_indices <- search_work_publisher(search_string, org_works)
###############################################################
# Verify any cited work using the function search_references()
# Define the function to search for a string in the referenced_works column and print the output
##############################################3
search_references <- function(search_string, df) {
indices_with_string <- which(sapply(df$referenced_works, function(x) search_string %in% x))
print(indices_with_string)
print(df[indices_with_string, ]$id)
}
# Example usage:
search_string <- "Emerald Publishing"
result_indices <- search_publisher(search_string, org_works)
print(result_indices)
# Example usage
search_string <- "https://openalex.org/W1604958295"
View(publisher_bmj)
View(publisher_bmj)
# 2023
search_string <- "https://openalex.org/W1967057044" # 3 times
search_references(search_string, org_works)
search_string <- "https://openalex.org/W2157823046" # 7 times
search_references(search_string, org_works)
# For BMJ
publisher_bmj <- publisher_bmj %>%
mutate(across(where(is.character), ~ ifelse(nchar(.) > 32767, substr(., 1, 32767), .)))
write_xlsx(publisher_aps, "citations/publisher_bmj_journal_2023.xlsx")
######################################
######################################
### Function: To count issns occurrences for a given publisher (note: issns count is more accurate)
# @param: dataframe issns_articles_cited
#          publisher_name
# return: issns and counts cited
count_issns_by_publisher <- function(works_cited_issn, publisher_name) {
# Filter rows where host_organization matches the specified publisher
publisher1 <-  works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
# Count the occurrences of each journal under the specified publisher
issns_counts <- table(publisher1$so)
issns_counts_df <- as.data.frame(issns_counts)
return(issns_counts_df)
}
publisher_name <- "BMJ"
publisher1 <-  works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
issns_counts_df <- count_issns_by_publisher(works_cited_issn, publisher_name)
print(issns_counts_df)
######################################
######################################
### Function: To count issns occurrences for a given publisher (note: issns count is more accurate)
# @param: dataframe issns_articles_cited
#          publisher_name
# return: issns and counts cited and sorted
count_issns_by_publisher <- function(works_cited_issn, publisher_name) {
# Filter rows where host_organization matches the specified publisher
publisher1 <-  works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
# Count the occurrences of each journal under the specified publisher
issns_counts <- table(publisher1$so)
issns_counts_df <- as.data.frame(issns_counts)
# Sort the data frame by Count in descending order
issns_counts_df <- issns_counts_df[order(issns_counts_df$Count, decreasing = TRUE), ]
return(issns_counts_df)
}
publisher_name <- "BMJ"
publisher1 <-  works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
issns_counts_df <- count_issns_by_publisher(works_cited_issn, publisher_name)
count_issns_by_publisher <- function(works_cited_issn, publisher_name) {
# Filter rows where host_organization matches the specified publisher
publisher1 <- works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
# Count the occurrences of each ISSN under the specified publisher
issns_counts <- table(publisher1$so)
issns_counts_df <- as.data.frame(issns_counts)
# Rename columns for clarity
colnames(issns_counts_df) <- c("ISSN", "Count")
# Sort the data frame by Count in descending order
issns_counts_df <- issns_counts_df[order(issns_counts_df$Count, decreasing = TRUE), ]
return(issns_counts_df)
}
publisher_name <- "BMJ"
publisher1 <-  works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
issns_counts_df <- count_issns_by_publisher(works_cited_issn, publisher_name)
print(issns_counts_df)
count_issns_by_publisher <- function(works_cited_issn, publisher_name) {
# Filter rows where host_organization matches the specified publisher
publisher1 <- works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
# Count the occurrences of each ISSN under the specified publisher
issns_counts <- table(publisher1$so)
issns_counts_df <- as.data.frame(issns_counts)
# Rename columns for clarity
colnames(issns_counts_df) <- c("Journal Title", "Count")
# Sort the data frame by Count in descending order
issns_counts_df <- issns_counts_df[order(issns_counts_df$Count, decreasing = TRUE), ]
return(issns_counts_df)
}
publisher_name <- "BMJ"
publisher1 <-  works_cited_issn[grepl(publisher_name, works_cited_issn$host_organization, ignore.case = TRUE), ]
issns_counts_df <- count_issns_by_publisher(works_cited_issn, publisher_name)
print(issns_counts_df)
num_unique_issn_l <- length(unique(publisher1$`issn-l`))
print(paste("Number of unique values in issn-l:", num_unique_issn_l))
num_unique_issn_l <- length(unique(publisher1$`issn-i`))
num_unique_issn<- length(unique(publisher1$`issn-i`))
print(paste("Number of unique values in issn-l:", num_unique_issn))
num_unique_issn<- length(unique(publisher1$`issn-l`))
View(publisher1)
num_unique_issn<- length(unique(publisher1$`issn_l`))
print(paste("Number of unique values in issn-l:", num_unique_issn))
unique_issn_values <- unique(publisher1$`issn-l`)
print(unique_issn_l_values)
unique_issns <- unique(publisher1$`issn-l`)
print(unique_issns)
unique_issns <- unique(publisher1$`issn_l`)
print(unique_issns)
num_unique_issn<- length(unique_issns)
print(unique_issns)
unique_journals <- unique(publisher1$`so`)
num_unique_issn<- length(unique_journals)
print(unique_journals)
# For BMJ
publisher_bmj <- publisher_bmj %>%
mutate(across(where(is.character), ~ ifelse(nchar(.) > 32767, substr(., 1, 32767), .)))
write_xlsx(publisher_aps, "citations/publisher_bmj_journal_2023.xlsx")
View(publisher_bmj)
# For BMJ
publisher_bmj <- publisher_bmj %>%
mutate(across(where(is.character), ~ ifelse(nchar(.) > 32767, substr(., 1, 32767), .)))
write_xlsx(publisher_aps, "citations/publisher_bmj_journal_2023.xlsx")
write_xlsx(publisher_bmj, "citations/publisher_bmj_journal_2023.xlsx")
search_string <- "https://openalex.org/W2034673450" # 2 times
search_references(search_string, org_works)
#
search_publisher("BMJ", org_works)
org_works_2023_old <- readRDS("../org_works_2023_202410.rds")
View(org_works_2023_old)
#### Compare the two dfs
compare_dfs_by_id <- function(df1, df2, id_field) {
# Check if the ID field exists in both data frames
if (!(id_field %in% colnames(df1)) || !(id_field %in% colnames(df2))) {
stop("ID field not found in one or both data frames.")
}
# --- Find IDs present in one DF but not the other ---
# IDs unique to df1
unique_to_df1 <- setdiff(df1[[id_field]], df2[[id_field]])
# IDs unique to df2
unique_to_df2 <- setdiff(df2[[id_field]], df1[[id_field]])
# --- Find IDs present in both but with different values ---
# Common IDs
common_ids <- intersect(df1[[id_field]], df2[[id_field]])
# Subset data frames to include only common IDs
df1_common <- df1[df1[[id_field]] %in% common_ids, ]
df2_common <- df2[df2[[id_field]] %in% common_ids, ]
# Sort by ID for comparison
df1_common <- df1_common[order(df1_common[[id_field]]), ]
df2_common <- df2_common[order(df2_common[[id_field]]), ]
# Find rows with differences (excluding the ID field itself)
diff_rows <- which(apply(df1_common[, colnames(df1_common) != id_field], 1, function(x) any(x != df2_common[, colnames(df2_common) != id_field][which(df1_common[[id_field]] == df2_common[[id_field]]), ])))
# Data frame with differences
df_diff <- df1_common[diff_rows, ]
# Add a column to indicate the source of the difference
if(nrow(df_diff) > 0){
df_diff$diff_source <- "Both (values differ)"
}
# --- Combine all differences into a single data frame ---
# Rows unique to df1
if (length(unique_to_df1) > 0) {
df_unique_df1 <- df1[df1[[id_field]] %in% unique_to_df1, ]
df_unique_df1$diff_source <- "df1 only"
} else {
df_unique_df1 <- data.frame()
}
# Rows unique to df2
if (length(unique_to_df2) > 0){
df_unique_df2 <- df2[df2[[id_field]] %in% unique_to_df2, ]
df_unique_df2$diff_source <- "df2 only"
} else {
df_unique_df2 <- data.frame()
}
# Combine all differences
all_diffs <- rbind(df_diff, df_unique_df1, df_unique_df2)
# --- Print the results ---
cat("IDs unique to df1:\n")
print(unique_to_df1)
cat("\nIDs unique to df2:\n")
print(unique_to_df2)
cat("\nRows with differences in common IDs:\n")
print(df_diff)
cat("\nSummary of Differences:\n")
print(table(all_diffs$diff_source))
return(all_diffs)
}
compare_dfs_by_id (org_works_2023_old, org_works_2023, id)
#### Compare the two dfs
compare_dfs_by_id <- function(df1, df2, id_field) {
# Check if the ID field exists in both data frames
if (!(id_field %in% colnames(df1)) || !(id_field %in% colnames(df2))) {
stop("ID field not found in one or both data frames.")
}
# --- Find IDs present in one DF but not the other ---
# IDs unique to df1
unique_to_df1 <- setdiff(df1[[id_field]], df2[[id_field]])
# IDs unique to df2
unique_to_df2 <- setdiff(df2[[id_field]], df1[[id_field]])
# --- Find IDs present in both but with different values ---
# Common IDs
common_ids <- intersect(df1[[id_field]], df2[[id_field]])
# Subset data frames to include only common IDs
df1_common <- df1[df1[[id_field]] %in% common_ids, ]
df2_common <- df2[df2[[id_field]] %in% common_ids, ]
# Sort by ID for comparison
df1_common <- df1_common[order(df1_common[[id_field]]), ]
df2_common <- df2_common[order(df2_common[[id_field]]), ]
# Find rows with differences (excluding the ID field itself)
diff_rows <- which(apply(df1_common[, colnames(df1_common) != id_field, drop = FALSE] != df2_common[, colnames(df2_common) != id_field, drop = FALSE], 1, any))
# Data frame with differences
df_diff <- df1_common[diff_rows, ]
# Add a column to indicate the source of the difference
if (nrow(df_diff) > 0) {
df_diff$diff_source <- "Both (values differ)"
}
# --- Combine all differences into a single data frame ---
# Rows unique to df1
if (length(unique_to_df1) > 0) {
df_unique_df1 <- df1[df1[[id_field]] %in% unique_to_df1, ]
df_unique_df1$diff_source <- "df1 only"
} else {
df_unique_df1 <- data.frame()
}
# Rows unique to df2
if (length(unique_to_df2) > 0) {
df_unique_df2 <- df2[df2[[id_field]] %in% unique_to_df2, ]
df_unique_df2$diff_source <- "df2 only"
} else {
df_unique_df2 <- data.frame()
}
# Combine all differences
all_diffs <- rbind(df_diff, df_unique_df1, df_unique_df2)
# --- Print the results ---
cat("IDs unique to df1:\n")
print(unique_to_df1)
cat("\nIDs unique to df2:\n")
print(unique_to_df2)
cat("\nRows with differences in common IDs:\n")
print(df_diff)
cat("\nSummary of Differences:\n")
print(table(all_diffs$diff_source))
return(all_diffs)
}
compare_dfs_by_id (org_works_2023_old, org_works_2023, id)
compare_dfs_by_id <- function(df1, df2, id_field) {
# Check if inputs are data frames
if (!is.data.frame(df1) || !is.data.frame(df2)) {
stop("Inputs df1 and df2 must be data frames.")
}
# Check if id_field is a single string (character vector of length 1)
if (!is.character(id_field) || length(id_field) != 1) {
stop("id_field must be a single string (character vector of length 1).")
}
# Robust check for ID field existence in both data frames
if (!(id_field %in% names(df1)) || !(id_field %in% names(df2))) {
stop("ID field not found in one or both data frames.")
}
# --- Find IDs present in one DF but not the other ---
# IDs unique to df1
unique_to_df1 <- setdiff(df1[[id_field]], df2[[id_field]])
# IDs unique to df2
unique_to_df2 <- setdiff(df2[[id_field]], df1[[id_field]])
# --- Find IDs present in both but with different values ---
# Common IDs
common_ids <- intersect(df1[[id_field]], df2[[id_field]])
# Subset data frames to include only common IDs
df1_common <- df1[df1[[id_field]] %in% common_ids, ]
df2_common <- df2[df2[[id_field]] %in% common_ids, ]
# Sort by ID for comparison
df1_common <- df1_common[order(df1_common[[id_field]]), ]
df2_common <- df2_common[order(df2_common[[id_field]]), ]
# Find rows with differences (excluding the ID field itself)
diff_rows <- which(apply(df1_common[, colnames(df1_common) != id_field, drop = FALSE] != df2_common[, colnames(df2_common) != id_field, drop = FALSE], 1, any))
# Data frame with differences
df_diff <- df1_common[diff_rows, ]
# Add a column to indicate the source of the difference
if (nrow(df_diff) > 0) {
df_diff$diff_source <- "Both (values differ)"
}
# --- Combine all differences into a single data frame ---
# Rows unique to df1
if (length(unique_to_df1) > 0) {
df_unique_df1 <- df1[df1[[id_field]] %in% unique_to_df1, ]
df_unique_df1$diff_source <- "df1 only"
} else {
df_unique_df1 <- data.frame()
}
# Rows unique to df2
if (length(unique_to_df2) > 0) {
df_unique_df2 <- df2[df2[[id_field]] %in% unique_to_df2, ]
df_unique_df2$diff_source <- "df2 only"
} else {
df_unique_df2 <- data.frame()
}
# Combine all differences
all_diffs <- rbind(df_diff, df_unique_df1, df_unique_df2)
# --- Print the results ---
cat("IDs unique to df1:\n")
print(unique_to_df1)
cat("\nIDs unique to df2:\n")
print(unique_to_df2)
cat("\nRows with differences in common IDs:\n")
print(df_diff)
cat("\nSummary of Differences:\n")
print(table(all_diffs$diff_source))
return(all_diffs)
}
compare_dfs_by_id (org_works_2023_old, org_works_2023, id)
print(org_works_2023$id)
str(org_works_2023$id)
class(org_works_2023$id)
id_column_name <- org_works_2023$id
compare_dfs_by_id (org_works_2023_old, org_works_2023, id_column_name)
length(org_works_2023$id)
Q
length(org_works_2023$id)
