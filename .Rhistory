### get metadata for a DOI
install.packages("rcrossref")
install.packages("rcrossref")
library(rcrossref)
# Function to get metadata for a DOI
get_doi_metadata <- function(doi) {
metadata <- cr_cn(doi, format = "citeproc-json")
return(metadata)
}
doi <- "https://doi.org/10.2458/v24i1.22003"
metadata <- get_doi_metadata(doi)
### get metadata for a DOI
install.packages("rcrossref")
library(rcrossref)
# Function to get metadata for a DOI
get_doi_metadata <- function(doi) {
metadata <- cr_cn(doi, format = "citeproc-json")
return(metadata)
}
doi <- "https://doi.org/10.2458/v24i1.22003"
metadata <- get_doi_metadata(doi)
# Function to get metadata for a DOI
get_doi_metadata <- function(doi) {
tryCatch({
metadata <- cr_cn(doi, format = "citeproc-json")
return(metadata)
}, error = function(e) {
message("Error retrieving metadata: ", e)
return(NULL)
})
}
doi <- "https://doi.org/10.2458/v24i1.22003"
metadata <- get_doi_metadata(doi)
# Print the metadata
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
library (httr)
library(jsonlite)
# Function to get metadata for a DOI
get_doi_metadata <- function(doi) {
url <- paste0("https://api.crossref.org/works/", doi)
response <- GET(url)
if (status_code(response) == 200) {
metadata <- content(response, as = "text", encoding = "UTF-8")
metadata <- fromJSON(metadata, flatten = TRUE)
return(metadata$message)
} else {
message("Error retrieving metadata: ", status_code(response))
return(NULL)
}
}
# Example DOI
doi <- "10.2458/v24i1.22003"
# Get metadata for the example DOI
metadata <- get_doi_metadata(doi)
# Print the metadata
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
View(metadata)
### Example 2:
doi <- "https://doi.org/10.2458/azu_jrm_v57i2_cox"
metadata <- get_doi_metadata(doi)
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
# code generated by GPT-4
# check "is_oa_anywhere" field
# Set the filter for works that are open access anywhere
oa_filter <- "is_oa_anywhere:true"
# Search for works with the specified filter
results <- oa_search(
entity = "works",
filter = oa_filter,
per_page = 100  # Adjust per_page as needed
)
### Example 2:
doi <- "https://doi.org/10.2458/azu_jrm_v57i2_cox"
metadata <- get_doi_metadata(doi)
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
View(metadata)
View(metadata)
df_rem <- subset(UA_host_all_location, grepl("Range Ecology", so, ignore.case = TRUE)) # 432
# Filter the dataframe to get all rows where "so" is "journal of range management" (JRM) (case insenstive)
df_jrm <- subset(UA_host_all_location, grepl("journal of range management", so, ignore.case = TRUE))  #4,183
df_rem <- subset(UA_host_all_location, grepl("Range Ecology", so, ignore.case = TRUE)) # 432
# Count the number of occurrences of each unique value in the "source" column using dplyr
source_counts_df <- UA_host_all_location %>%
count(so, sort = TRUE)
# common libraries
library(openalexR)
packageVersion("openalexR")
library(dplyr)
library(ggplot2)
library(knitr)
library(testthat)
library(readr)
citation("openalexR")
# check to see if openAlexR has the latest entities in OpenAlex (OpenAlex updated its data model(Entities) in June 2023)
# Before April 2023: they are [1] "works"        "authors"      "venues"       "institutions" "concepts"
# If not, need to use openalexR developer's version
oa_entities()
options (openalexR.mailto="yhan@arizona.edu")
getwd()
setwd("/home/yhan/Documents/openalexR-test")
### Test data
test_data_UAL_authors     <- c("Yan Han", "Ellen Dubinski", "Fernando Rios", "Ahlam Saleh")
test_data_COM_authors     <- c("Phillip Kuo", "Bekir Tanriover", "Ahlam Saleh")
test_data_COM_Tucson_authors <- c("Che Carrie Liu", "Robert M. Aaronson", "Alexa Aasronson", "Mohammed Abbas", "")
test_data_science_authors <- c("Marek Rychlik", "Ali Bilgin", "Beichuan Zhang")
test_data_ischool_authors <- c("Hong Cui")
test_data_others          <- c("Leila Hudson", "Mona Hymel")
test_data_not_updated_authors <-c("Karen Padilla", "Haw-chih Tai")
test_data_affiliation <- c("University of Arizona")
test_data_year <- c("2022", "2021", "2020", "2012")
# Test works
works_from_dois <- oa_fetch(entity = "works", doi = c("https://doi.org/10.1093/ofid/ofac186", "https://doi.org/10.1007/s11192-013-1221-3"),  verbose = TRUE)
### Testing three datasets citations recall and precision using one article (published in 2022)
### OpenAlex: Precision
### OpenCitaitons: Precision 100%. Recall: 2/3
### Google scholar: Precision 100%. Recall 100%
works_from_dois <- oa_fetch(entity = "works", doi = c("https://doi.org/10.6017/ital.v40i1.12553"),  verbose = TRUE)
works_from_dois$cited_by_api_url
works_from_dois$ids
# All locations:
# count: 14903 (2024-07-11)
UA_host_all_location <- oa_fetch (
entity = "works",
locations.source.host_organization = "https://openalex.org/I138006243",
#count_only = TRUE
)
View(source_counts_df)
# common libraries
library(openalexR)
packageVersion("openalexR")
library(dplyr)
library(ggplot2)
library(knitr)
library(testthat)
library(readr)
citation("openalexR")
# check to see if openAlexR has the latest entities in OpenAlex (OpenAlex updated its data model(Entities) in June 2023)
# Before April 2023: they are [1] "works"        "authors"      "venues"       "institutions" "concepts"
# If not, need to use openalexR developer's version
oa_entities()
options (openalexR.mailto="yhan@arizona.edu")
getwd()
setwd("/home/yhan/Documents/openalexR-test")
### Test data
test_data_UAL_authors     <- c("Yan Han", "Ellen Dubinski", "Fernando Rios", "Ahlam Saleh")
test_data_COM_authors     <- c("Phillip Kuo", "Bekir Tanriover", "Ahlam Saleh")
test_data_COM_Tucson_authors <- c("Che Carrie Liu", "Robert M. Aaronson", "Alexa Aasronson", "Mohammed Abbas", "")
test_data_science_authors <- c("Marek Rychlik", "Ali Bilgin", "Beichuan Zhang")
test_data_ischool_authors <- c("Hong Cui")
test_data_others          <- c("Leila Hudson", "Mona Hymel")
test_data_not_updated_authors <-c("Karen Padilla", "Haw-chih Tai")
test_data_affiliation <- c("University of Arizona")
test_data_year <- c("2022", "2021", "2020", "2012")
# Best OA location. find out host organization.
# count: 8394 (2024-07-11)
# This fetch will take a few minutes. So be patient .
UA_host_best_location <- oa_fetch(
entity = "works",
# UA campus repository ID does not work as a filter
best_oa_location.source.host_organization = "https://openalex.org/I138006243",
# If only need count, uncomment the below line for a quick run.
count_only = TRUE
# If only need some samples. using the below line.
# options = list(sample = 100, seed = 1)
)
# Primary_location.source.host_organization.
# count: 24 (2024-07-11)
UA_host2 <- oa_fetch (
entity = "works",
primary_location.source.host_organization = "https://openalex.org/I138006243",
count_only = TRUE
)
############### Use campus repository source ID.
# no result using UA campus repository source ID.
UA_host5 <- oa_fetch (
entity = "works",
best_oa_location.source.host_organization = "https://openalex.org/S2764879211",
count_only = TRUE
)
UA_host6 <- oa_fetch (
entity = "works",
locations.source.host_organization = "https://openalex.org/S2764879211",
count_only = TRUE
)
# Filter the dataframe to get all rows where "so" is "journal of range management" (JRM) (case insenstive)
df_jrm <- subset(UA_host_all_location, grepl("journal of range management", so, ignore.case = TRUE))  #4,183
df_rem <- subset(UA_host_all_location, grepl("Range Ecology", so, ignore.case = TRUE)) # 432
# Count the number of occurrences of each unique value in the "source" column using dplyr
source_counts_df <- UA_host_all_location %>%
count(so, sort = TRUE)
# Display the dataframe with counts
# JRM/REM:  4183+836 (3991 + 804 for best_oa)
# Rangelands: 782 (685 for best_oa)
# NA: 384
print(source_counts_df)
#### Example 1: More like openalex pulled directly from crossref.
###  Campus repo:
doi <- "10.2458/v24i1.22003"
metadata <- get_doi_metadata(doi)
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
library(rcrossref)
library (httr)
library(jsonlite)
# Function to get metadata for a DOI
get_doi_metadata <- function(doi) {
url <- paste0("https://api.crossref.org/works/", doi)
response <- GET(url)
if (status_code(response) == 200) {
metadata <- content(response, as = "text", encoding = "UTF-8")
metadata <- fromJSON(metadata, flatten = TRUE)
return(metadata$message)
} else {
message("Error retrieving metadata: ", status_code(response))
return(NULL)
}
}
#### Example 1: More like openalex pulled directly from crossref.
###  Campus repo:
doi <- "10.2458/v24i1.22003"
metadata <- get_doi_metadata(doi)
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
View(metadata)
### Example 3:
# https://doi.org/10.1038/ng.3667"
doi <- "https://doi.org/10.1038/ng.3667"
metadata <- get_doi_metadata(doi)
if (!is.null(metadata)) {
print(metadata)
} else {
print("No metadata found for the given DOI.")
}
View(metadata)
ls
### 1.2 Getting all the works based on the institution ROR and publication date. It takes longer time.
# see above for the running time
org_works_2019 <-oa_fetch(
entity="works",
institutions.ror=c("03m2x1q45"),
from_publication_date ="2019-01-01",
to_publication_date = "2019-12-31"
)
library(openalexR)
library(dplyr)
library(tidyverse)
library(writexl)
# free unused obj to manage memory
gc()
rm(list=ls())
gc()
options("max.print" = 100000)
options (openalexR.mailto="yhan@arizona.edu")
getwd()
setwd("/home/yhan/Documents/openalexR-test/")
org_works_2019 <- readRDS("../org_works_2019.rds")
# change working data here
org_works <- org_works_2019
##### 2. Checking and verifying data
##### 2.1 Route 1: Getting citation data from $referenced_works
##### Rout2: Getting author's data?
###### change this line only to update the right dataset.
org_works_ref <- org_works$referenced_works
# Find "NA" indexes: 20-25% no references
# Year 2023: 2273 / 9166 have "NA".
na_indices <- which(sapply(org_works_ref, function(x) is.logical(x) && is.na(x)))
na_count <- sum(sapply(org_works_ref, function(x) is.logical(x) && is.na(x)))
na_percent <- na_count/length(org_works_ref) * 100
# Remove NA, logical(0) from list (Meaning: no references)
org_works_ref <- Filter(function(x) length(x) > 0, org_works_ref)
class(org_works_ref)
org_works_ref_combined <- unlist(org_works_ref, use.names = FALSE)
org_works_ref_combined <- org_works_ref_combined[!is.na(org_works_ref_combined)]  # Remove NA values
### Method 2: there are different
citation_counts <- table(org_works_ref_combined)
head(citation_counts)
# Extract citations that occur more than once (i.e., duplicates)
org_works_ref_more_cited2 <- names(citation_counts[citation_counts > 1])
### Testing if a work is found.
# Deep Learning, Nature, by Yann LeCun, Yoshua Bengio, Geoffrey Hinton. Cited by: 62,210
search_string <- "https://openalex.org/W2919115771"
result <- lapply(org_works_ref_combined, function(x) grep(search_string, x, value = TRUE))
print(result)
matches <- result[sapply(result, length) > 0]
print(matches)
indices <- which(sapply(org_works_ref_combined, function(x) any(grepl(search_string, x))))
for (i in indices) {
cat("Index:", i, "\n")
cat("Element:\n", org_works_ref_combined[[i]], "\n\n")
}
org_works_ref_combined[319025]
View(matches)
# Find it from the original article
indices_with_string <- which(sapply(org_works$reference_works, function(x) search_string %in% x))
# Find it from the original article
indices_with_string <- which(sapply(org_works$referenced_works, function(x) search_string %in% x))
org_works[588]
print (org_works[588])
print(indices_with_string)
org_works[indices_with_string, ]
org_works[indices_with_string$id, ]
org_works[indices_with_string, ]$id
#Creating an empty dataframe to store the results of the for loop.
works_cited <-data.frame()
works_cited_final <- readRDS("../works_cited_final_2019.rds")
articles_cited <- works_cited_final[!(is.na(works_cited_final$issn_l)), ]
articles_cited <- articles_cited[!(is.na(articles_cited$issn_l) | articles_cited$issn_l == ""), ]
nrow(articles_cited)
# Trim and normalize the host_organization column
articles_cited$host_organization <- trimws(articles_cited$host_organization)
articles_cited$issn_l <- trimws(articles_cited$issn_l)
# Empty or NULL records
count_null_empty_id <- sum(is.na(articles_cited$id) | trimws(articles_cited$id) == "")
count_null_empty_id
# publisher: host_organization
unique_publishers <- unique(articles_cited$host_organization)
# number of publishers: ~1,600
num_unique_publishers <- length(unique_publishers)
# list top 50 publishers
print(unique_publishers[1:50])
# list NULL publishers = 5%
num_na <- sum(is.na(articles_cited$host_organization))
# Replace NA values and empty strings with "NA"
articles_cited$host_organization[is.na(articles_cited$host_organization) | trimws(articles_cited$host_organization) == ""] <- "NA"
# 1. First, showing all NA publisher: meaning publisher info is not available.
publisher_NA <- articles_cited[articles_cited$host_organization == "NA", ]
publisher_NA_id <-unique(publisher_NA$id)
# Check if any 'id' values are duplicated
any_duplicated_ids <- any(duplicated(publisher_NA$id))
# Not using unnect() because it flattens out every article per author, which creates a lot of duplicated info
library(jsonlite)
# Convert the 'author' dataframe to JSON for each row
publisher_NA <- publisher_NA %>%
mutate(author = sapply(author, function(x) toJSON(x)))
# Truncate only strings that exceed Excel's 32,767 character limit
publisher_NA <- publisher_NA %>%
mutate(across(where(is.character), ~ ifelse(nchar(.) > 32767, substr(., 1, 32767), .)))
# 2. Elsevier
publisher_elsevier <- articles_cited[articles_cited$host_organization == "Elsevier BV", ]
# 3. Springer
publisher_springer <- articles_cited[articles_cited$host_organization == "Springer Science+Business Media", ]
# Some of open source publishers
publisher_plos <-articles_cited[articles_cited$host_organization == "Public Library of Science", ]
publisher_aaas <-articles_cited[articles_cited$host_organization == "American Association for the Advancement of Science", ]
publisher_nature <-articles_cited[articles_cited$host_organization == "Nature Portfolio", ]
publisher_cdc <- articles_cited[articles_cited$host_organization == "Centers for Disease Control and Prevention", ]
publisher_ua <- articles_cited[articles_cited$host_organization == "University of Arizona", ]
publisher_uap <- articles_cited[articles_cited$host_organization == "University of Arizona Press", ]
#### Find duplicates #####
# change DF here
df <-publisher_elsevier
# Find the rows that are duplicated
duplicate_rows <- df[duplicated(df) | duplicated(df, fromLast = TRUE), ]
# Create a table to count the frequency of duplicated rows
#duplicate_frequency <- table(apply(duplicate_rows, 1, paste, collapse = "-"))
duplicate_frequency <- table(duplicate_rows$id)
# show more than 10 times cited. change "10" to any number
duplicated_ids <- duplicate_frequency[duplicate_frequency > 10]
# View the result
print(duplicate_frequency)
# View the result
print(duplicate_ids)
# show more than 10 times cited. change "10" to any number
duplicate_ids <- duplicate_frequency[duplicate_frequency > 10]
# View the result
print(duplicate_ids)
# Find it from the original article
search_string <- "https://openalex.org/W2594545996"
indices_with_string <- which(sapply(org_works$referenced_works, function(x) search_string %in% x))
print(indices_with_string)
org_works[indices_with_string, ]$id
# Save the modified dataset to Excel
write_xlsx(publisher_NA, "citations/publisher_NA_2019.xlsx")
write_xlsx(publisher_aaas, "citations/publisher_aaas_2019.xlsx")
write_xlsx(publisher_aaas, "citations/publisher_aaas_2019.xlsx")
write_xlsx(publisher_nature, "citations/publisher_nature_2019.xlsx")
write_xlsx(publisher_plos, "citations/publisher_plos_2019.xlsx")
######################################
######################################
### Function: To count journal occurrences for a given publisher
# @param: dataframe articles_cited
#          publisher_name
# return: journal and counts cited
count_journals_by_publisher <- function(articles_cited, publisher_name) {
# Filter rows where host_organization matches the specified publisher
publisher1 <-  articles_cited[grepl(publisher_name, articles_cited$host_organization, ignore.case = TRUE), ]
# Count the occurrences of each journal under the specified publisher
journal_counts <- table(publisher1$so)
journal_counts_df <- as.data.frame(journal_counts)
return(journal_counts_df)
}
publisher_name <- "Microbiology society"
journal_counts_df <- count_journals_by_publisher(articles_cited, publisher_name)
print(journal_counts_df)
publisher_name <- "Optica Publishing Group"
publisher1 <-  articles_cited[grepl(publisher_name, articles_cited$host_organization, ignore.case = TRUE), ]
journal_counts_df <- count_journals_by_publisher(articles_cited, publisher_name)
print(journal_counts_df)
publisher_name <- "Canadian Science Publishing"
publisher1 <-  articles_cited[grepl(publisher_name, articles_cited$host_organization, ignore.case = TRUE), ]
journal_counts_df <- count_journals_by_publisher(articles_cited, publisher_name)
print(journal_counts_df)
# Group by 'host_organization' and count the number of articles for each publisher
publisher_ranking <- articles_cited %>%
group_by(host_organization) %>%
summarise(article_count = n()) %>%
arrange(desc(article_count))
library(ggplot2)
top_20_publishers <- publisher_ranking %>% slice(1:20)
top_20_publishers$percentage <- (top_20_publishers$article_count / sum(top_20_publishers$article_count)) * 100
top_20_publishers$host_organization <- substr(top_20_publishers$host_organization, 1, 10)
# Bar plot for top 20 publishers
ggplot(top_20_publishers, aes(x = reorder(host_organization, -article_count), y = article_count)) +
geom_bar(stat = "identity", fill = "steelblue") +
# Real number (article count) inside the bar
geom_text(aes(label = article_count), vjust = 0.5, hjust = 1.2, size = 2.5, color = "white") +
# Adjust hjust and color for positioning inside
# Percentage outside the bar
geom_text(aes(label = sprintf("(%.1f%%)", percentage)), vjust = 0.5, hjust = -0.2, size = 3) +
# Adjust hjust for positioning outside
coord_flip() +  # Flip the axis for better readability
labs(x = "Publisher", y = "Number of Articles", title = "2020 UA Top 20 Publishers (Number of Articles Cited)") +
theme_minimal() +
theme(axis.text.y = element_text(size = 7))  # Reduce font size of publisher names
# Bar plot for top 20 publishers
ggplot(top_20_publishers, aes(x = reorder(host_organization, -article_count), y = article_count)) +
geom_bar(stat = "identity", fill = "steelblue") +
# Real number (article count) inside the bar
geom_text(aes(label = article_count), vjust = 0.5, hjust = 1.2, size = 2.5, color = "white") +
# Adjust hjust and color for positioning inside
# Percentage outside the bar
geom_text(aes(label = sprintf("(%.1f%%)", percentage)), vjust = 0.5, hjust = -0.2, size = 3) +
# Adjust hjust for positioning outside
coord_flip() +  # Flip the axis for better readability
labs(x = "Publisher", y = "Number of Articles", title = "2019 UA Top 20 Publishers (Number of Articles Cited)") +
theme_minimal() +
theme(axis.text.y = element_text(size = 7))  # Reduce font size of publisher names
rank_top_cited_journals <- function(data, journal_col, top_n = 10) {
top_cited_journals <- data %>%
group_by(!!sym(journal_col)) %>%      # Group by the journal names (column provided by the user)
summarise(citation_count = n()) %>%   # Count the number of articles per journal
arrange(desc(citation_count)) %>%     # Sort by citation count in descending order
slice(1:top_n)                        # Select top 'n' journals
print(top_cited_journals, n = top_n)
}
rank_top_cited_journals(publisher_plos, "so")
rank_top_cited_journals(publisher_aaas, "so")
rank_top_cited_journals(publisher_nature, "so")
#### Find duplicates and frequencies #####
# change DF here
df <-articles_cited
# Find the rows that are duplicated
duplicate_rows <- df[duplicated(df) | duplicated(df, fromLast = TRUE), ]
# Create a table to count the frequency of duplicated rows
#duplicate_frequency <- table(apply(duplicate_rows, 1, paste, collapse = "-"))
duplicate_frequency <- table(duplicate_rows$id)
# show more than 10 times cited. change "10" to any number
duplicate_ids <- duplicate_frequency[duplicate_frequency > 10]
duplicate_multi_cited_rows <-df[duplicate_ids, ]
# Find the rows that are duplicated
duplicate_rows <- df[duplicated(df) | duplicated(df, fromLast = TRUE), ]
# Create a table to count the frequency of duplicated rows
#duplicate_frequency <- table(apply(duplicate_rows, 1, paste, collapse = "-"))
duplicate_frequency <- table(duplicate_rows$id)
# show more than 10 times cited. change "10" to any number
duplicate_ids <- names(duplicate_frequency[duplicate_frequency > 10])
print(duplicate_ids)
duplicate_multi_cited_rows <- df[df$id %in% duplicate_ids, ]
write_xlsx(duplicate_rows, "citations/multiple_cites_2019.xlsx")
write_xlsx(duplicate_multi_cited_rows, "citations/duplicate_multi_cited_2019.xlsx")
max_length <- 32767
duplicate_multi_cited_rows_trimmed <- duplicate_multi_cited_rows
duplicate_multi_cited_rows_trimmed[] <- lapply(duplicate_multi_cited_rows_trimmed, function(x) {
if (is.character(x)) {
substr(x, 1, max_length)
} else {
x
}
})
write_xlsx(duplicate_multi_cited_rows, "citations/duplicate_multi_cited_2019.xlsx")
write_xlsx(duplicate_multi_cited_rows_trimmed, "citations/duplicate_multi_cited_2019.xlsx")
View(duplicate_multi_cited_rows_trimmed)
duplicate_multi_cited_rows <- duplicate_multi_cited_rows %>%   mutate(across(where(is.character), ~ ifelse(nchar(.) > 32767, substr(., 1, 32767), .)))
write_xlsx(duplicate_multi_cited_rows, "citations/duplicate_multi_cited_2019.xlsx")
write_xlsx(duplicate_multi_cited_rows, "citations/duplicate_multi_cited_2019.xlsx")
duplicate_multi_cited_rows_unique <- duplicate_multi_cited_rows[!duplicated(duplicate_multi_cited_rows)]
# Remove duplicate rows from duplicate_multi_cited_rows
duplicate_multi_cited_rows_unique <- duplicate_multi_cited_rows[!duplicated(duplicate_multi_cited_rows), ]
write_xlsx(duplicate_multi_cited_rows, "citations/duplicate_multi_cited_unique_2019.xlsx")
write_xlsx(duplicate_multi_cited_rows_unique, "citations/duplicate_multi_cited_unique_2019.xlsx")
