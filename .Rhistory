works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; Not sure why there is only 1 record. I have 14 works at ORCID's website
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; Not sure why there is only 1 record. I have 14 works at ORCID's website
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
# common libraries to add
library(openalexR)
library(dplyr)
library(ggplot2)
library(knitr)
works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; Not sure why there is only 1 record. I have 14 works at ORCID's website
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
works_from_orcids |>
show_works()  |>
knitr::kable()
##### Getting authors' info using their ORCIDs
authors_from_orcids <- oa_fetch(
entity = "authors",
# orcid = c("0000-0001-9518-2684"),
orcid =  c("0000-0001-6187-6610", "0000-0002-8517-9411", "0000-0003-1613-5981") # working right
)
str(authors_from_orcids) # show the object
authors_from_orcids |>
show_authors() |>
knitr::kable()
##### Getting authors' info using their ORCIDs
authors_from_orcids <- oa_fetch(
entity = "authors",
# orcid = c("0000-0001-9518-2684"),
orcid =  c("0000-0001-6187-6610", "0000-0002-8517-9411", "0000-0003-1613-5981", "0000-0001-9518-2684") # working right
)
str(authors_from_orcids) # show the object
authors_from_orcids |>
show_authors() |>
knitr::kable()
###################### Author's name ####################################
###  use search for fuzzy name (middle name),
###  do NOT use display_name because it requires an exact match. Often there are multiple middle names for an author
authors_from_names <- oa_fetch(entity = "author",
search = "Phillip Kuo")  ### "search" syntax allowes fuzzy search for middle name
authors_from_names
authors_from_names$id
authors_from_names$affiliation_display_name
grep("Arizona*", authors_from_names$affiliation_display_name, value=TRUE, ignore.case=TRUE)
authors_from_names |>
show_authors() |>
knitr::kable()
org_args <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
# last_known_institution.id = "I71267560", # I71267560 is University of Naples Federio II OpenAlex ID
works_count = ">0"
)
View(org_args)
do.call(oa_fetch, c(org_args, list(count_only = TRUE)))
# Top authors
org_args2 <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
works_count = ">499"
)
do.call(oa_fetch, c(org_args2, list(count_only = TRUE)))
# Download the list
all_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
do.call(oa_fetch, c(org_args, list(count_only = TRUE)))
# Download the list
all_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
# Top authors
org_args2 <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
works_count = ">499"
)
do.call(oa_fetch, c(org_args2, list(count_only = TRUE)))
top_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
View(authors_from_names)
show(top_authors)
show(all_authors)
author_from_openalex_id <-oa_fetch(entity = "author",
openalex = "A4353996111" )
author_from_openalex_id
View(author_from_openalex_id)
View(author_from_openalex_id[[9]][[1]])
author_works <- oa_fetch ( entity = "works",
author.id=("A4353996111"),
verbose = TRUE
) %>%
show_works() %>%
knitr:kable()
library(knitr)
authors_from_orcids |>
show_authors() |>
knitr::kable()
author_works <- oa_fetch ( entity = "works",
author.id=("A4353996111"),
verbose = TRUE
) %>%
show_works() %>%
knitr:kable()
author_works <- oa_fetch ( entity = "works",
author.id=("A4353996111"),
verbose = TRUE
)
show_works(author_works) |> knitr:kable()
show_works(author_works)
View(author_from_openalex_id)
View(author_from_openalex_id)
View(author_works)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("ropensci/openalexR", force=TRUE)
# common libraries
library(openalexR)
library(dplyr)
library(ggplot2)
library(knitr)
library(testthat)
library(readr)
# check to see if openAlexR has the latest entities in OpenAlex (OpenAlex updated its data model(Entities) in June 2023)
# Before April 2023: they are [1] "works"        "authors"      "venues"       "institutions" "concepts"
# If not, need to use openalexR developer's version
oa_entities()
options (openalexR.mailto="yhan@arizona.edu")
getwd()
setwd("/home/yhan/Documents/openalexR-test")
### Test data
test_data_COM_authors     <- c("Phillip Kuo", "Bekir Tanriover", "Ahlam Saleh")
test_data_affiliation <- c("University of Arizona")
test_data_year <- c("2022", "2021", "2020", "2012")
author_from_names <- oa_fetch(entity = "author", search = "Bekir Tanriover" )
View(author_from_names)
View(author_from_names[[15]][[1]])
View(author_from_names[[9]][[1]])
View(author_from_names[[9]][[1]])
author_from_names <- oa_fetch(entity = "author", search = "Haw-chih Tai")
View(author_from_names)
author_from_names <- oa_fetch(entity = "author", search = "Yan Han")
View(author_from_names)
View(author_from_names[[9]][[18]])
author_from_names <- oa_fetch(entity = "author", search = "Hong Cui")
View(author_from_names)
View(author_from_names[[9]][[10]])
# Test works
works_from_dois <- oa_fetch(entity = "works", doi = c("https://doi.org/10.1681/asn.2012070664", "https://doi.org/10.1007/s11192-013-1221-3"),  verbose = TRUE)
View(works_from_dois)
View(works_from_dois[[26]][[1]])
# use "search" option with no middle name
author_from_names <- oa_fetch(entity = "author", search = test_data_COM_authors[2])
View(author_from_names)
View(author_from_names[[9]][[1]])
# show the records
str(works_from_dois, max.level=2)
head(works_from_dois)
show_works(works_from_dois)
works_from_dois |>
show_works() |>
knitr::kable()
works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; Not sure why there is only 1 record. I have 14 works at ORCID's website
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
works_from_orcids |>
show_works()  |>
knitr::kable()
###  use disp_name
# authors_from_names <- oa_fetch(entity = "authors",
authors_from_names <- oa_fetch(entity = "author",
search = "Phillip Kuo")  ### Search allowing fuzzy search for middle name
View(works_from_orcids)
View(works_from_orcids[[3]][[1]])
View(authors_from_names)
authors_from_names
authors_from_names$id
authors_from_names$affiliation_display_name
grep("Arizona*", authors_from_names$affiliation_display_name, value=TRUE, ignore.case=TRUE)
authors_from_names |>
show_authors() |>
knitr::kable()
# Test works
works_from_dois <- oa_fetch(entity = "works", doi = c("https://doi.org/10.1681/asn.2012070664", "https://doi.org/10.1007/s11192-013-1221-3"),  verbose = TRUE)
View(works_from_dois)
### Test data
test_data_UAL_authors     <- c("Yan Han", "Ellen Dubinski", "Fernando Rios", "Ahlam Saleh")
test_data_COM_authors     <- c("Phillip Kuo", "Bekir Tanriover", "Ahlam Saleh")
test_data_COM_Tucson_authors <- c("Che Carrie Liu", "Robert M. Aaronson", "Alexa Aasronson", "Mohammed Abbas", "")
test_data_science_authors <- c("Marek Rychlik", "Ali Bilgin", "Beichuan Zhang")
test_data_ischool_authors <- c("Hong Cui")
test_data_others          <- c("Leila Hudson", "Mona Hymel")
test_data_not_updated_authors <-c("Karen Padilla", "Haw-chih Tai")
test_data_affiliation <- c("University of Arizona")
test_data_year <- c("2022", "2021", "2020", "2012")
# use "search" option with no middle name
author_from_names <- oa_fetch(entity = "author", search = test_data_COM_authors[1])
# first checking if author exists
if (!is.null(author_from_names)) {
print("author found")
# Filter out not "University of Arizona" authors using "affiliation_display_name" column.
# other filtering fields can be "affiliation_id", "affiliation_ror"
filtered_authors <- subset(author_from_names, grepl("University of Arizona", affiliation_display_name, ignore.case=TRUE))
if (nrow(filtered_authors) == 0 )  {
print("The filtered_authors dataframe is empty")
}
}
# print openalex ID
print(filtered_authors)
print(filtered_authors[1][1])
## Testing
openalex_author_id <- filtered_authors$id[1]
author_works <- oa_fetch ( entity = "works",
author.id=(openalex_author_id),
verbose = TRUE )
View(filtered_authors)
object_type <- class(author_works)
print(object_type)
# Filter publications after year 2020
filtered_author_works <- author_works %>%
filter(substr(publication_date, 1,4) >"2020")
# Filter source of work
so_values <- filtered_author_works$so
#convert author_works$author (list) to , separated by "," using sapply
# List "author" contains all the authors info
filtered_author_works$author <- sapply(filtered_author_works$author, paste, collapse = ",")
# List "ids" contains openAlexId, doi, and pmid
filtered_author_works$ids <- sapply(filtered_author_works$ids, paste, collapse = ",")
# List "referenced_works" contains references
filtered_author_works$referenced_works <- sapply(filtered_author_works$referenced_works, paste, collapse = ",")
# List "related_works" contains related works
filtered_author_works$related_works <- sapply(filtered_author_works$related_works, paste, collapse = ",")
filtered_author_works$counts_by_year <- NULL
filtered_author_works$concepts <- NULL
field_names <-colnames(filtered_author_works)
print(field_names)
# Testing multiple authors
openalex_ids_authors <- c("A4353685810", "A4354460443")
# Create an empty list to store the downloaded data for each author
authors_data <- list()
# Iterate over the author IDs and download data for each
for (id in openalex_ids_authors) {
authors_data[[id]] <- oa_fetch(entity = "author", openalex = id)
}
# 3. Now that we have data in list, iterate over the list elements
for (author_data in authors_data) {
#print(author_data)
print(author_data$works_count)
print(author_data$counts_by_year)
}
### Benkir Tanriover returns 5 openAlex ID: 2022: works 11, cited 166; 2021: works 4 cited 167
###: 2023-07: after authorID updates: NULL (??? error )
author_stats <- calculate_works_count(test_data_COM_authors[2], test_data_affiliation[1], test_data_year[1])
#####################################################
# Function: Calculate works count
#####################################################
calculate_works_count <- function(author, affiliation, year) {
# getting data from openAlexR API
author_from_names <- oa_fetch(entity = "author", search = author )
if (is.null(author_from_names)) {
author_stats <- NULL
}
else {
# Filter out not "University of Arizona" authors using "affiliation_display_name" column.
# other filtering fields can be "affiliation_id", "affiliation_ror"
filtered_authors <- subset(author_from_names, grepl(affiliation, affiliation_display_name, ignore.case=TRUE))
print(filtered_authors)
# If NOT found the author, return NULL
if (nrow(filtered_authors) == 0 )  {
author_stats <- NULL
}
else {
# works_count is a list, getting "counts_by_year" column
works_count  <- filtered_authors$counts_by_year
print(works_count)
works_sum_year <- 0
total_works_sum_year <- 0
# cited_by_count is a list
cited_by_count <- filtered_authors$cited_by_count
cited_sum_year <- 0
total_cited_sum_year <-0
# check the works_count
for (i in 1:length(works_count)) {
# Access the data frame within the list
df <- works_count[[i]]
if (is.data.frame(df)) {
# Filter the data frame by year
filtered_df_year <- df[df$year == year, ]
# Calculate the sum of the filtered 'works_count' column
works_sum_year <- sum(filtered_df_year$works_count)
total_works_sum_year <- total_works_sum_year + works_sum_year
# Calculate the sum of the filtered 'cited_by_count' column
cited_sum_year <- sum(filtered_df_year$cited_by_count)
total_cited_sum_year <- total_cited_sum_year + cited_sum_year
# reset this number to 0 after each iteration
works_sum_year <- 0
cited_sum_year <- 0
} else {
##### Note: If you see error msg: Error: $ operator is invalid for atomic vectors
# That means certain works_count  is logical and has no data
print("This is NOT a dataframe. Data Wrong")
# set value as -1 for warning message
Total_sum_of_works = -1
Total_cited_sum_year = -1
}
} # for loop
# Build output dataframe author_stats
author_stats <-data.frame (
Name = author,
OpenAlexId = filtered_authors$id,
Year = year,
Total_sum_of_works = total_works_sum_year,
Total_sum_of_cited = total_cited_sum_year
)
# reset the var after done
total_works_sum_year <- 0
total_cited_sum_year <- 0
} # if
return (author_stats)
}
}
############# College of Medicine Tucson Test Date:  2023-05-14: If test in a different date, result may vary
#### U of Arizona College of Medicine Faculty and Staff Directory https://medicine.arizona.edu/directory/faculty-staff
#### Phillip Kuo: 2022: 30/133: 26 IDs
####            : 2023-07: after authorID updates: 17/330
author_stats <- calculate_works_count(test_data_COM_authors[1], test_data_affiliation[1], test_data_year[1])
View(author_stats)
### Benkir Tanriover returns 5 openAlex ID: 2022: works 11, cited 166; 2021: works 4 cited 167
###: 2023-07: after authorID updates: NULL (??? error )
author_stats <- calculate_works_count(test_data_COM_authors[2], test_data_affiliation[1], test_data_year[1])
###  Ahlam Saleh returns 0, because of "One list does not contain a valid OpenAlex collection" ????
author_stats <- calculate_works_count(test_data_COM_authors[3], test_data_affiliation[1], test_data_year[1])
###### College of Medicine Tucson
author_stats <- calculate_works_count(test_data_COM_Tucson_authors[1], test_data_affiliation[1], test_data_year[1])
author_stats <- calculate_works_count(test_data_COM_Tucson_authors[2], test_data_affiliation[1], test_data_year[1])
author_stats <- calculate_works_count(test_data_COM_Tucson_authors[3], test_data_affiliation[1], test_data_year[1])
author_stats <- calculate_works_count(test_data_COM_Tucson_authors[4], test_data_affiliation[1], test_data_year[1])
author_stats <- calculate_works_count(test_data_COM_Tucson_authors[5], test_data_affiliation[1], test_data_year[1])
