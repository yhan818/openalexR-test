works_from_orcids |>
show_works()  |>
knitr::kable()
works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; have 14 works at ORCID's website. OpenAlex does not pull works from ORCID at the moment. It pulls majorly from Microsoft academic graph
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
works_from_orcids |>
show_works()  |>
knitr::kable()
### Aug 2023: Yan Han: affiliation Jilin university. Wrong
##### Getting authors' info using their ORCIDs
authors_from_orcids <- oa_fetch(
entity = "authors",
orcid =  c("0000-0001-6187-6610", "0000-0002-8517-9411", "0000-0003-1613-5981", "0000-0001-9518-2684")
)
str(authors_from_orcids) # show the object
authors_from_orcids |>
show_authors() |>
knitr::kable()
#################### Author's openAlex ID ###########################
### Sep 2023: old authorID was removed.
author_from_openalex_id <-oa_fetch(entity = "author", openalex = "A4353996111" )
###################### Author's name ####################################
###  use search for fuzzy name (middle name),
###  do NOT use display_name because it requires an exact match. Often there are multiple middle names for an author
authors_from_names <- oa_fetch(entity = "author",
search = "Phillip Kuo")  ### "search" syntax allowes fuzzy search for middle name
authors_from_names
authors_from_names$id
authors_from_names$affiliation_display_name
grep("Arizona*", authors_from_names$affiliation_display_name, value=TRUE, ignore.case=TRUE)
authors_from_names |>
show_authors() |>
knitr::kable()
# All authors
org_args <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
works_count = ">0"
)
# July 2023: 58,183 records.
# Sep 2023: 26,801 records. (Note: author disambuition system changed in Aug 2023)
do.call(oa_fetch, c(org_args, list(count_only = TRUE)))
# Download the list
all_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
show(all_authors) # already sorted by total number of works_count
# Top authors
org_args2 <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
works_count = ">499"
)
# 72 authors
do.call(oa_fetch, c(org_args2, list(count_only = TRUE)))
top_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
# common libraries to add
library(openalexR)
library(dplyr)
library(ggplot2)
library(knitr)
library(writexl)
works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; have 14 works at ORCID's website. OpenAlex does not pull works from ORCID at the moment. It pulls majorly from Microsoft academic graph
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; have 14 works at ORCID's website. OpenAlex does not pull works from ORCID at the moment. It pulls majorly from Microsoft academic graph
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
works_from_orcids |>
show_works()  |>
knitr::kable()
# OpenAlex R Documentation: https://github.com/ropensci/openalexR
#install.packages("openalexR")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("ropensci/openalexR", force=TRUE)
# Before we go any further, we highly recommend you set openalexR.mailto option so that your requests go to the polite pool for faster response times:
options (openalexR.mailto="yhan@arizona.edu")
# common libraries to add
library(openalexR)
library(dplyr)
library(ggplot2)
library(knitr)
library(writexl)
works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; have 14 works at ORCID's website. OpenAlex does not pull works from ORCID at the moment. It pulls majorly from Microsoft academic graph
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
works_from_orcids |>
show_works()  |>
knitr::kable()
### Aug 2023: Yan Han: affiliation Jilin university. Wrong
##### Getting authors' info using their ORCIDs
authors_from_orcids <- oa_fetch(
entity = "authors",
orcid =  c("0000-0001-6187-6610", "0000-0002-8517-9411", "0000-0003-1613-5981", "0000-0001-9518-2684")
)
str(authors_from_orcids) # show the object
authors_from_orcids |>
show_authors() |>
knitr::kable()
#################### Author's openAlex ID ###########################
### Sep 2023: old authorID was removed.
author_from_openalex_id <-oa_fetch(entity = "author", openalex = "A4353996111" )
###################### Author's name ####################################
###  use search for fuzzy name (middle name),
###  do NOT use display_name because it requires an exact match. Often there are multiple middle names for an author
authors_from_names <- oa_fetch(entity = "author",
search = "Phillip Kuo")  ### "search" syntax allowes fuzzy search for middle name
authors_from_names
authors_from_names$id
authors_from_names$affiliation_display_name
grep("Arizona*", authors_from_names$affiliation_display_name, value=TRUE, ignore.case=TRUE)
authors_from_names |>
show_authors() |>
knitr::kable()
# All authors
org_args <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
works_count = ">0"
)
# July 2023: 58,183 records.
# Sep 2023: 26,801 records. (Note: author disambuition system changed in Aug 2023)
do.call(oa_fetch, c(org_args, list(count_only = TRUE)))
# Download the list
all_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
show(all_authors) # already sorted by total number of works_count
# Top authors
org_args2 <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
works_count = ">499"
)
# 72 authors
do.call(oa_fetch, c(org_args2, list(count_only = TRUE)))
View(org_args2)
# see the head of the authors' list
install.packages("listviewer")
library(listviewer)
jsonedit(top_authors)
head(top_authors)
top_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
show(top_authors)
jsonedit(top_authors)
head(top_authors)
#### Method 1: using ROR ID
university1 <-oa_fetch(
entity = "institutions",
identifier = "ror:03m2x1q45",
country_code = "us",
type = "education",
verbose = TRUE
)
### Method 2: using openAlex ID (MAG ID)
university2 <-oa_fetch(
entity = "institutions",
identifier = "I138006243",
country_code = "us",
type = "education",
verbose = TRUE
)
#### Method 3: using dplyr package
institutions <-oa_fetch(
entity = "institutions",
country_code = "us",
type = "education",
verbose = TRUE
)
### filtering by name
filtered_university1 <- institutions %>%
filter(display_name == "University of Arizona")
filtered_university2 <- institutions %>%
filter(display_name == "Arizona")
####################################
banner2 <-oa_fetch(
entity = "institutions",
identifier = "ror:039wwwz66",
country_code = "us",
type = "education",
verbose = TRUE
)
banner3 <-oa_fetch(
entity = "institutions",
identifier = "ror:01cjjjf51",
country_code = "us",
type = "education",
verbose = TRUE
)
# why no colleciton found??
banner2_authors <- oa_fetch(entity = "author", last_known_institution.ror="039wwwz66" )
### Getting all the works for an institution!
banner2_works <- oa_fetch (entity = "works", authorships.institutions.ror="039wwwz66", verbose = TRUE)
# you can ALSO use library (dplyr) to run:
# filtered_works_2020_2 <- works_from_institution %>% filter(publication_year == 2020)
banner2_works_2020 <- subset(banner2_works, publication_year == 2020)
banner2_works_2021 <- subset(banner2_works, publication_year == 2021)
banner2_works_2022 <- subset(banner2_works, publication_year == 2022)
######################## Finding a parent (having more than 1 ROR) ####################
# find all the records by ROR and year.
# Ran on 2023-10-06:
# Banner Health: containing more than one RORs.
# Note: b[0-9] number is based on the row number on the banner_healty_entity.xlsx
b2_works_2020 <- fetch_ror_year("039wwwz66", 2020)  # 2023-10-06: 92
######################## Finding a parent (having more than 1 ROR) ####################
# find all the records by ROR and year.
# Ran on 2023-10-06:
# Banner Health: containing more than one RORs.
# Note: b[0-9] number is based on the row number on the banner_healty_entity.xlsx
b2_works_2020 <- fetch_ror_year("039wwwz66", 2020)  # 2023-10-06: 92
######################## Finding a parent (having more than 1 ROR) #############
################################################################################
################################################################################
### Define a custom function to fetch and subset data
fetch_ror_year <- function(ror_id, year) {
# Fetch data for the given ROR ID
data <- oa_fetch(entity = "works", authorships.institutions.ror = ror_id, verbose = TRUE)
# Subset data for the specified year
subset_data <- subset(data, publication_year == year)
return(subset_data)
}
# find all the records by ROR and year.
# Ran on 2023-10-06:
# Banner Health: containing more than one RORs.
# Note: b[0-9] number is based on the row number on the banner_healty_entity.xlsx
b2_works_2020 <- fetch_ror_year("039wwwz66", 2020)  # 2023-10-06: 92
# Banner â€“ University Medical Center Phoenix
b3_works_2020 <- fetch_ror_year("01cjjjf51", 2020)  # 2023-10-06: 139
b6_works_2020 <- fetch_ror_year("023jwkg52", 2020) # 2023-10-06: 0
b13_works_2020 <- fetch_ror_year("00sr2h055", 2020) # 2023-10-06: 0
b16_works_2020 <- fetch_ror_year("04mvgap27", 2020) # 3
# Banner Estrella Medical Center
b17_works_2020 <- fetch_ror_year("05ct0ag17", 2020) # 11
b19_works_2020 <- fetch_ror_year("05gfbdk85", 2020) # 0
b13_works_2020 <- fetch_ror_year("00sr2h055", 2020) # 2023-10-06: 0; 2023-11-17: 0
b15_works_2020 <- fetch_ror_year("01jjm6w53", 2020) # 4
b16_works_2020 <- fetch_ror_year("04mvgap27", 2020) # 3; 2023-11-17:
b19_works_2020 <- fetch_ror_year("05gfbdk85", 2020) # 2023-10-06: 0; 2023-11-17: 0
b20_works_2020 <- fetch_ror_year("049c9q337", 2020) # 2023-10-06: 0; 2023-11-17: 0
b23_works_2020 <- fetch_ror_year("03y8jje75", 2020) # 2023-10-06: 1; 2023-11-17: 1
b25_works_2020 <- fetch_ror_year("03vq5n859", 2020) # 0
b23_works_2020 <- fetch_ror_year("03y8jje75", 2020) # 2023-10-06: 1; 2023-11-17: 1
b25_works_2020 <- fetch_ror_year("03vq5n859", 2020) # 2023-10-06: 0; 2023-11-17: 0
b29_works_2020 <- fetch_ror_year("02s49nq19", 2020) # 2023-10-06: 0; 2023-11-17: 0
b31_works_2020 <- fetch_ror_year("033a24x98", 2020) # 2023-10-06: 0; 2023-11-17: 0
# Banner Sun Health Research Institute
# check "Highly Sensitive and Multiplexed In-Situ Protein Profiling with Cleavable Fluorescent Streptavidin". why included?
b35_works_2020 <- fetch_ror_year("04gjkkf30", 2020) # 2023-10-06: 0; 2023-11-17: 0
# Banner Thunderbird Medical Center
b37_works_2020 <- fetch_ror_year("01kqrgb09", 2020) # 2023-10-06: 18; 2023-11-17: 18
# Banner - University Medical Center Tucson
b39_works_2020 <- fetch_ror_year("02xbk5j62", 2020) # 2023-10-13: 243; 2023-11-17: 0
b42_works_2020 <- fetch_ror_year("035dcj063", 2020) # 2023-10-06: 0; 2023-11-17: 0
b51_works_2020 <- fetch_ror_year("05e33tw76", 2020) # 2023-10-06: 0; 2023-11-17: 0
b53_works_2020 <- fetch_ror_year("01phkkj35", 2020) # 2023-10-06: 0; 2023-11-17: 4
#### Merge all the units' df
banner_works_2020 <- rbind(b2_works_2020, b3_works_2020, b15_works_2020, b16_works_2020, b17_works_2020)
# Continue to merge b20 - b50
banner_works_2020 <- rbind(banner_works_2020, b23_works_2020, b29_works_2020, b35_works_2020, b37_works_2020, b39_works_2020, b42_works_2020, b51_works_2020, b53_works_2020)
# This is the final. 2023-10-10: 554
all_banner_works_openalex_2020 <- unique(banner_works_2020)
# Assuming all_banner_works_2020$author is a list of data frames
column_name <- "institution_display_name"
# Use sapply() to check the class of the specified column in each data frame
column_classes <- sapply(all_banner_works_openalex_2020$author, function(df) {
class(df[[column_name]])
})
# Assuming all_banner_works_2020$author is a list of data frames
word_to_find <- "Banner"
# Use lapply() to search for the word in each data frame within the list
word_found_list <- lapply(all_banner_works_openalex_2020$author, function(df) {
grepl(word_to_find, df$institution_display_name)
})
# Assuming word_found_list is a list containing logical vectors
# Check if the first logical vector contains at least one "TRUE" value
contains_true <- any(word_found_list[[1]])
contains_true_list <- sapply(word_found_list, function(vector) {
any(vector)
})
# The 'contains_true_list' will be a logical vector indicating whether each vector contains at least one "TRUE"
# Find the row numbers where contains_true_list is FALSE
false_rows <- which(!contains_true_list)
# Assuming you have two data frames: b2_works_2020 and b3_works_2020
# Find duplicate rows in b2_works_2020 and b3_works_2020
duplicates_b2 <- banner_works_2020[duplicated(banner_works_2020), ]
duplicates_b3 <- all_banner_works_openalex_2020[duplicated(all_banner_works_2020), ]
write_xlsx(duplicates_b2, "final_banner_collab_works_2020.xls")
# Output to xls
getwd()
setwd("/home/yhan/Documents/UA-datasets/openalexR-test")
write_xlsx(all_banner_works_openalex_2020, "final_banner_works_2020.xls")
scopus_data <- read.csv("scopus_banner_health_2020.csv")
library(ggplot2)
ggplot(data = df, aes(x = year, y = document_count)) +
geom_col() +
theme_minimal() +
labs(x = "Year", y = "Number of Documents", title = "Documents by Year")
ggplot(data = duplicates_b2, aes(x = year, y = document_count)) +
geom_col() +
theme_minimal() +
labs(x = "Year", y = "Number of Documents", title = "Documents by Year")
ggplot(data = duplicates_b2, aes(x = 2020, y = document_count)) +
geom_col() +
theme_minimal() +
labs(x = "Year", y = "Number of Documents", title = "Documents by Year")
View(duplicates_b2)
View(banner_works_2020)
ggplot(data = banner_works_2020, aes(x = publication_year, y = cited_by_count)) +
geom_col() +
theme_minimal() +
labs(x = "Year", y = "Number of Documents", title = "Documents by Year")
# Example vectors
affiliations <- c("Banner - University Medical Center Tucson",
"The University of Arizona",
"Banner - University Medical Center Phoenix",
"Banner Alzheimer's Institute",
"University of Arizona College of Medicine - Tucson",
"Banner Sun Health Research Institute",
"University of Arizona College of Medicine - Phoenix",
"Mayo Clinic",
"Harvard Medical School",
"Banner Health")
document_counts <- c(120, 80, 60, 50, 45, 30, 25, 20, 15, 10)  # Example counts
# Create the data frame
df <- data.frame(Affiliation = affiliations, Documents = document_counts)
# Order the data frame by document count in descending order
df <- df[order(-df$Documents),]
# Reset the row names to avoid confusion
rownames(df) <- seq(length(df$Documents))
# View the data frame
print(df)
ggplot(df, aes(x = Affiliation, y = Documents)) +
geom_bar(stat = "identity", aes(fill = Affiliation)) +  # Use 'identity' to tell ggplot to use the actual 'Documents' values
coord_flip() +  # Flip the axes to make the bars horizontal
labs(x = "Number of Documents", y = "Affiliation", title = "Documents by Affiliation") +
theme_minimal() +  # Use a minimal theme for a clean look
scale_fill_viridis_d(guide = FALSE) +  # Optional: Use a discrete viridis color scale and remove the legend
theme(axis.text.x = element_text(size = 10),  # Adjust the size of x-axis texts
axis.title.x = element_text(size = 12),  # Adjust the size of x-axis title
axis.title.y = element_blank(),  # Remove y-axis title
panel.grid.major.x = element_line(color = "gray80", size = 0.5),  # Lighten the grid lines
panel.grid.minor.x = element_blank(),  # Remove minor grid lines
panel.background = element_blank(),  # Remove panel background
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(df, aes(x = reorder(Affiliation, -Documents), y = Documents)) +
geom_bar(stat = "identity") +  # Use 'identity' to tell ggplot to use the actual 'Documents' values
coord_flip() +  # Flip the axes to make the bars horizontal
labs(x = "Number of Documents", y = "", title = "Documents by Affiliation") +
theme_minimal() +  # Use a minimal theme for a clean look
theme(axis.text.y = element_text(size = 10),  # Adjust the size of y-axis texts (which are the x-axis texts after coord_flip)
axis.title.y = element_blank(),  # Remove y-axis title (which is the x-axis title after coord_flip)
axis.title.x = element_text(size = 12),  # Adjust the size of x-axis title (which is the y-axis title after coord_flip)
panel.grid.major.y = element_line(color = "gray80", size = 0.5),  # Lighten the grid lines (y grid lines after coord_flip)
panel.grid.minor.y = element_blank(),  # Remove minor grid lines (y minor grid lines after coord_flip)
panel.background = element_blank(),  # Remove panel background
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(df, aes(x = reorder(Affiliation, -Documents), y = Documents)) +
geom_bar(stat = "identity", aes(fill = affiliation)) +  # Use 'identity' to tell ggplot to use the actual 'Documents' values
coord_flip() +  # Flip the axes to make the bars horizontal
labs(x = "Number of Documents", y = "", title = "Documents by Affiliation") +
theme_minimal() +  # Use a minimal theme for a clean look
theme(axis.text.y = element_text(size = 10),  # Adjust the size of y-axis texts (which are the x-axis texts after coord_flip)
axis.title.y = element_blank(),  # Remove y-axis title (which is the x-axis title after coord_flip)
axis.title.x = element_text(size = 12),  # Adjust the size of x-axis title (which is the y-axis title after coord_flip)
panel.grid.major.y = element_line(color = "gray80", size = 0.5),  # Lighten the grid lines (y grid lines after coord_flip)
panel.grid.minor.y = element_blank(),  # Remove minor grid lines (y minor grid lines after coord_flip)
panel.background = element_blank(),  # Remove panel background
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(df, aes(x = reorder(Affiliation, -Documents), y = Documents)) +
geom_bar(stat = "identity", aes(fill = affiliation)) +  # Use 'identity' to tell ggplot to use the actual 'Documents' values
coord_flip() +  # Flip the axes to make the bars horizontal
labs(x = "Number of Documents", y = "", title = "Documents by Affiliation") +
theme_minimal() +  # Use a minimal theme for a clean look
theme(axis.text.y = element_text(size = 10),  # Adjust the size of y-axis texts (which are the x-axis texts after coord_flip)
axis.title.y = element_blank(),  # Remove y-axis title (which is the x-axis title after coord_flip)
axis.title.x = element_text(size = 12),  # Adjust the size of x-axis title (which is the y-axis title after coord_flip)
panel.grid.major.y = element_line(color = "gray80", size = 0.5),  # Lighten the grid lines (y grid lines after coord_flip)
panel.grid.minor.y = element_blank(),  # Remove minor grid lines (y minor grid lines after coord_flip)
panel.background = element_blank(),  # Remove panel background
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(df, aes(x = reorder(Affiliation, -Documents), y = Documents)) +
geom_bar(stat = "identity", aes(fill = affiliation)) +  # Use 'identity' to tell ggplot to use the actual 'Documents' values
coord_flip() +  # Flip the axes to make the bars horizontal
labs(x = "Number of Documents", y = "", title = "Documents by Affiliation") +
theme_minimal() +  # Use a minimal theme for a clean look
scale_fill_viridis_d(guide = FALSE) +
theme(axis.text.y = element_text(size = 10),  # Adjust the size of y-axis texts (which are the x-axis texts after coord_flip)
axis.title.y = element_blank(),  # Remove y-axis title (which is the x-axis title after coord_flip)
axis.title.x = element_text(size = 12),  # Adjust the size of x-axis title (which is the y-axis title after coord_flip)
panel.grid.major.y = element_line(color = "gray80", size = 0.5),  # Lighten the grid lines (y grid lines after coord_flip)
panel.grid.minor.y = element_blank(),  # Remove minor grid lines (y minor grid lines after coord_flip)
panel.background = element_blank(),  # Remove panel background
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(df, aes(x = Affiliation, y = Documents)) +
geom_bar(stat = "identity", aes(fill = Affiliation)) +  # Use 'identity' to tell ggplot to use the actual 'Documents' values
coord_flip() +  # Flip the axes to make the bars horizontal
labs(x = "Number of Documents", y = "Affiliation", title = "Documents by Affiliation") +
theme_minimal() +  # Use a minimal theme for a clean look
scale_fill_viridis_d(guide = FALSE) +  # Optional: Use a discrete viridis color scale and remove the legend
theme(axis.text.x = element_text(size = 10),  # Adjust the size of x-axis texts
axis.title.x = element_text(size = 12),  # Adjust the size of x-axis title
axis.title.y = element_blank(),  # Remove y-axis title
panel.grid.major.x = element_line(color = "gray80", size = 0.5),  # Lighten the grid lines
panel.grid.minor.x = element_blank(),  # Remove minor grid lines
panel.background = element_blank(),  # Remove panel background
plot.title = element_text(hjust = 0.5))  # Center the plot title
ggplot(df, aes(x = reorder(Affiliation, -Documents), y = Documents)) +
geom_bar(stat = "identity", aes(fill = Affiliation)) +  # Use 'identity' to tell ggplot to use the actual 'Documents' values
coord_flip() +  # Flip the axes to make the bars horizontal
labs(x = "Number of Documents", y = "Affiliation", title = "Documents by Affiliation") +
theme_minimal() +  # Use a minimal theme for a clean look
scale_fill_viridis_d(guide = FALSE) +  # Optional: Use a discrete viridis color scale and remove the legend
theme(axis.text.x = element_text(size = 10),  # Adjust the size of x-axis texts
axis.title.x = element_text(size = 12),  # Adjust the size of x-axis title
axis.title.y = element_blank(),  # Remove y-axis title
panel.grid.major.x = element_line(color = "gray80", size = 0.5),  # Lighten the grid lines
panel.grid.minor.x = element_blank(),  # Remove minor grid lines
panel.background = element_blank(),  # Remove panel background
plot.title = element_text(hjust = 0.5))  # Center the plot title
install.packages("readxl")
library(readxl)
banner_df <- read_excel("Banner_health_entity.xlsx", sheet = "Sheet1")
head(banner_df)
b2 <- banner_df[, c("Organization Name", "ROR", "Scopus", "GRID")]
View(b2)
# Initialize an empty list to store each row's data frame
list_of_dfs <- vector("list", length = nrow(banner_df))
# Loop through each row and create a data frame with selected columns
for (i in seq_len(nrow(banner_df))) {
list_of_dfs[[i]] <- banner_df[i, c(1, 3, 4)]
}
View(banner_df)
# Loop through each row and create a data frame with selected columns
for (i in seq_len(nrow(banner_df))) {
list_of_dfs[[i]] <- b[i, c(1, 3, 4)]
}
View(list_of_dfs)
# Initialize an empty list to store each row's data frame
banner_dfs <- vector("list", length = nrow(banner_df))
# Loop through each row and create a data frame with selected columns
for (i in seq_len(nrow(banner_df))) {
banner_dfs[[i]] <- banner_df[i, c(1, 3, 4)]
}
View(banner_dfs)
banner_dfs[[1]]$works_2020 <- fetch_ror_year(banner_dfs[[1]]$ROR, 2020)  # 2023-10-06: 92 ; 2023-11-17: 94
value_df <- data.frame()
banner_dfs[[1]]$works_2020 <- value_df
banner_dfs[[1]]$works_2020 <- fetch_ror_year(banner_dfs[[1]]$ROR, 2020)  # 2023-10-06: 92 ; 2023-11-17: 94
value_df <- fetch_ror_year("02s49nq19", 2020) # 2023-10-06: 0; 2023-11-17: 0
banner_dfs[[1]]$works_2020 <- value_df
value_df1 <- fetch_ror_year("02s49nq19", 2020) # 0
banner_dfs[[1]]$works_2020 <- value_df1
banner_dfs[[1]]$works_2020 <- List(value_df)
value_df <- fetch_ror_year("02s49nq19", 2020) # 0
banner_dfs[[1]]$works_2020 <- List(value_df)
banner_dfs[[1]]$works_2020 <- list(value_df)
View(banner_dfs)
#banner_dfs[[1]]$works_2020 <- list(value_df)
banner_dfs[[1]]$works_2020 <- list(fetch_ror_year(banner_dfs[[1]]$ROR, 2020))  # 2023-10-06: 92 ; 2023-11-17: 94
View(banner_dfs)
# After getting all the info into the banner_dfs. Loop through it to fetch works
# This may run some minutes.
for (i in seq_along(banner_dfs)) {
banner_dfs[[i]]$works_2020 <- list(fetch_ror_year(banner_dfs[[i]]$ROR, 2020))  # 2023-10-06: 92 ; 2023-11-17: 94
}
# After getting all the info into the banner_dfs. Loop through it to fetch works
# This may run some minutes.
for (i in seq_along(banner_dfs)) {
# After getting all the info into the banner_dfs. Loop through it to fetch works
# This may run some minutes.
for (i in seq_along(banner_dfs) ) {
if ( !is.empty(banner_dfs[[i]]$ROR) ) {
banner_dfs[[i]]$works_2020 <- list(fetch_ror_year(banner_dfs[[i]]$ROR, 2020))
}
}
View(banner_dfs)
View(banner_dfs)
# After getting all the info into the banner_dfs. Loop through it to fetch works
# This may run some minutes.
for (i in seq_along(banner_dfs)) {
banner_dfs[[i]]$works_2020 <- list(fetch_ror_year(banner_dfs[[i]]$ROR, 2020))  # 2023-10-06: 92 ; 2023-11-17: 94
}
# Define the number of lists you want to create
num_lists <- 55
# Initialize an empty list to store your lists
vector_of_banner_dfs <- vector("list", num_lists)
