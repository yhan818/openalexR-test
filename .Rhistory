)
#### Method 3: using dplyr package
institutions <-oa_fetch(
entity = "institutions",
country_code = "us",
type = "education",
verbose = TRUE
)
### filtering by name
filtered_university1 <- institutions %>%
filter(display_name == "University of Arizona")
filtered_university2 <- institutions %>%
filter(display_name == "Arizona")
####################################
banner2 <-oa_fetch(  entity = "institutions",   identifier = "ror:039wwwz66",   country_code = "us",   type = "education",   verbose = TRUE)
banner3 <-oa_fetch(  entity = "institutions",  identifier = "ror:01cjjjf51",  country_code = "us",  type = "education", verbose = TRUE)
### banner2 <- lapply(banner2, function(x) if(is.list(x)) toString(x) else x)
## write.csv(banner2, file="banner2.csv")
# why no colleciton found??
banner2_authors <- oa_fetch(entity = "author", last_known_institution.ror="039wwwz66" )
### Getting all the works for an institution!
banner2_works <- oa_fetch (entity = "works", authorships.institutions.ror="039wwwz66", verbose = TRUE)
# you can ALSO use library (dplyr) to run:
# filtered_works_2020_2 <- works_from_institution %>% filter(publication_year == 2020)
banner2_works_2020 <- subset(banner2_works, publication_year == 2020)
banner2_works_2021 <- subset(banner2_works, publication_year == 2021)
banner2_works_2022 <- subset(banner2_works, publication_year == 2022)
### banner3:
banner3_works <- oa_fetch (entity = "works", authorships.institutions.ror="01cjjjf51", verbose = TRUE)
banner3_works_2020 <- subset(banner3_works, publication_year == 2020)
banner3_works_2021 <- subset(banner3_works, publication_year == 2021)
banner3_works_2022 <- subset(banner3_works, publication_year == 2022)
banner3_works_2020_df <-as.data.frame(banner3_works_2020)
write_xlsx(banner3_works_2020_df, "banner3_works_2020.xlsx")
duplicates3 <-banner3_works_2020$display_name %in% banner2_works_2020$display_name
duplicates4 <-banner4_works_2020$display_name %in% banner3_works_2020$display_name
### Attached each org's works to the banner_df
### success:
banner_df$works_yr_2000 <- list_of_dfs
### You can also run one by one
b2_works_2020 <- fetch_ror_year("039wwwz66", 2020)  # 2023-10-06: 92 ; 2023-11-17: 94
b3_works_2020 <- fetch_ror_year("01cjjjf51", 2020)  # 2023-10-06: 139; 2023-11-17: 140
b6_works_2020 <- fetch_ror_year("023jwkg52", 2020) # 2023-10-06: 0 ; 2023-11-17: 0
b13_works_2020 <- fetch_ror_year("00sr2h055", 2020) # 2023-10-06: 0; 2023-11-17: 0
b15_works_2020 <- fetch_ror_year("01jjm6w53", 2020) # 2023-10-06: 4; 2023-11-17: 4
b16_works_2020 <- fetch_ror_year("04mvgap27", 2020) # 2023-10-06: 3; 2023-11-17: 3
# Banner Estrella Medical Center
b17_works_2020 <- fetch_ror_year("05ct0ag17", 2020) # 2023-10-06: 11; 2023-11-17: 11
b19_works_2020 <- fetch_ror_year("05gfbdk85", 2020) # 2023-10-06: 0; 2023-11-17: 0
b20_works_2020 <- fetch_ror_year("049c9q337", 2020) # 2023-10-06: 0; 2023-11-17: 0
b23_works_2020 <- fetch_ror_year("03y8jje75", 2020) # 2023-10-06: 1; 2023-11-17: 1
b25_works_2020 <- fetch_ror_year("03vq5n859", 2020) # 2023-10-06: 0; 2023-11-17: 0
# bibliometrix
library(bibliometrix)
# bibliometrix
install.packages("bibliometrix")
summary(biblioAnalysis(M))
# bibliometrix
library(bibliometrix)
summary(biblioAnalysis(M))
summary(biblioAnalysis(b2_works_2020))
### You can also run one by one
b2_works_2020 <- fetch_ror_year("039wwwz66", 2020)  # 2023-10-06: 92 ; 2023-11-17: 94
summary(biblioAnalysis(b2_works_2020))
b2_works_2020
summary(biblioAnalysis(b2_works_2020))
biblioAnalysis(b2_works_2020)
works_search <- oa_fetch(
entity = "works",
title.search = c("bibliometric analysis", "science mapping"),
cited_by_count = ">50",
from_publication_date = "2020-01-01",
to_publication_date = "2021-12-31",
options = list(sort = "cited_by_count:desc"),
verbose = TRUE
)
M <- oa2bibliometrix(works_search)
summary(biblioAnalysis(M))
### Testing B2
test_works_2020 <-oa_fetch(entity = "works",
authorships.institutions.ror = "039wwwz66",
from_publication_date = "2020-01-01",
to_publication_date = "2021-12-31",
options = list(sort = "cited_by_count:desc"),
verbose = TRUE)
M <- oa2bibliometrix(test_works_2020)
summary(biblioAnalysis(M))
class(test_works_2020_analysis)
test_works_2020_analysis <- oa2bibliometrix(test_works_2020)
class(test_works_2020_analysis)
summary(biblioAnalysis(test_works_2020_analysis))
### Testing B2
test_works_2020 <-oa_fetch(entity = "works",
authorships.institutions.ror = "039wwwz66",
from_publication_date = "2021-01-01",
to_publication_date = "2021-12-31",
options = list(sort = "cited_by_count:desc"),
verbose = TRUE)
test_works_2020_analysis <- oa2bibliometrix(test_works_2020)
summary(biblioAnalysis(test_works_2020_analysis))
### Testing B2
test_works_2020 <-oa_fetch(entity = "works",
authorships.institutions.ror = "039wwwz66",
from_publication_date = "2019-01-01",
to_publication_date = "2022-12-31",
options = list(sort = "cited_by_count:desc"),
verbose = TRUE)
test_works_2020_analysis <- oa2bibliometrix(test_works_2020)
summary(biblioAnalysis(test_works_2020_analysis))
test_works_2020_analysis.columns
test_works_2020_analysis.columns.tolist()
colnames(test_works_2020_analysis)
colnames(test_works_2020)
# Columns in test_works_2020_analysis but not in test_works_2020
unique_columns_in_analysis <- setdiff(names(test_works_2020_analysis), names(test_works_2020))
# Columns in test_works_2020 but not in test_works_2020_analysis
unique_columns_in_2020 <- setdiff(names(test_works_2020), names(test_works_2020_analysis))
names(unique_columns_in_analysis)
class(unique_columns_in_analysis)
print(unique_columns_in_analysis)
summary(test_works_2020_analysis)
missingData(test_works_2020)
missingData(test_works_2020)
summary(biblioAnalysis(test_works_2020_analysis))
biblioshiny()
bm_results <- biblioAnalysis(test_works_2020_analysis)
data <- data.frame(table(test_works_2020_analysis$PY))
ggplot(data, aes(x = Var1, y = Freq)) +
geom_line() +
labs(title = "Publication Trend", x = "Year", y = "Number of Publications")
sourceYear <- sourceYearPlot(bm_results,
main = "Annual Scientific Production",
k = 10,
xlab = "Years",
ylab = "Number of Documents")
# Testing bibliometrix
library(bibliometrix)
sourceYear <- sourceYearPlot(bm_results,
main = "Annual Scientific Production",
k = 10,
xlab = "Years",
ylab = "Number of Documents")
annual_production <- bm_results$AnnualScientificProduction
# Convert to data frame
df_annual_production <- as.data.frame(annual_production) %>%
mutate(Year = rownames(annual_production))
library(ggplot2)
ggplot(df_annual_production, aes(x = Year, y = NP)) +
geom_line() +
labs(title = "Annual Scientific Production",
x = "Year",
y = "Number of Publications")
ggplot(df_annual_production, aes(x = Year, y = NP)) +
geom_line() +
labs(title = "Annual Scientific Production",
x = "Year",
y = "Number of Publications")
mostProdAuthors <- histPlot(bm_results,
field = "Authors",
main = "Most Productive Authors",
k = 10)
keywords <- histPlot(bm_results,
field = "Keywords",
main = "Most Frequent Keywords",
k = 10)
m1 <- histPlot(bm_results,
field = "MostCitedPapers",
main = "Most Frequent Keywords",
k = 10)
NetMatrix <- biblioNetwork(M, analysis = "co-citation", network = "references", sep = ";")
S <- summary(object = results, k = 10, pause = FALSE)
results <- biblioAnalysis(test_works_2020_analysis)
S <- summary(object = results, k = 10, pause = FALSE)
plot(x = results, k = 10, pause = FALSE)
#### Bibliographic network metrices
M <- results
NetMatrix <- biblioNetwork(M, analysis = "co-citation", network = "references", sep = ";")
print(unique_columns_in_analysis)
############## Get a biblioMetrix object
results <- biblioAnalysis(test_works_2020_analysis)
#### Top 10
S <- summary(object = results, k = 10, pause = FALSE)
#### Top 20 sources
S <- summary(object = results, k = 10, pause = FALSE)
############## Get a biblioMetrix object
results <- biblioAnalysis(test_works_2020_analysis)
#### Top 20 sources
S <- summary(object = results, k = 10, pause = FALSE)
#### Top 20 sources
S <- summary(object = results, k = 20, pause = FALSE)
#### Basic plots
plot(x = results, k = 20, pause = FALSE)
#### Basic plots
plot(x = results, k = 10, pause = FALSE)
#### Basic plots; k=20 crash?
plot(x = results, k = 15, pause = FALSE)
#### Basic plots; k=20 crash?
plot(x = results, k = 20, pause = FALSE)
#### Bibliographic network metrices !!!!!!!!!!!!!!!!!!!!!!!!!!!
M <- results
NetMatrix <- biblioNetwork(M, analysis = "co-citation", network = "references", sep = ";")
#### Basic plots
plot(x = results, k = 15, pause = FALSE)
#### Bibliographic network metrices !!!!!!!!!!!!!!!!!!!!!!!!!!!
M <- results
NetMatrix <- biblioNetwork(M, analysis = "co-citation", network = "references", sep = ";")
#### Top 20 results (country, author, source, etc)
S <- summary(object = results, k = 10, pause = FALSE)
#### Basic plots
plot(x = results, k = 10, pause = FALSE)
#### Bibliographic network metrices !!!!!!!!!!!!!!!!!!!!!!!!!!!
M <- results
NetMatrix <- biblioNetwork(M, analysis = "co-citation", network = "references", sep = ";")
summary(biblioAnalysis(M))
works_search <- oa_fetch(
entity = "works",
title.search = c("bibliometric analysis", "science mapping"),
cited_by_count = ">50",
from_publication_date = "2020-01-01",
to_publication_date = "2021-12-31",
options = list(sort = "cited_by_count:desc"),
verbose = TRUE
)
M <- oa2bibliometrix(works_search)
summary(biblioAnalysis(M))
### Testing B2 for analysis
test_works_2020 <-oa_fetch(entity = "works",
authorships.institutions.ror = "039wwwz66",
from_publication_date = "2019-01-01",
to_publication_date = "2022-12-31",
options = list(sort = "cited_by_count:desc"),
verbose = TRUE)
test_works_2020_analysis <- oa2bibliometrix(test_works_2020)
summary(test_works_2020_analysis)
unique_columns_in_analysis <- setdiff(names(test_works_2020_analysis), names(test_works_2020))
print(unique_columns_in_analysis)
############## Get a biblioMetrix object
results <- biblioAnalysis(test_works_2020_analysis)
#### Top 20 results (country, author, source, etc)
S <- summary(object = results, k = 10, pause = FALSE)
#### Basic plots
plot(x = results, k = 10, pause = FALSE)
#### Bibliographic network metrices !!!!!!!!!!!!!!!!!!!!!!!!!!!
M <- results
NetMatrix <- biblioNetwork(M, analysis = "co-citation", network = "references", sep = ";")
com <- missingData(M)
com <- missingData(M)
M <- oa2bibliometrix(works_search)
com <- missingData(M)
NetMatrix <- biblioNetwork(M, analysis = "co-citation", network = "references", sep = ";")
#### Bibliographic network metrices !!!!!!!!!!!!!!!!!!!!!!!!!!!
com <- missingData(results)
### Testing B2 for analysis
test_works_2020 <-oa_fetch(entity = "works",
authorships.institutions.ror = "039wwwz66",
from_publication_date = "2019-01-01",
to_publication_date = "2022-12-31",
options = list(sort = "cited_by_count:desc"),
verbose = TRUE)
test_works_2020_analysis <- oa2bibliometrix(test_works_2020)
summary(test_works_2020_analysis)
unique_columns_in_analysis <- setdiff(names(test_works_2020_analysis), names(test_works_2020))
print(unique_columns_in_analysis)
############## Get a biblioMetrix object
results <- biblioAnalysis(test_works_2020_analysis)
#### Top 20 results (country, author, source, etc)
S <- summary(object = results, k = 10, pause = FALSE)
#### Basic plots
plot(x = results, k = 10, pause = FALSE)
#### Bibliographic network metrices !!!!!!!!!!!!!!!!!!!!!!!!!!!
com <- missingData(results)
com <- missingData(test_works_2020_analysis)
NetMatrix <- biblioNetwork(test_works_2020_analysis, analysis = "co-citation", network = "references", sep = ";")
com$mandatoryTags
# Plot the network
net=networkPlot(NetMatrix, Title = "Co-Citation Network", type = "fruchterman", size=T, remove.multiple=FALSE, labelsize=0.7,edgesize = 5)
# Create a co-citation network
NetMatrix <- biblioNetwork(test_works_2020_analysis, analysis = "co-citation", network = "references", n=30, sep = ";")
# Plot the network
net=networkPlot(NetMatrix, Title = "Co-Citation Network", type = "fruchterman", size=T, remove.multiple=FALSE, labelsize=0.7,edgesize = 5)
# create a co-citation network
NetMatrix <- biblioNetwork(test_works_2020_analysis, analysis = "co-citation", network = "references", sep = ";")
# Plot the network
net=networkPlot(NetMatrix, Title = "Co-Citation Network", type = "fruchterman", size=T, remove.multiple=FALSE, labelsize=0.7,edgesize = 5)
# Create a co-citation network; n = 30 is number of nodes (references) to be in the network.
NetMatrix <- biblioNetwork(test_works_2020_analysis, analysis = "co-citation", network = "references", n=30, sep = ";")
# Plot the network
net=networkPlot(NetMatrix, Title = "Co-Citation Network", type = "fruchterman", size=T, remove.multiple=FALSE, labelsize=0.7,edgesize = 5)
net=networkPlot(NetMatrix, Title = "Co-Citation Network", type = "circular", size=T, remove.multiple=FALSE, labelsize=0.7,edgesize = 5)
net=networkPlot(NetMatrix, Title = "Co-Citation Network", type = "spectral", size=T, remove.multiple=FALSE, labelsize=0.7,edgesize = 5)
net2= networkPlot(NetMatrix, Title ="Co-Citation Network", type ="auto", size = T, remove.multiple = FALSE, labelsize = 1, edgesize = 5)
# Create keyword co-occurrences network
NetMatrix2 <- biblioNetwork(test_works_2020_analysis, analysis = "co-occurrences", network = "keywords", sep = ";")
# Plot the network
net=networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", type = "fruchterman", size=T,edgesize = 5,labelsize=0.7)
# Conceptual Structure using keywords (method="CA")
CS <- conceptualStructure(test_works_2020_analysis, field="ID", method="MCA", minDegree=10, clust=5, stemming=FALSE, labelsize=15, documents=20, graph=FALSE)
plot(CS$graph_terms)
net2= networkPlot(NetMatrix, Title ="Co-Citation Network", type ="auto", size = T, remove.multiple = FALSE, labelsize = 1, edgesize = 5)
net2= networkPlot(NetMatrix, Title ="Co-Citation Network", type ="auto", size = T, remove.multiple = FALSE, labelsize =0.7, edgesize = 5)
net2= networkPlot(NetMatrix, Title ="Co-Citation Network", type ="circle", size = T, remove.multiple = FALSE, labelsize =0.7, edgesize = 5)
net3= networkPlot(NetMatrix, Title ="Co-Citation Network", type ="sphere", size = T, remove.multiple = FALSE, labelsize =0.7, edgesize = 5)
net4= networkPlot(NetMatrix, Title ="Co-Citation Network", type ="mds", size = T, remove.multiple = FALSE, labelsize =0.7, edgesize = 5)
net5= networkPlot(NetMatrix, Title ="Co-Citation Network", type ="kamada", size = T, remove.multiple = FALSE, labelsize =0.7, edgesize = 5)
# Plot the network
net=networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", type = "fruchterman", size=T,edgesize = 5,labelsize=0.7)
# Plot the network. type options are: "auto", "circle", "sphere", "mds", "fruchterman", "kamada"
net = networkPlot(NetMatrix, Title ="Co-Citation Network", type = "fruchterman", size=T, remove.multiple=FALSE, labelsize=0.7,edgesize = 5)
net2= networkPlot(NetMatrix, Title ="Co-Citation Network", type ="circle", size = T, remove.multiple = FALSE, labelsize =0.7, edgesize = 5)
net3= networkPlot(NetMatrix, Title ="Co-Citation Network", type ="sphere", size = T, remove.multiple = FALSE, labelsize =0.7, edgesize = 5)
net4= networkPlot(NetMatrix, Title ="Co-Citation Network", type ="mds", size = T, remove.multiple = FALSE, labelsize =0.7, edgesize = 5)
net5= networkPlot(NetMatrix, Title ="Co-Citation Network", type ="kamada", size = T, remove.multiple = FALSE, labelsize =0.7, edgesize = 5)
# Create keyword co-occurrences network
NetMatrix2 <- biblioNetwork(test_works_2020_analysis, analysis = "co-occurrences", network = "keywords", sep = ";")
# Plot the network
net=networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", type = "fruchterman", size=T,edgesize = 5,labelsize=0.7)
net = networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", type = "circle", size=T,edgesize = 5,labelsize=0.7)
net = networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", type = "sphere", size=T,edgesize = 5,labelsize=0.7)
NetMatrix2 <- biblioNetwork(test_works_2020_analysis, analysis = "authors", network = "references", n=30, sep = ";")
NetMatrix2 <- biblioNetwork(test_works_2020_analysis, analysis = "collaboration", network = "authors", n=30, sep = ";")
# Plot the network. type options are: "auto", "circle", "sphere", "mds", "fruchterman", "kamada"
net = networkPlot(NetMatrix2, Title ="Author Network", type = "fruchterman", size=T, remove.multiple=FALSE, labelsize=0.7,edgesize = 5)
# Plot the network
net = networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", size=T, edgesize=5,labelsize=0.7, type = "fruchterman")
# Plot the network
net = networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", size=T, edgesize=5,labelsize=1.5, type = "fruchterman")
net = networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", size=T, edgesize=5,labelsize=1.5, type = "circle")
net = networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", size=T, edgesize=5,labelsize=1.5, type = "sphere")
# Plot the network
net = networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", size=T, edgesize=5,labelsize=1.2, type = "fruchterman")
net = networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", size=T, edgesize=5,labelsize=1.2, type = "circle")
net = networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", size=T, edgesize=5,labelsize=1.2, type = "sphere")
# Create keyword co-occurrences network
NetMatrix2 <- biblioNetwork(test_works_2020_analysis, analysis = "co-occurrences", network = "keywords", sep = ";")
# Plot the network
net = networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", size=T, edgesize=5,labelsize=1.2, type = "fruchterman")
net = networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", size=T, edgesize=5,labelsize=1.2, type = "circle")
net = networkPlot(NetMatrix2, normalize="association", weighted=T, n = 30, Title = "Keyword Co-occurrences", size=T, edgesize=5,labelsize=1.2, type = "sphere")
NetMatrix3 <- biblioNetwork(test_works_2020_analysis, analysis = "collaboration", network = "authors", n=30, sep = ";")
# Plot the network. type options are: "auto", "circle", "sphere", "mds", "fruchterman", "kamada"
net = networkPlot(NetMatrix3, Title ="Author Network", type = "fruchterman", size=T, remove.multiple=FALSE, labelsize=0.7,edgesize = 5)
NetMatrix3 <- biblioNetwork(test_works_2020_analysis, analysis = "collaboration", network = "authors", n=30, sep = ";")
# Plot the network. type options are: "auto", "circle", "sphere", "mds", "fruchterman", "kamada"
net = networkPlot(NetMatrix3, Title ="Author Network", size=T, remove.multiple=FALSE, labelsize=1.2,edgesize = 5, type = "fruchterman")
net = networkPlot(NetMatrix3, Title ="Author Network", size=T, remove.multiple=FALSE, labelsize=1.2,edgesize = 5, type = "circle")
net = networkPlot(NetMatrix3, Title ="Author Network", size=T, remove.multiple=FALSE, labelsize=1.2,edgesize = 5, type = "sphere")
net = networkPlot(NetMatrix3, Title ="Author Network", size=T, remove.multiple=FALSE, labelsize=1.2,edgesize = 5, type = "circle")
indices <- grep("justin w. griffin", test_works_2020$column_name)  # To get indices of matches in a specific column
indices <- grep("justin w. griffin", test_works_2020$column_name, ignore.case=TRUE)  # To get indices of matches in a specific column
rows <- df[grepl("kewei chen", test_works_2020$column_name), ignore.case=TRUE ]  # To get rows where the match is found
rows <- df[grepl("kewei chen", test_works_2020$column_name), ignore.case=TRUE)]  # To get rows where the match is found
indices <- grep("kewei chen", test_works_2020$column_name, ignore.case=TRUE)  # To get indices of matches in a specific column
library(dplyr)
library(stringr)
filtered_df <- test_works_2020 %>% filter(str_detect(column_name, regex("kewei", ignore_case = TRUE)))
search_string <- "kewei"
matches <- sapply(test_works_2020, function(x) grepl(search_string, x, ignore.case = TRUE, fixed = TRUE))
rows_with_matches <- which(rowSums(matches) > 0, arr.ind = TRUE)
filtered_df <-test_works_2020 %>% filter(str_detect(test_works_2020$author, regex("kewei", ignore_case = TRUE)))
library(ggplot2)
# Example vectors
affiliations <- c("Banner - University Medical Center Tucson",
"The University of Arizona",
"Banner - University Medical Center Phoenix",
"Banner Alzheimer's Institute",
"University of Arizona College of Medicine - Tucson",
"Banner Sun Health Research Institute",
"University of Arizona College of Medicine - Phoenix",
"Mayo Clinic",
"Harvard Medical School",
"Banner Health")
document_counts <- c(120, 80, 60, 50, 45, 30, 25, 20, 15, 10)  # Example counts
# Create the data frame
df <- data.frame(Affiliation = affiliations, Documents = document_counts)
# Order the data frame by document count in descending order
df <- df[order(-df$Documents),]
# Reset the row names to avoid confusion
rownames(df) <- seq(length(df$Documents))
# View the data frame
print(df)
ggplot(df, aes(x = reorder(affiliations, -Documents), y = Documents)) +
geom_bar(stat = "identity", aes(fill = Affiliation)) +  # Use 'identity' to tell ggplot to use the actual 'Documents' values
coord_flip() +  # Flip the axes to make the bars horizontal
labs(x = "Number of Documents", y = "Affiliation", title = "Documents by Affiliation") +
theme_minimal() +  # Use a minimal theme for a clean look
scale_fill_viridis_d(guide = FALSE) +  # Optional: Use a discrete viridis color scale and remove the legend
theme(axis.text.x = element_text(size = 10),  # Adjust the size of x-axis texts
axis.title.x = element_text(size = 12),  # Adjust the size of x-axis title
axis.title.y = element_blank(),  # Remove y-axis title
panel.grid.major.x = element_line(color = "gray80", size = 0.5),  # Lighten the grid lines
panel.grid.minor.x = element_blank(),  # Remove minor grid lines
panel.background = element_blank(),  # Remove panel background
plot.title = element_text(hjust = 0.5))  # Center the plot title
######################
# The works_yr is a tibble. To calculate the number of row use nrow()
# To get the tibble itself (and not a one-column tibble containing the tibble), you should use double square brackets [[ ]] for subsetting.
banner_df$works_yr_2000[[1]]
nrow(banner_df$works_yr_2000[[1]])
banner_df$`Organization Name`[i]
# Create a new tibble with org_name and the number of publications from the last column
org_works <- tibble(
`Organization Name` = character(),
total_works_by_year = numeric(),
)
for (i in seq_len(nrow(banner_df))) {
organization_name <- banner_df$`Organization Name`[i]
works_tibble <- banner_df$works_yr_2000[[i]]
if (is.null(works_tibble)) {
total_works <- 0
} else {
total_works <- nrow(works_tibble)
}
# Create a new row and add it to the org_works tibble
new_row <- tibble(`Organization Name` = organization_name, total_works_by_year = total_works)
org_works <- bind_rows(org_works, new_row)
}
# Assuming df is your data frame with 'Affiliation' and 'Documents' columns
# and it's already sorted in descending order by 'Documents'
org_works_sorted <- org_works %>%
arrange(desc(total_works_by_year))
#####################################################################
####################### Bar Charts ###################################
### Plot all org.
ggplot(org_works, aes(x = reorder(`Organization Name`, total_works_by_year), y = total_works_by_year)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Total Works by Organization",
x = "Organization Name",
y = "Total Works") +
theme_minimal() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5))
### Filter out org > 0 works.
org_works_filtered <- org_works %>%
filter(total_works_by_year > 0)
# Calculate the percentages for each org
org_works_filtered <- org_works_filtered %>%
mutate(Percentage = total_works_by_year / sum(total_works_by_year) * 100)
### Display the bar chart: descending order
ggplot(org_works_filtered, aes(x = reorder(`Organization Name`, -total_works_by_year), y = total_works_by_year, fill = `Organization Name`)) +
geom_bar(stat = "identity") +
coord_flip() +
geom_text(aes(label = paste0(round(Percentage, 1), "%")),
position = position_stack(vjust = 0.5),
hjust = 1) +
labs(title = "Banner Health: Total Works by Organization",
x = "Total Works",
y = "Organization Name") +
theme_minimal() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5),
legend.position = "none")  # Hide the legend if not needed
# common libraries to add
library(openalexR)
library(dplyr)
library(knitr)
library(writexl)
library(tibble)
library(ggplot2)
library(bibliometrix)
library(plotly)
works_from_orcids <- oa_fetch(
entity = "works",
author.orcid = c("0000-0001-9518-2684"),
# Yan Han ORCID: 0000-0001-9518-2684; have 14 works at ORCID's website. OpenAlex does not pull works from ORCID at the moment. It pulls majorly from Microsoft academic graph
# Yan Han OpenAlex ID. https://api.openalex.org/people/A2108267685
# author.orcid = c("0000-0001-6187-6610", "0000-0002-8517-9411"),
verbose = TRUE
)
works_from_orcids |>
show_works()  |>
knitr::kable()
### Aug 2023: Yan Han: affiliation Jilin university. Wrong
##### Getting authors' info using their ORCIDs
authors_from_orcids <- oa_fetch(
entity = "authors",
orcid =  c("0000-0001-6187-6610", "0000-0002-8517-9411", "0000-0003-1613-5981", "0000-0001-9518-2684")
)
str(authors_from_orcids) # show the object
authors_from_orcids |>
show_authors() |>
knitr::kable()
#################### Author's openAlex ID ###########################
### Sep 2023: old authorID was removed.
author_from_openalex_id <-oa_fetch(entity = "author", openalex = "A4353996111" )
###################### Author's name ####################################
###  use search for fuzzy name (middle name),
###  do NOT use display_name because it requires an exact match. Often there are multiple middle names for an author
authors_from_names <- oa_fetch(entity = "author",
search = "Phillip Kuo")  ### "search" syntax allowes fuzzy search for middle name
authors_from_names
authors_from_names$id
authors_from_names$affiliation_display_name
grep("Arizona*", authors_from_names$affiliation_display_name, value=TRUE, ignore.case=TRUE)
authors_from_names |>
show_authors() |>
knitr::kable()
# All authors
org_args <- list(
entity = "authors",
last_known_institution.id = "I138006243", # University of Arizona OpenAlex ID
works_count = ">0"
)
# July 2023: 58,183 records.
# Sep 2023: 26,801 records. (Note: author disambuition system changed in Aug 2023)
do.call(oa_fetch, c(org_args, list(count_only = TRUE)))
# Download the list. It may take 2-5 min to run
all_authors <- do.call(oa_fetch, org_args) |>
show_authors() |>
knitr::kable()
